                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module snake_v2
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _number_string
                                     12 	.globl _main
                                     13 	.globl _timer0_interrupt
                                     14 	.globl _UART_Receive
                                     15 	.globl _uart_init
                                     16 	.globl _key_pressed_handle
                                     17 	.globl _reset_timer_0
                                     18 	.globl _go_right
                                     19 	.globl _go_left
                                     20 	.globl _go_down
                                     21 	.globl _go_up
                                     22 	.globl _update_game
                                     23 	.globl _update_food
                                     24 	.globl _game_over
                                     25 	.globl _display_number
                                     26 	.globl _srand
                                     27 	.globl _rand
                                     28 	.globl _CY
                                     29 	.globl _AC
                                     30 	.globl _F0
                                     31 	.globl _RS1
                                     32 	.globl _RS0
                                     33 	.globl _OV
                                     34 	.globl _F1
                                     35 	.globl _P
                                     36 	.globl _PS
                                     37 	.globl _PT1
                                     38 	.globl _PX1
                                     39 	.globl _PT0
                                     40 	.globl _PX0
                                     41 	.globl _RD
                                     42 	.globl _WR
                                     43 	.globl _T1
                                     44 	.globl _T0
                                     45 	.globl _INT1
                                     46 	.globl _INT0
                                     47 	.globl _TXD
                                     48 	.globl _RXD
                                     49 	.globl _P3_7
                                     50 	.globl _P3_6
                                     51 	.globl _P3_5
                                     52 	.globl _P3_4
                                     53 	.globl _P3_3
                                     54 	.globl _P3_2
                                     55 	.globl _P3_1
                                     56 	.globl _P3_0
                                     57 	.globl _EA
                                     58 	.globl _ES
                                     59 	.globl _ET1
                                     60 	.globl _EX1
                                     61 	.globl _ET0
                                     62 	.globl _EX0
                                     63 	.globl _P2_7
                                     64 	.globl _P2_6
                                     65 	.globl _P2_5
                                     66 	.globl _P2_4
                                     67 	.globl _P2_3
                                     68 	.globl _P2_2
                                     69 	.globl _P2_1
                                     70 	.globl _P2_0
                                     71 	.globl _SM0
                                     72 	.globl _SM1
                                     73 	.globl _SM2
                                     74 	.globl _REN
                                     75 	.globl _TB8
                                     76 	.globl _RB8
                                     77 	.globl _TI
                                     78 	.globl _RI
                                     79 	.globl _P1_7
                                     80 	.globl _P1_6
                                     81 	.globl _P1_5
                                     82 	.globl _P1_4
                                     83 	.globl _P1_3
                                     84 	.globl _P1_2
                                     85 	.globl _P1_1
                                     86 	.globl _P1_0
                                     87 	.globl _TF1
                                     88 	.globl _TR1
                                     89 	.globl _TF0
                                     90 	.globl _TR0
                                     91 	.globl _IE1
                                     92 	.globl _IT1
                                     93 	.globl _IE0
                                     94 	.globl _IT0
                                     95 	.globl _P0_7
                                     96 	.globl _P0_6
                                     97 	.globl _P0_5
                                     98 	.globl _P0_4
                                     99 	.globl _P0_3
                                    100 	.globl _P0_2
                                    101 	.globl _P0_1
                                    102 	.globl _P0_0
                                    103 	.globl _TF2
                                    104 	.globl _EXF2
                                    105 	.globl _RCLK
                                    106 	.globl _TCLK
                                    107 	.globl _EXEN2
                                    108 	.globl _TR2
                                    109 	.globl _C_T2
                                    110 	.globl _CP_RL2
                                    111 	.globl _T2CON_7
                                    112 	.globl _T2CON_6
                                    113 	.globl _T2CON_5
                                    114 	.globl _T2CON_4
                                    115 	.globl _T2CON_3
                                    116 	.globl _T2CON_2
                                    117 	.globl _T2CON_1
                                    118 	.globl _T2CON_0
                                    119 	.globl _PT2
                                    120 	.globl _ET2
                                    121 	.globl _B
                                    122 	.globl _ACC
                                    123 	.globl _PSW
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _TH2
                                    143 	.globl _TL2
                                    144 	.globl _RCAP2H
                                    145 	.globl _RCAP2L
                                    146 	.globl _T2CON
                                    147 	.globl _show_food
                                    148 	.globl _bit1
                                    149 	.globl _bit0
                                    150 	.globl _food
                                    151 	.globl _tail
                                    152 	.globl _head
                                    153 	.globl _key_pressed
                                    154 	.globl _data_mat
                                    155 	.globl _cur_dir
                                    156 	.globl _sqr_left
                                    157 	.globl _point
                                    158 	.globl _game_timer_counter
                                    159 	.globl _timer_counter
                                    160 	.globl _received_data
                                    161 ;--------------------------------------------------------
                                    162 ; special function registers
                                    163 ;--------------------------------------------------------
                                    164 	.area RSEG    (ABS,DATA)
      000000                        165 	.org 0x0000
                           0000C8   166 _T2CON	=	0x00c8
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           000080   171 _P0	=	0x0080
                           000081   172 _SP	=	0x0081
                           000082   173 _DPL	=	0x0082
                           000083   174 _DPH	=	0x0083
                           000087   175 _PCON	=	0x0087
                           000088   176 _TCON	=	0x0088
                           000089   177 _TMOD	=	0x0089
                           00008A   178 _TL0	=	0x008a
                           00008B   179 _TL1	=	0x008b
                           00008C   180 _TH0	=	0x008c
                           00008D   181 _TH1	=	0x008d
                           000090   182 _P1	=	0x0090
                           000098   183 _SCON	=	0x0098
                           000099   184 _SBUF	=	0x0099
                           0000A0   185 _P2	=	0x00a0
                           0000A8   186 _IE	=	0x00a8
                           0000B0   187 _P3	=	0x00b0
                           0000B8   188 _IP	=	0x00b8
                           0000D0   189 _PSW	=	0x00d0
                           0000E0   190 _ACC	=	0x00e0
                           0000F0   191 _B	=	0x00f0
                                    192 ;--------------------------------------------------------
                                    193 ; special function bits
                                    194 ;--------------------------------------------------------
                                    195 	.area RSEG    (ABS,DATA)
      000000                        196 	.org 0x0000
                           0000AD   197 _ET2	=	0x00ad
                           0000BD   198 _PT2	=	0x00bd
                           0000C8   199 _T2CON_0	=	0x00c8
                           0000C9   200 _T2CON_1	=	0x00c9
                           0000CA   201 _T2CON_2	=	0x00ca
                           0000CB   202 _T2CON_3	=	0x00cb
                           0000CC   203 _T2CON_4	=	0x00cc
                           0000CD   204 _T2CON_5	=	0x00cd
                           0000CE   205 _T2CON_6	=	0x00ce
                           0000CF   206 _T2CON_7	=	0x00cf
                           0000C8   207 _CP_RL2	=	0x00c8
                           0000C9   208 _C_T2	=	0x00c9
                           0000CA   209 _TR2	=	0x00ca
                           0000CB   210 _EXEN2	=	0x00cb
                           0000CC   211 _TCLK	=	0x00cc
                           0000CD   212 _RCLK	=	0x00cd
                           0000CE   213 _EXF2	=	0x00ce
                           0000CF   214 _TF2	=	0x00cf
                           000080   215 _P0_0	=	0x0080
                           000081   216 _P0_1	=	0x0081
                           000082   217 _P0_2	=	0x0082
                           000083   218 _P0_3	=	0x0083
                           000084   219 _P0_4	=	0x0084
                           000085   220 _P0_5	=	0x0085
                           000086   221 _P0_6	=	0x0086
                           000087   222 _P0_7	=	0x0087
                           000088   223 _IT0	=	0x0088
                           000089   224 _IE0	=	0x0089
                           00008A   225 _IT1	=	0x008a
                           00008B   226 _IE1	=	0x008b
                           00008C   227 _TR0	=	0x008c
                           00008D   228 _TF0	=	0x008d
                           00008E   229 _TR1	=	0x008e
                           00008F   230 _TF1	=	0x008f
                           000090   231 _P1_0	=	0x0090
                           000091   232 _P1_1	=	0x0091
                           000092   233 _P1_2	=	0x0092
                           000093   234 _P1_3	=	0x0093
                           000094   235 _P1_4	=	0x0094
                           000095   236 _P1_5	=	0x0095
                           000096   237 _P1_6	=	0x0096
                           000097   238 _P1_7	=	0x0097
                           000098   239 _RI	=	0x0098
                           000099   240 _TI	=	0x0099
                           00009A   241 _RB8	=	0x009a
                           00009B   242 _TB8	=	0x009b
                           00009C   243 _REN	=	0x009c
                           00009D   244 _SM2	=	0x009d
                           00009E   245 _SM1	=	0x009e
                           00009F   246 _SM0	=	0x009f
                           0000A0   247 _P2_0	=	0x00a0
                           0000A1   248 _P2_1	=	0x00a1
                           0000A2   249 _P2_2	=	0x00a2
                           0000A3   250 _P2_3	=	0x00a3
                           0000A4   251 _P2_4	=	0x00a4
                           0000A5   252 _P2_5	=	0x00a5
                           0000A6   253 _P2_6	=	0x00a6
                           0000A7   254 _P2_7	=	0x00a7
                           0000A8   255 _EX0	=	0x00a8
                           0000A9   256 _ET0	=	0x00a9
                           0000AA   257 _EX1	=	0x00aa
                           0000AB   258 _ET1	=	0x00ab
                           0000AC   259 _ES	=	0x00ac
                           0000AF   260 _EA	=	0x00af
                           0000B0   261 _P3_0	=	0x00b0
                           0000B1   262 _P3_1	=	0x00b1
                           0000B2   263 _P3_2	=	0x00b2
                           0000B3   264 _P3_3	=	0x00b3
                           0000B4   265 _P3_4	=	0x00b4
                           0000B5   266 _P3_5	=	0x00b5
                           0000B6   267 _P3_6	=	0x00b6
                           0000B7   268 _P3_7	=	0x00b7
                           0000B0   269 _RXD	=	0x00b0
                           0000B1   270 _TXD	=	0x00b1
                           0000B2   271 _INT0	=	0x00b2
                           0000B3   272 _INT1	=	0x00b3
                           0000B4   273 _T0	=	0x00b4
                           0000B5   274 _T1	=	0x00b5
                           0000B6   275 _WR	=	0x00b6
                           0000B7   276 _RD	=	0x00b7
                           0000B8   277 _PX0	=	0x00b8
                           0000B9   278 _PT0	=	0x00b9
                           0000BA   279 _PX1	=	0x00ba
                           0000BB   280 _PT1	=	0x00bb
                           0000BC   281 _PS	=	0x00bc
                           0000D0   282 _P	=	0x00d0
                           0000D1   283 _F1	=	0x00d1
                           0000D2   284 _OV	=	0x00d2
                           0000D3   285 _RS0	=	0x00d3
                           0000D4   286 _RS1	=	0x00d4
                           0000D5   287 _F0	=	0x00d5
                           0000D6   288 _AC	=	0x00d6
                           0000D7   289 _CY	=	0x00d7
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable register banks
                                    292 ;--------------------------------------------------------
                                    293 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        294 	.ds 8
                                    295 ;--------------------------------------------------------
                                    296 ; overlayable bit register bank
                                    297 ;--------------------------------------------------------
                                    298 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        299 bits:
      000000                        300 	.ds 1
                           008000   301 	b0 = bits[0]
                           008100   302 	b1 = bits[1]
                           008200   303 	b2 = bits[2]
                           008300   304 	b3 = bits[3]
                           008400   305 	b4 = bits[4]
                           008500   306 	b5 = bits[5]
                           008600   307 	b6 = bits[6]
                           008700   308 	b7 = bits[7]
                                    309 ;--------------------------------------------------------
                                    310 ; internal ram data
                                    311 ;--------------------------------------------------------
                                    312 	.area DSEG    (DATA)
      000000                        313 _display_number_led_65537_56:
      000000                        314 	.ds 1
      000001                        315 _display_number_neg_65537_56:
      000001                        316 	.ds 1
      000002                        317 _received_data::
      000002                        318 	.ds 1
      000003                        319 _timer_counter::
      000003                        320 	.ds 4
      000007                        321 _game_timer_counter::
      000007                        322 	.ds 2
      000009                        323 _point::
      000009                        324 	.ds 1
      00000A                        325 _sqr_left::
      00000A                        326 	.ds 1
      00000B                        327 _cur_dir::
      00000B                        328 	.ds 1
      00000C                        329 _data_mat::
      00000C                        330 	.ds 8
      000014                        331 _key_pressed::
      000014                        332 	.ds 1
      000015                        333 _head::
      000015                        334 	.ds 1
      000016                        335 _tail::
      000016                        336 	.ds 1
      000017                        337 _food::
      000017                        338 	.ds 1
      000018                        339 _bit0::
      000018                        340 	.ds 8
      000020                        341 _bit1::
      000020                        342 	.ds 8
      000028                        343 _game_over_temp_65537_111:
      000028                        344 	.ds 1
      000029                        345 _game_over_i_65537_111:
      000029                        346 	.ds 1
      00002A                        347 _game_over_j_65537_111:
      00002A                        348 	.ds 1
      00002B                        349 _game_over_t_65537_111:
      00002B                        350 	.ds 1
      00002C                        351 _game_over_current_data_983041_136:
      00002C                        352 	.ds 1
      00002D                        353 _game_over_row_917505_148:
      00002D                        354 	.ds 1
      00002E                        355 _game_over_current_data_983041_149:
      00002E                        356 	.ds 1
      00002F                        357 _game_over_i_1048577_150:
      00002F                        358 	.ds 1
      000030                        359 _game_over_sloc0_1_0:
      000030                        360 	.ds 1
      000031                        361 _game_over_sloc1_1_0:
      000031                        362 	.ds 2
      000033                        363 _game_over_sloc2_1_0:
      000033                        364 	.ds 2
      000035                        365 _update_food_i_131072_157:
      000035                        366 	.ds 1
      000036                        367 _show_food::
      000036                        368 	.ds 1
      000037                        369 _main_current_data_655360_262:
      000037                        370 	.ds 1
                                    371 ;--------------------------------------------------------
                                    372 ; overlayable items in internal ram
                                    373 ;--------------------------------------------------------
                                    374 ;--------------------------------------------------------
                                    375 ; Stack segment in internal ram
                                    376 ;--------------------------------------------------------
                                    377 	.area SSEG
      000000                        378 __start__stack:
      000000                        379 	.ds	1
                                    380 
                                    381 ;--------------------------------------------------------
                                    382 ; indirectly addressable internal ram data
                                    383 ;--------------------------------------------------------
                                    384 	.area ISEG    (DATA)
                                    385 ;--------------------------------------------------------
                                    386 ; absolute internal ram data
                                    387 ;--------------------------------------------------------
                                    388 	.area IABS    (ABS,DATA)
                                    389 	.area IABS    (ABS,DATA)
                                    390 ;--------------------------------------------------------
                                    391 ; bit data
                                    392 ;--------------------------------------------------------
                                    393 	.area BSEG    (BIT)
      000000                        394 _update_food_sloc0_1_0:
      000000                        395 	.ds 1
      000001                        396 _update_game_sloc0_1_0:
      000001                        397 	.ds 1
                                    398 ;--------------------------------------------------------
                                    399 ; paged external ram data
                                    400 ;--------------------------------------------------------
                                    401 	.area PSEG    (PAG,XDATA)
                                    402 ;--------------------------------------------------------
                                    403 ; uninitialized external ram data
                                    404 ;--------------------------------------------------------
                                    405 	.area XSEG    (XDATA)
                                    406 ;--------------------------------------------------------
                                    407 ; absolute external ram data
                                    408 ;--------------------------------------------------------
                                    409 	.area XABS    (ABS,XDATA)
                                    410 ;--------------------------------------------------------
                                    411 ; initialized external ram data
                                    412 ;--------------------------------------------------------
                                    413 	.area XISEG   (XDATA)
                                    414 	.area HOME    (CODE)
                                    415 	.area GSINIT0 (CODE)
                                    416 	.area GSINIT1 (CODE)
                                    417 	.area GSINIT2 (CODE)
                                    418 	.area GSINIT3 (CODE)
                                    419 	.area GSINIT4 (CODE)
                                    420 	.area GSINIT5 (CODE)
                                    421 	.area GSINIT  (CODE)
                                    422 	.area GSFINAL (CODE)
                                    423 	.area CSEG    (CODE)
                                    424 ;--------------------------------------------------------
                                    425 ; interrupt vector
                                    426 ;--------------------------------------------------------
                                    427 	.area HOME    (CODE)
      000000                        428 __interrupt_vect:
      000000 02r00r00         [24]  429 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  430 	reti
      000004                        431 	.ds	7
      00000B 02r08rE1         [24]  432 	ljmp	_timer0_interrupt
      00000E                        433 	.ds	5
      000013 32               [24]  434 	reti
      000014                        435 	.ds	7
      00001B 32               [24]  436 	reti
      00001C                        437 	.ds	7
      000023 02r08r85         [24]  438 	ljmp	_UART_Receive
                                    439 ;--------------------------------------------------------
                                    440 ; global & static initialisations
                                    441 ;--------------------------------------------------------
                                    442 	.area HOME    (CODE)
                                    443 	.area GSINIT  (CODE)
                                    444 	.area GSFINAL (CODE)
                                    445 	.area GSINIT  (CODE)
                                    446 	.globl __sdcc_gsinit_startup
                                    447 	.globl __sdcc_program_startup
                                    448 	.globl __start__stack
                                    449 	.globl __mcs51_genXINIT
                                    450 	.globl __mcs51_genXRAMCLEAR
                                    451 	.globl __mcs51_genRAMCLEAR
                                    452 ;	snake_v2.c:20: unsigned long timer_counter = 0;
      000000 E4               [12]  453 	clr	a
      000001 F5*03            [12]  454 	mov	_timer_counter,a
      000003 F5*04            [12]  455 	mov	(_timer_counter + 1),a
      000005 F5*05            [12]  456 	mov	(_timer_counter + 2),a
      000007 F5*06            [12]  457 	mov	(_timer_counter + 3),a
                                    458 ;	snake_v2.c:21: int game_timer_counter = 0;
      000009 F5*07            [12]  459 	mov	_game_timer_counter,a
      00000B F5*08            [12]  460 	mov	(_game_timer_counter + 1),a
                                    461 ;	snake_v2.c:22: char point = 0;
      00000D F5*09            [12]  462 	mov	_point,a
                                    463 ;	snake_v2.c:24: char sqr_left = 61;
      00000F 75*0A 3D         [24]  464 	mov	_sqr_left,#0x3d
                                    465 ;	snake_v2.c:25: char cur_dir = dir_right;
      000012 75*0B 01         [24]  466 	mov	_cur_dir,#0x01
                                    467 ;	snake_v2.c:27: char key_pressed = 20;
      000015 75*14 14         [24]  468 	mov	_key_pressed,#0x14
                                    469 ;	snake_v2.c:449: char show_food = 1;
      000018 75*36 01         [24]  470 	mov	_show_food,#0x01
                                    471 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  472 	ljmp	__sdcc_program_startup
                                    473 ;--------------------------------------------------------
                                    474 ; Home
                                    475 ;--------------------------------------------------------
                                    476 	.area HOME    (CODE)
                                    477 	.area HOME    (CODE)
      000026                        478 __sdcc_program_startup:
      000026 02r0Ar07         [24]  479 	ljmp	_main
                                    480 ;	return from main will return to caller
                                    481 ;--------------------------------------------------------
                                    482 ; code
                                    483 ;--------------------------------------------------------
                                    484 	.area CSEG    (CODE)
                                    485 ;------------------------------------------------------------
                                    486 ;Allocation info for local variables in function 'display_number'
                                    487 ;------------------------------------------------------------
                                    488 ;number                    Allocated to registers r4 r5 r6 r7 
                                    489 ;i                         Allocated to registers r3 
                                    490 ;led                       Allocated with name '_display_number_led_65537_56'
                                    491 ;neg                       Allocated with name '_display_number_neg_65537_56'
                                    492 ;__1966090004              Allocated to registers r3 
                                    493 ;__1966090005              Allocated to registers r0 
                                    494 ;led                       Allocated to registers 
                                    495 ;digit                     Allocated to registers 
                                    496 ;------------------------------------------------------------
                                    497 ;	led7seg.h:27: void display_number(long number)
                                    498 ;	-----------------------------------------
                                    499 ;	 function display_number
                                    500 ;	-----------------------------------------
      000000                        501 _display_number:
                           000007   502 	ar7 = 0x07
                           000006   503 	ar6 = 0x06
                           000005   504 	ar5 = 0x05
                           000004   505 	ar4 = 0x04
                           000003   506 	ar3 = 0x03
                           000002   507 	ar2 = 0x02
                           000001   508 	ar1 = 0x01
                           000000   509 	ar0 = 0x00
      000000 AC 82            [24]  510 	mov	r4,dpl
      000002 AD 83            [24]  511 	mov	r5,dph
      000004 AE F0            [24]  512 	mov	r6,b
      000006 FF               [12]  513 	mov	r7,a
                                    514 ;	led7seg.h:29: if (!number)
      000007 EC               [12]  515 	mov	a,r4
      000008 4D               [12]  516 	orl	a,r5
      000009 4E               [12]  517 	orl	a,r6
      00000A 4F               [12]  518 	orl	a,r7
                                    519 ;	led7seg.h:31: P0 = 0;
      00000B 70 17            [24]  520 	jnz	00103$
      00000D F5 80            [12]  521 	mov	_P0,a
                                    522 ;	led7seg.h:32: P2 &= 0b11100011;
      00000F 53 A0 E3         [24]  523 	anl	_P2,#0xe3
                                    524 ;	led7seg.h:33: P0 = number_string[0];
      000012 90r00r00         [24]  525 	mov	dptr,#_number_string
      000015 E4               [12]  526 	clr	a
      000016 93               [24]  527 	movc	a,@a+dptr
      000017 F5 80            [12]  528 	mov	_P0,a
                                    529 ;	led7seg.h:34: for (char i = 0; i < 100; i++)
      000019 7B 00            [12]  530 	mov	r3,#0x00
      00001B                        531 00113$:
      00001B BB 64 00         [24]  532 	cjne	r3,#0x64,00148$
      00001E                        533 00148$:
      00001E 50 03            [24]  534 	jnc	00101$
      000020 0B               [12]  535 	inc	r3
      000021 80 F8            [24]  536 	sjmp	00113$
      000023                        537 00101$:
                                    538 ;	led7seg.h:36: return;
      000023 22               [24]  539 	ret
      000024                        540 00103$:
                                    541 ;	led7seg.h:39: char neg = 0;
      000024 75*01 00         [24]  542 	mov	_display_number_neg_65537_56,#0x00
                                    543 ;	led7seg.h:40: if (number < 0)
      000027 EF               [12]  544 	mov	a,r7
      000028 30 E7 10         [24]  545 	jnb	acc.7,00122$
                                    546 ;	led7seg.h:42: neg = 1;
      00002B 75*01 01         [24]  547 	mov	_display_number_neg_65537_56,#0x01
                                    548 ;	led7seg.h:43: number = -number;
      00002E C3               [12]  549 	clr	c
      00002F E4               [12]  550 	clr	a
      000030 9C               [12]  551 	subb	a,r4
      000031 FC               [12]  552 	mov	r4,a
      000032 E4               [12]  553 	clr	a
      000033 9D               [12]  554 	subb	a,r5
      000034 FD               [12]  555 	mov	r5,a
      000035 E4               [12]  556 	clr	a
      000036 9E               [12]  557 	subb	a,r6
      000037 FE               [12]  558 	mov	r6,a
      000038 E4               [12]  559 	clr	a
      000039 9F               [12]  560 	subb	a,r7
      00003A FF               [12]  561 	mov	r7,a
                                    562 ;	led7seg.h:53: while (number)
      00003B                        563 00122$:
      00003B 75*00 00         [24]  564 	mov	_display_number_led_65537_56,#0x00
      00003E                        565 00106$:
      00003E EC               [12]  566 	mov	a,r4
      00003F 4D               [12]  567 	orl	a,r5
      000040 4E               [12]  568 	orl	a,r6
      000041 4F               [12]  569 	orl	a,r7
      000042 60 5A            [24]  570 	jz	00108$
                                    571 ;	led7seg.h:55: display_digit(led++, number % 10);
      000044 75*00 0A         [24]  572 	mov	__modslong_PARM_2,#0x0a
      000047 E4               [12]  573 	clr	a
      000048 F5*01            [12]  574 	mov	(__modslong_PARM_2 + 1),a
      00004A F5*02            [12]  575 	mov	(__modslong_PARM_2 + 2),a
      00004C F5*03            [12]  576 	mov	(__modslong_PARM_2 + 3),a
      00004E 8C 82            [24]  577 	mov	dpl,r4
      000050 8D 83            [24]  578 	mov	dph,r5
      000052 8E F0            [24]  579 	mov	b,r6
      000054 EF               [12]  580 	mov	a,r7
      000055 C0 07            [24]  581 	push	ar7
      000057 C0 06            [24]  582 	push	ar6
      000059 C0 05            [24]  583 	push	ar5
      00005B C0 04            [24]  584 	push	ar4
      00005D 12r00r00         [24]  585 	lcall	__modslong
      000060 A8 82            [24]  586 	mov	r0,dpl
      000062 D0 04            [24]  587 	pop	ar4
      000064 D0 05            [24]  588 	pop	ar5
      000066 D0 06            [24]  589 	pop	ar6
      000068 D0 07            [24]  590 	pop	ar7
      00006A AB*00            [24]  591 	mov	r3,_display_number_led_65537_56
      00006C 05*00            [12]  592 	inc	_display_number_led_65537_56
                                    593 ;	led7seg.h:19: P0 = 0;
      00006E 75 80 00         [24]  594 	mov	_P0,#0x00
                                    595 ;	led7seg.h:20: P2 &= 0b11100011;
      000071 53 A0 E3         [24]  596 	anl	_P2,#0xe3
                                    597 ;	led7seg.h:21: P2 |= led << 2;
      000074 EB               [12]  598 	mov	a,r3
      000075 2B               [12]  599 	add	a,r3
      000076 25 E0            [12]  600 	add	a,acc
      000078 42 A0            [12]  601 	orl	_P2,a
                                    602 ;	led7seg.h:24: P0 = number_string[digit];
      00007A E8               [12]  603 	mov	a,r0
      00007B 90r00r00         [24]  604 	mov	dptr,#_number_string
      00007E 93               [24]  605 	movc	a,@a+dptr
      00007F F5 80            [12]  606 	mov	_P0,a
                                    607 ;	led7seg.h:56: number /= 10;
      000081 75*00 0A         [24]  608 	mov	__divslong_PARM_2,#0x0a
      000084 E4               [12]  609 	clr	a
      000085 F5*01            [12]  610 	mov	(__divslong_PARM_2 + 1),a
      000087 F5*02            [12]  611 	mov	(__divslong_PARM_2 + 2),a
      000089 F5*03            [12]  612 	mov	(__divslong_PARM_2 + 3),a
      00008B 8C 82            [24]  613 	mov	dpl,r4
      00008D 8D 83            [24]  614 	mov	dph,r5
      00008F 8E F0            [24]  615 	mov	b,r6
      000091 EF               [12]  616 	mov	a,r7
      000092 12r00r00         [24]  617 	lcall	__divslong
      000095 AC 82            [24]  618 	mov	r4,dpl
      000097 AD 83            [24]  619 	mov	r5,dph
      000099 AE F0            [24]  620 	mov	r6,b
      00009B FF               [12]  621 	mov	r7,a
      00009C 80 A0            [24]  622 	sjmp	00106$
      00009E                        623 00108$:
                                    624 ;	led7seg.h:58: if (neg)
      00009E E5*01            [12]  625 	mov	a,_display_number_neg_65537_56
      0000A0 60 0F            [24]  626 	jz	00115$
                                    627 ;	led7seg.h:60: P0 = 0;
      0000A2 75 80 00         [24]  628 	mov	_P0,#0x00
                                    629 ;	led7seg.h:61: P2 = led << 2;
      0000A5 E5*00            [12]  630 	mov	a,_display_number_led_65537_56
      0000A7 FA               [12]  631 	mov	r2,a
      0000A8 25 E0            [12]  632 	add	a,acc
      0000AA 25 E0            [12]  633 	add	a,acc
      0000AC F5 A0            [12]  634 	mov	_P2,a
                                    635 ;	led7seg.h:62: P0 = 0b01000000;
      0000AE 75 80 40         [24]  636 	mov	_P0,#0x40
      0000B1                        637 00115$:
                                    638 ;	led7seg.h:64: }
      0000B1 22               [24]  639 	ret
                                    640 ;------------------------------------------------------------
                                    641 ;Allocation info for local variables in function 'game_over'
                                    642 ;------------------------------------------------------------
                                    643 ;i                         Allocated to registers r6 r7 
                                    644 ;j                         Allocated to registers r4 r5 
                                    645 ;j                         Allocated to registers r4 r5 
                                    646 ;i                         Allocated to registers r7 
                                    647 ;temp                      Allocated with name '_game_over_temp_65537_111'
                                    648 ;i                         Allocated with name '_game_over_i_65537_111'
                                    649 ;j                         Allocated with name '_game_over_j_65537_111'
                                    650 ;t                         Allocated with name '_game_over_t_65537_111'
                                    651 ;row                       Allocated to registers r4 
                                    652 ;current_data              Allocated with name '_game_over_current_data_983041_136'
                                    653 ;i                         Allocated to registers r2 
                                    654 ;i                         Allocated to registers r6 
                                    655 ;i                         Allocated to registers r6 
                                    656 ;row                       Allocated with name '_game_over_row_917505_148'
                                    657 ;current_data              Allocated with name '_game_over_current_data_983041_149'
                                    658 ;i                         Allocated with name '_game_over_i_1048577_150'
                                    659 ;i                         Allocated to registers r3 
                                    660 ;i                         Allocated to registers r3 
                                    661 ;sloc0                     Allocated with name '_game_over_sloc0_1_0'
                                    662 ;sloc1                     Allocated with name '_game_over_sloc1_1_0'
                                    663 ;sloc2                     Allocated with name '_game_over_sloc2_1_0'
                                    664 ;------------------------------------------------------------
                                    665 ;	snake_v2.c:131: void game_over(void)
                                    666 ;	-----------------------------------------
                                    667 ;	 function game_over
                                    668 ;	-----------------------------------------
      0000B2                        669 _game_over:
                                    670 ;	snake_v2.c:133: EA = 0;
                                    671 ;	assignBit
      0000B2 C2 AF            [12]  672 	clr	_EA
                                    673 ;	snake_v2.c:137: for (int i = 0; i < time * 1e3 / 200; i++)
      0000B4 7E 00            [12]  674 	mov	r6,#0x00
      0000B6 7F 00            [12]  675 	mov	r7,#0x00
      0000B8                        676 00150$:
      0000B8 C3               [12]  677 	clr	c
      0000B9 EE               [12]  678 	mov	a,r6
      0000BA 94 C8            [12]  679 	subb	a,#0xc8
      0000BC EF               [12]  680 	mov	a,r7
      0000BD 64 80            [12]  681 	xrl	a,#0x80
      0000BF 94 80            [12]  682 	subb	a,#0x80
      0000C1 50 37            [24]  683 	jnc	00103$
                                    684 ;	snake_v2.c:139: buzzer_pin = 1;
                                    685 ;	assignBit
      0000C3 D2 95            [12]  686 	setb	_P1_5
                                    687 ;	snake_v2.c:140: for (int j = 0; j < 90; j++)
      0000C5 7C 00            [12]  688 	mov	r4,#0x00
      0000C7 7D 00            [12]  689 	mov	r5,#0x00
      0000C9                        690 00144$:
      0000C9 C3               [12]  691 	clr	c
      0000CA EC               [12]  692 	mov	a,r4
      0000CB 94 5A            [12]  693 	subb	a,#0x5a
      0000CD ED               [12]  694 	mov	a,r5
      0000CE 64 80            [12]  695 	xrl	a,#0x80
      0000D0 94 80            [12]  696 	subb	a,#0x80
      0000D2 50 07            [24]  697 	jnc	00101$
      0000D4 0C               [12]  698 	inc	r4
      0000D5 BC 00 F1         [24]  699 	cjne	r4,#0x00,00144$
      0000D8 0D               [12]  700 	inc	r5
      0000D9 80 EE            [24]  701 	sjmp	00144$
      0000DB                        702 00101$:
                                    703 ;	snake_v2.c:142: buzzer_pin = 0;
                                    704 ;	assignBit
      0000DB C2 95            [12]  705 	clr	_P1_5
                                    706 ;	snake_v2.c:143: for (int j = 0; j < 90; j++)
      0000DD 7C 00            [12]  707 	mov	r4,#0x00
      0000DF 7D 00            [12]  708 	mov	r5,#0x00
      0000E1                        709 00147$:
      0000E1 C3               [12]  710 	clr	c
      0000E2 EC               [12]  711 	mov	a,r4
      0000E3 94 5A            [12]  712 	subb	a,#0x5a
      0000E5 ED               [12]  713 	mov	a,r5
      0000E6 64 80            [12]  714 	xrl	a,#0x80
      0000E8 94 80            [12]  715 	subb	a,#0x80
      0000EA 50 07            [24]  716 	jnc	00151$
      0000EC 0C               [12]  717 	inc	r4
      0000ED BC 00 F1         [24]  718 	cjne	r4,#0x00,00147$
      0000F0 0D               [12]  719 	inc	r5
      0000F1 80 EE            [24]  720 	sjmp	00147$
      0000F3                        721 00151$:
                                    722 ;	snake_v2.c:137: for (int i = 0; i < time * 1e3 / 200; i++)
      0000F3 0E               [12]  723 	inc	r6
      0000F4 BE 00 C1         [24]  724 	cjne	r6,#0x00,00150$
      0000F7 0F               [12]  725 	inc	r7
      0000F8 80 BE            [24]  726 	sjmp	00150$
      0000FA                        727 00103$:
                                    728 ;	snake_v2.c:146: for (char i = 0; i < 8; i++)
      0000FA 7F 00            [12]  729 	mov	r7,#0x00
      0000FC                        730 00153$:
      0000FC BF 08 00         [24]  731 	cjne	r7,#0x08,00403$
      0000FF                        732 00403$:
      0000FF 50 09            [24]  733 	jnc	00104$
                                    734 ;	snake_v2.c:147: data_mat[i] = 0;
      000101 EF               [12]  735 	mov	a,r7
      000102 24r0C            [12]  736 	add	a,#_data_mat
      000104 F8               [12]  737 	mov	r0,a
      000105 76 00            [12]  738 	mov	@r0,#0x00
                                    739 ;	snake_v2.c:146: for (char i = 0; i < 8; i++)
      000107 0F               [12]  740 	inc	r7
      000108 80 F2            [24]  741 	sjmp	00153$
      00010A                        742 00104$:
                                    743 ;	snake_v2.c:210: const char temp = rand() % 6;
      00010A 12r00r00         [24]  744 	lcall	_rand
      00010D 75*00 06         [24]  745 	mov	__modsint_PARM_2,#0x06
      000110 75*01 00         [24]  746 	mov	(__modsint_PARM_2 + 1),#0x00
      000113 12r00r00         [24]  747 	lcall	__modsint
      000116 AE 82            [24]  748 	mov	r6,dpl
      000118 AF 83            [24]  749 	mov	r7,dph
      00011A 8E*28            [24]  750 	mov	_game_over_temp_65537_111,r6
                                    751 ;	snake_v2.c:232: if (point > 2)
      00011C E5*09            [12]  752 	mov	a,_point
      00011E 24 FD            [12]  753 	add	a,#0xff - 0x02
      000120 40 03            [24]  754 	jc	00405$
      000122 02r02rC3         [24]  755 	ljmp	00239$
      000125                        756 00405$:
                                    757 ;	snake_v2.c:237: for (i = 0; i < 8; i++)
      000125                        758 00219$:
      000125 E5*28            [12]  759 	mov	a,_game_over_temp_65537_111
      000127 75 F0 08         [24]  760 	mov	b,#0x08
      00012A A4               [48]  761 	mul	ab
      00012B 24r0A            [12]  762 	add	a,#_game_over_floating_display_65537_111
      00012D FD               [12]  763 	mov	r5,a
      00012E 74s00            [12]  764 	mov	a,#(_game_over_floating_display_65537_111 >> 8)
      000130 35 F0            [12]  765 	addc	a,b
      000132 FF               [12]  766 	mov	r7,a
      000133 75*29 00         [24]  767 	mov	_game_over_i_65537_111,#0x00
                                    768 ;	snake_v2.c:239: for (j = 0; j < 8; j++)
      000136                        769 00205$:
      000136 75*2A 00         [24]  770 	mov	_game_over_j_65537_111,#0x00
      000139                        771 00155$:
                                    772 ;	snake_v2.c:241: data_mat[j] = floating_display[temp][(j + i) % 8] & 0b11110000 |
      000139 E5*2A            [12]  773 	mov	a,_game_over_j_65537_111
      00013B 24r0C            [12]  774 	add	a,#_data_mat
      00013D F5*30            [12]  775 	mov	_game_over_sloc0_1_0,a
      00013F E5*2A            [12]  776 	mov	a,_game_over_j_65537_111
      000141 FA               [12]  777 	mov	r2,a
      000142 33               [12]  778 	rlc	a
      000143 95 E0            [12]  779 	subb	a,acc
      000145 FE               [12]  780 	mov	r6,a
      000146 E5*29            [12]  781 	mov	a,_game_over_i_65537_111
      000148 F5*31            [12]  782 	mov	_game_over_sloc1_1_0,a
      00014A 33               [12]  783 	rlc	a
      00014B 95 E0            [12]  784 	subb	a,acc
      00014D F5*32            [12]  785 	mov	(_game_over_sloc1_1_0 + 1),a
      00014F E5*31            [12]  786 	mov	a,_game_over_sloc1_1_0
      000151 2A               [12]  787 	add	a,r2
      000152 F5 82            [12]  788 	mov	dpl,a
      000154 E5*32            [12]  789 	mov	a,(_game_over_sloc1_1_0 + 1)
      000156 3E               [12]  790 	addc	a,r6
      000157 F5 83            [12]  791 	mov	dph,a
      000159 75*00 08         [24]  792 	mov	__modsint_PARM_2,#0x08
      00015C 75*01 00         [24]  793 	mov	(__modsint_PARM_2 + 1),#0x00
      00015F C0 07            [24]  794 	push	ar7
      000161 C0 06            [24]  795 	push	ar6
      000163 C0 05            [24]  796 	push	ar5
      000165 C0 02            [24]  797 	push	ar2
      000167 12r00r00         [24]  798 	lcall	__modsint
      00016A AB 82            [24]  799 	mov	r3,dpl
      00016C AC 83            [24]  800 	mov	r4,dph
      00016E D0 02            [24]  801 	pop	ar2
      000170 D0 05            [24]  802 	pop	ar5
      000172 D0 06            [24]  803 	pop	ar6
      000174 D0 07            [24]  804 	pop	ar7
      000176 EB               [12]  805 	mov	a,r3
      000177 2D               [12]  806 	add	a,r5
      000178 F5 82            [12]  807 	mov	dpl,a
      00017A EC               [12]  808 	mov	a,r4
      00017B 3F               [12]  809 	addc	a,r7
      00017C F5 83            [12]  810 	mov	dph,a
      00017E E4               [12]  811 	clr	a
      00017F 93               [24]  812 	movc	a,@a+dptr
      000180 FC               [12]  813 	mov	r4,a
      000181 53 04 F0         [24]  814 	anl	ar4,#0xf0
                                    815 ;	snake_v2.c:242: floating_display[temp][(j - i + 8) % 8] & 0b00001111;
      000184 EA               [12]  816 	mov	a,r2
      000185 C3               [12]  817 	clr	c
      000186 95*31            [12]  818 	subb	a,_game_over_sloc1_1_0
      000188 FA               [12]  819 	mov	r2,a
      000189 EE               [12]  820 	mov	a,r6
      00018A 95*32            [12]  821 	subb	a,(_game_over_sloc1_1_0 + 1)
      00018C FE               [12]  822 	mov	r6,a
      00018D 74 08            [12]  823 	mov	a,#0x08
      00018F 2A               [12]  824 	add	a,r2
      000190 F5 82            [12]  825 	mov	dpl,a
      000192 E4               [12]  826 	clr	a
      000193 3E               [12]  827 	addc	a,r6
      000194 F5 83            [12]  828 	mov	dph,a
      000196 75*00 08         [24]  829 	mov	__modsint_PARM_2,#0x08
      000199 75*01 00         [24]  830 	mov	(__modsint_PARM_2 + 1),#0x00
      00019C C0 07            [24]  831 	push	ar7
      00019E C0 05            [24]  832 	push	ar5
      0001A0 C0 04            [24]  833 	push	ar4
      0001A2 12r00r00         [24]  834 	lcall	__modsint
      0001A5 AB 82            [24]  835 	mov	r3,dpl
      0001A7 AE 83            [24]  836 	mov	r6,dph
      0001A9 D0 04            [24]  837 	pop	ar4
      0001AB D0 05            [24]  838 	pop	ar5
      0001AD D0 07            [24]  839 	pop	ar7
      0001AF EB               [12]  840 	mov	a,r3
      0001B0 2D               [12]  841 	add	a,r5
      0001B1 F5 82            [12]  842 	mov	dpl,a
      0001B3 EE               [12]  843 	mov	a,r6
      0001B4 3F               [12]  844 	addc	a,r7
      0001B5 F5 83            [12]  845 	mov	dph,a
      0001B7 E4               [12]  846 	clr	a
      0001B8 93               [24]  847 	movc	a,@a+dptr
      0001B9 FE               [12]  848 	mov	r6,a
      0001BA 74 0F            [12]  849 	mov	a,#0x0f
      0001BC 5E               [12]  850 	anl	a,r6
      0001BD 4C               [12]  851 	orl	a,r4
      0001BE A8*30            [24]  852 	mov	r0,_game_over_sloc0_1_0
      0001C0 F6               [12]  853 	mov	@r0,a
                                    854 ;	snake_v2.c:239: for (j = 0; j < 8; j++)
      0001C1 05*2A            [12]  855 	inc	_game_over_j_65537_111
      0001C3 C3               [12]  856 	clr	c
      0001C4 E5*2A            [12]  857 	mov	a,_game_over_j_65537_111
      0001C6 64 80            [12]  858 	xrl	a,#0x80
      0001C8 94 88            [12]  859 	subb	a,#0x88
      0001CA 50 03            [24]  860 	jnc	00406$
      0001CC 02r01r39         [24]  861 	ljmp	00155$
      0001CF                        862 00406$:
                                    863 ;	snake_v2.c:245: for (t = 0; t < 30; t++)
      0001CF 75*2B 00         [24]  864 	mov	_game_over_t_65537_111,#0x00
      0001D2                        865 00171$:
                                    866 ;	snake_v2.c:59: P2 = 0b11111111;
      0001D2 75 A0 FF         [24]  867 	mov	_P2,#0xff
                                    868 ;	snake_v2.c:60: P0 = 0xFF;
      0001D5 75 80 FF         [24]  869 	mov	_P0,#0xff
                                    870 ;	snake_v2.c:40: for (char row = 0; row < 8; row++)
      0001D8 7C 00            [12]  871 	mov	r4,#0x00
      0001DA                        872 00164$:
      0001DA BC 08 00         [24]  873 	cjne	r4,#0x08,00407$
      0001DD                        874 00407$:
      0001DD 50 71            [24]  875 	jnc	00132$
                                    876 ;	snake_v2.c:42: const char current_data = data_mat[row];
      0001DF EC               [12]  877 	mov	a,r4
      0001E0 24r0C            [12]  878 	add	a,#_data_mat
      0001E2 F9               [12]  879 	mov	r1,a
      0001E3 87*2C            [24]  880 	mov	_game_over_current_data_983041_136,@r1
                                    881 ;	snake_v2.c:43: for (char i = 0; i < 8; i++)
      0001E5 8C F0            [24]  882 	mov	b,r4
      0001E7 05 F0            [12]  883 	inc	b
      0001E9 75*31 80         [24]  884 	mov	_game_over_sloc1_1_0,#0x80
      0001EC E4               [12]  885 	clr	a
      0001ED F5*32            [12]  886 	mov	(_game_over_sloc1_1_0 + 1),a
      0001EF 33               [12]  887 	rlc	a
      0001F0 92 D2            [24]  888 	mov	ov,c
      0001F2 80 0C            [24]  889 	sjmp	00410$
      0001F4                        890 00409$:
      0001F4 A2 D2            [12]  891 	mov	c,ov
      0001F6 E5*32            [12]  892 	mov	a,(_game_over_sloc1_1_0 + 1)
      0001F8 13               [12]  893 	rrc	a
      0001F9 F5*32            [12]  894 	mov	(_game_over_sloc1_1_0 + 1),a
      0001FB E5*31            [12]  895 	mov	a,_game_over_sloc1_1_0
      0001FD 13               [12]  896 	rrc	a
      0001FE F5*31            [12]  897 	mov	_game_over_sloc1_1_0,a
      000200                        898 00410$:
      000200 D5 F0 F1         [24]  899 	djnz	b,00409$
      000203 7A 00            [12]  900 	mov	r2,#0x00
      000205                        901 00158$:
      000205 BA 08 00         [24]  902 	cjne	r2,#0x08,00411$
      000208                        903 00411$:
      000208 50 2D            [24]  904 	jnc	00129$
                                    905 ;	snake_v2.c:45: SER = (0x80 >> row) & (0x80 >> i);
      00020A 8A F0            [24]  906 	mov	b,r2
      00020C 05 F0            [12]  907 	inc	b
      00020E 7B 80            [12]  908 	mov	r3,#0x80
      000210 E4               [12]  909 	clr	a
      000211 FE               [12]  910 	mov	r6,a
      000212 33               [12]  911 	rlc	a
      000213 92 D2            [24]  912 	mov	ov,c
      000215 80 08            [24]  913 	sjmp	00414$
      000217                        914 00413$:
      000217 A2 D2            [12]  915 	mov	c,ov
      000219 EE               [12]  916 	mov	a,r6
      00021A 13               [12]  917 	rrc	a
      00021B FE               [12]  918 	mov	r6,a
      00021C EB               [12]  919 	mov	a,r3
      00021D 13               [12]  920 	rrc	a
      00021E FB               [12]  921 	mov	r3,a
      00021F                        922 00414$:
      00021F D5 F0 F5         [24]  923 	djnz	b,00413$
      000222 E5*31            [12]  924 	mov	a,_game_over_sloc1_1_0
      000224 52 03            [12]  925 	anl	ar3,a
      000226 E5*32            [12]  926 	mov	a,(_game_over_sloc1_1_0 + 1)
      000228 52 06            [12]  927 	anl	ar6,a
                                    928 ;	assignBit
      00022A EB               [12]  929 	mov	a,r3
      00022B 4E               [12]  930 	orl	a,r6
      00022C 24 FF            [12]  931 	add	a,#0xff
      00022E 92 B4            [24]  932 	mov	_P3_4,c
                                    933 ;	snake_v2.c:46: SCK = 1;
                                    934 ;	assignBit
      000230 D2 B6            [12]  935 	setb	_P3_6
                                    936 ;	snake_v2.c:47: SCK = 0;
                                    937 ;	assignBit
      000232 C2 B6            [12]  938 	clr	_P3_6
                                    939 ;	snake_v2.c:43: for (char i = 0; i < 8; i++)
      000234 0A               [12]  940 	inc	r2
      000235 80 CE            [24]  941 	sjmp	00158$
      000237                        942 00129$:
                                    943 ;	snake_v2.c:49: P0 = 0xff;
      000237 75 80 FF         [24]  944 	mov	_P0,#0xff
                                    945 ;	snake_v2.c:50: RCK = 1;
                                    946 ;	assignBit
      00023A D2 B5            [12]  947 	setb	_P3_5
                                    948 ;	snake_v2.c:51: RCK = 0;
                                    949 ;	assignBit
      00023C C2 B5            [12]  950 	clr	_P3_5
                                    951 ;	snake_v2.c:52: P0 = ~current_data;
      00023E E5*2C            [12]  952 	mov	a,_game_over_current_data_983041_136
      000240 F4               [12]  953 	cpl	a
      000241 F5 80            [12]  954 	mov	_P0,a
                                    955 ;	snake_v2.c:53: for (char i = 0; i < 5; i++)
      000243 7E 00            [12]  956 	mov	r6,#0x00
      000245                        957 00161$:
      000245 BE 05 00         [24]  958 	cjne	r6,#0x05,00415$
      000248                        959 00415$:
      000248 50 03            [24]  960 	jnc	00165$
      00024A 0E               [12]  961 	inc	r6
      00024B 80 F8            [24]  962 	sjmp	00161$
      00024D                        963 00165$:
                                    964 ;	snake_v2.c:40: for (char row = 0; row < 8; row++)
      00024D 0C               [12]  965 	inc	r4
                                    966 ;	snake_v2.c:61: display_led_mat();
      00024E 80 8A            [24]  967 	sjmp	00164$
      000250                        968 00132$:
                                    969 ;	snake_v2.c:63: for (i = 0; i < 100; i++)
      000250 7E 64            [12]  970 	mov	r6,#0x64
      000252                        971 00168$:
      000252 DE FE            [24]  972 	djnz	r6,00168$
                                    973 ;	snake_v2.c:65: SER = 0;
                                    974 ;	assignBit
      000254 C2 B4            [12]  975 	clr	_P3_4
                                    976 ;	snake_v2.c:66: for (i = 0; i < 8; i++)
      000256 7E 00            [12]  977 	mov	r6,#0x00
      000258                        978 00169$:
                                    979 ;	snake_v2.c:68: SCK = 1;
                                    980 ;	assignBit
      000258 D2 B6            [12]  981 	setb	_P3_6
                                    982 ;	snake_v2.c:69: SCK = 0;
                                    983 ;	assignBit
      00025A C2 B6            [12]  984 	clr	_P3_6
                                    985 ;	snake_v2.c:66: for (i = 0; i < 8; i++)
      00025C 0E               [12]  986 	inc	r6
      00025D BE 08 00         [24]  987 	cjne	r6,#0x08,00418$
      000260                        988 00418$:
      000260 40 F6            [24]  989 	jc	00169$
                                    990 ;	snake_v2.c:71: RCK = 1;
                                    991 ;	assignBit
      000262 D2 B5            [12]  992 	setb	_P3_5
                                    993 ;	snake_v2.c:72: RCK = 0;
                                    994 ;	assignBit
      000264 C2 B5            [12]  995 	clr	_P3_5
                                    996 ;	snake_v2.c:73: display_number(point);
      000266 AA*09            [24]  997 	mov	r2,_point
      000268 7B 00            [12]  998 	mov	r3,#0x00
      00026A 7C 00            [12]  999 	mov	r4,#0x00
      00026C 7E 00            [12] 1000 	mov	r6,#0x00
      00026E 8A 82            [24] 1001 	mov	dpl,r2
      000270 8B 83            [24] 1002 	mov	dph,r3
      000272 8C F0            [24] 1003 	mov	b,r4
      000274 EE               [12] 1004 	mov	a,r6
      000275 C0 07            [24] 1005 	push	ar7
      000277 C0 05            [24] 1006 	push	ar5
      000279 12r00r00         [24] 1007 	lcall	_display_number
                                   1008 ;	snake_v2.c:74: display_number(point);
      00027C AA*09            [24] 1009 	mov	r2,_point
      00027E 7B 00            [12] 1010 	mov	r3,#0x00
      000280 7C 00            [12] 1011 	mov	r4,#0x00
      000282 7E 00            [12] 1012 	mov	r6,#0x00
      000284 8A 82            [24] 1013 	mov	dpl,r2
      000286 8B 83            [24] 1014 	mov	dph,r3
      000288 8C F0            [24] 1015 	mov	b,r4
      00028A EE               [12] 1016 	mov	a,r6
      00028B 12r00r00         [24] 1017 	lcall	_display_number
                                   1018 ;	snake_v2.c:75: display_number(point);
      00028E AA*09            [24] 1019 	mov	r2,_point
      000290 7B 00            [12] 1020 	mov	r3,#0x00
      000292 7C 00            [12] 1021 	mov	r4,#0x00
      000294 7E 00            [12] 1022 	mov	r6,#0x00
      000296 8A 82            [24] 1023 	mov	dpl,r2
      000298 8B 83            [24] 1024 	mov	dph,r3
      00029A 8C F0            [24] 1025 	mov	b,r4
      00029C EE               [12] 1026 	mov	a,r6
      00029D 12r00r00         [24] 1027 	lcall	_display_number
      0002A0 D0 05            [24] 1028 	pop	ar5
      0002A2 D0 07            [24] 1029 	pop	ar7
                                   1030 ;	snake_v2.c:245: for (t = 0; t < 30; t++)
      0002A4 05*2B            [12] 1031 	inc	_game_over_t_65537_111
      0002A6 C3               [12] 1032 	clr	c
      0002A7 E5*2B            [12] 1033 	mov	a,_game_over_t_65537_111
      0002A9 64 80            [12] 1034 	xrl	a,#0x80
      0002AB 94 9E            [12] 1035 	subb	a,#0x9e
      0002AD 50 03            [24] 1036 	jnc	00420$
      0002AF 02r01rD2         [24] 1037 	ljmp	00171$
      0002B2                       1038 00420$:
                                   1039 ;	snake_v2.c:237: for (i = 0; i < 8; i++)
      0002B2 05*29            [12] 1040 	inc	_game_over_i_65537_111
      0002B4 C3               [12] 1041 	clr	c
      0002B5 E5*29            [12] 1042 	mov	a,_game_over_i_65537_111
      0002B7 64 80            [12] 1043 	xrl	a,#0x80
      0002B9 94 88            [12] 1044 	subb	a,#0x88
      0002BB 50 03            [24] 1045 	jnc	00421$
      0002BD 02r01r36         [24] 1046 	ljmp	00205$
      0002C0                       1047 00421$:
      0002C0 02r01r25         [24] 1048 	ljmp	00219$
                                   1049 ;	snake_v2.c:259: for (i = 0; i < 16; i++)
      0002C3                       1050 00239$:
      0002C3 E5*28            [12] 1051 	mov	a,_game_over_temp_65537_111
      0002C5 75 F0 08         [24] 1052 	mov	b,#0x08
      0002C8 A4               [48] 1053 	mul	ab
      0002C9 24r0A            [12] 1054 	add	a,#_game_over_floating_display_65537_111
      0002CB FE               [12] 1055 	mov	r6,a
      0002CC 74s00            [12] 1056 	mov	a,#(_game_over_floating_display_65537_111 >> 8)
      0002CE 35 F0            [12] 1057 	addc	a,b
      0002D0 FF               [12] 1058 	mov	r7,a
      0002D1 8E 04            [24] 1059 	mov	ar4,r6
      0002D3 8F 05            [24] 1060 	mov	ar5,r7
      0002D5 75*29 00         [24] 1061 	mov	_game_over_i_65537_111,#0x00
                                   1062 ;	snake_v2.c:261: for (j = 0; j < 8; j++)
      0002D8                       1063 00225$:
      0002D8 74 10            [12] 1064 	mov	a,#0x10
      0002DA C3               [12] 1065 	clr	c
      0002DB 95*29            [12] 1066 	subb	a,_game_over_i_65537_111
      0002DD FA               [12] 1067 	mov	r2,a
      0002DE 75*2A 00         [24] 1068 	mov	_game_over_j_65537_111,#0x00
      0002E1                       1069 00175$:
                                   1070 ;	snake_v2.c:263: if (i + j < 8)
      0002E1 C0 02            [24] 1071 	push	ar2
      0002E3 E5*29            [12] 1072 	mov	a,_game_over_i_65537_111
      0002E5 F5*31            [12] 1073 	mov	_game_over_sloc1_1_0,a
      0002E7 33               [12] 1074 	rlc	a
      0002E8 95 E0            [12] 1075 	subb	a,acc
      0002EA F5*32            [12] 1076 	mov	(_game_over_sloc1_1_0 + 1),a
      0002EC E5*2A            [12] 1077 	mov	a,_game_over_j_65537_111
      0002EE F5*33            [12] 1078 	mov	_game_over_sloc2_1_0,a
      0002F0 33               [12] 1079 	rlc	a
      0002F1 95 E0            [12] 1080 	subb	a,acc
      0002F3 F5*34            [12] 1081 	mov	(_game_over_sloc2_1_0 + 1),a
      0002F5 E5*33            [12] 1082 	mov	a,_game_over_sloc2_1_0
      0002F7 25*31            [12] 1083 	add	a,_game_over_sloc1_1_0
      0002F9 FA               [12] 1084 	mov	r2,a
      0002FA E5*34            [12] 1085 	mov	a,(_game_over_sloc2_1_0 + 1)
      0002FC 35*32            [12] 1086 	addc	a,(_game_over_sloc1_1_0 + 1)
      0002FE FB               [12] 1087 	mov	r3,a
      0002FF C3               [12] 1088 	clr	c
      000300 EA               [12] 1089 	mov	a,r2
      000301 94 08            [12] 1090 	subb	a,#0x08
      000303 EB               [12] 1091 	mov	a,r3
      000304 64 80            [12] 1092 	xrl	a,#0x80
      000306 94 80            [12] 1093 	subb	a,#0x80
      000308 D0 02            [24] 1094 	pop	ar2
      00030A 50 24            [24] 1095 	jnc	00118$
                                   1096 ;	snake_v2.c:264: data_mat[j] = (floating_display[temp][(j + i)]) >> i;
      00030C E5*2A            [12] 1097 	mov	a,_game_over_j_65537_111
      00030E 24r0C            [12] 1098 	add	a,#_data_mat
      000310 F9               [12] 1099 	mov	r1,a
      000311 E5*29            [12] 1100 	mov	a,_game_over_i_65537_111
      000313 25*2A            [12] 1101 	add	a,_game_over_j_65537_111
      000315 2C               [12] 1102 	add	a,r4
      000316 F5 82            [12] 1103 	mov	dpl,a
      000318 E4               [12] 1104 	clr	a
      000319 3D               [12] 1105 	addc	a,r5
      00031A F5 83            [12] 1106 	mov	dph,a
      00031C E4               [12] 1107 	clr	a
      00031D 93               [24] 1108 	movc	a,@a+dptr
      00031E FB               [12] 1109 	mov	r3,a
      00031F 85*29 F0         [24] 1110 	mov	b,_game_over_i_65537_111
      000322 05 F0            [12] 1111 	inc	b
      000324 EB               [12] 1112 	mov	a,r3
      000325 80 02            [24] 1113 	sjmp	00424$
      000327                       1114 00423$:
      000327 C3               [12] 1115 	clr	c
      000328 13               [12] 1116 	rrc	a
      000329                       1117 00424$:
      000329 D5 F0 FB         [24] 1118 	djnz	b,00423$
      00032C F7               [12] 1119 	mov	@r1,a
      00032D 02r03rC6         [24] 1120 	ljmp	00176$
      000330                       1121 00118$:
                                   1122 ;	snake_v2.c:265: else if (i + j >= 16)
      000330 C0 02            [24] 1123 	push	ar2
      000332 E5*33            [12] 1124 	mov	a,_game_over_sloc2_1_0
      000334 25*31            [12] 1125 	add	a,_game_over_sloc1_1_0
      000336 FA               [12] 1126 	mov	r2,a
      000337 E5*34            [12] 1127 	mov	a,(_game_over_sloc2_1_0 + 1)
      000339 35*32            [12] 1128 	addc	a,(_game_over_sloc1_1_0 + 1)
      00033B FB               [12] 1129 	mov	r3,a
      00033C C3               [12] 1130 	clr	c
      00033D EA               [12] 1131 	mov	a,r2
      00033E 94 10            [12] 1132 	subb	a,#0x10
      000340 EB               [12] 1133 	mov	a,r3
      000341 64 80            [12] 1134 	xrl	a,#0x80
      000343 94 80            [12] 1135 	subb	a,#0x80
      000345 D0 02            [24] 1136 	pop	ar2
      000347 40 76            [24] 1137 	jc	00115$
                                   1138 ;	snake_v2.c:267: if (i + j >= 16)
      000349 C0 02            [24] 1139 	push	ar2
      00034B E5*33            [12] 1140 	mov	a,_game_over_sloc2_1_0
      00034D 25*31            [12] 1141 	add	a,_game_over_sloc1_1_0
      00034F FA               [12] 1142 	mov	r2,a
      000350 E5*34            [12] 1143 	mov	a,(_game_over_sloc2_1_0 + 1)
      000352 35*32            [12] 1144 	addc	a,(_game_over_sloc1_1_0 + 1)
      000354 FB               [12] 1145 	mov	r3,a
      000355 C3               [12] 1146 	clr	c
      000356 EA               [12] 1147 	mov	a,r2
      000357 94 10            [12] 1148 	subb	a,#0x10
      000359 EB               [12] 1149 	mov	a,r3
      00035A 64 80            [12] 1150 	xrl	a,#0x80
      00035C 94 80            [12] 1151 	subb	a,#0x80
      00035E D0 02            [24] 1152 	pop	ar2
      000360 40 54            [24] 1153 	jc	00112$
                                   1154 ;	snake_v2.c:268: data_mat[j] = (floating_display[temp][(i + j) % 8]) << (16 - i);
      000362 C0 04            [24] 1155 	push	ar4
      000364 C0 05            [24] 1156 	push	ar5
      000366 E5*2A            [12] 1157 	mov	a,_game_over_j_65537_111
      000368 24r0C            [12] 1158 	add	a,#_data_mat
      00036A F9               [12] 1159 	mov	r1,a
      00036B E5*33            [12] 1160 	mov	a,_game_over_sloc2_1_0
      00036D 25*31            [12] 1161 	add	a,_game_over_sloc1_1_0
      00036F F5 82            [12] 1162 	mov	dpl,a
      000371 E5*34            [12] 1163 	mov	a,(_game_over_sloc2_1_0 + 1)
      000373 35*32            [12] 1164 	addc	a,(_game_over_sloc1_1_0 + 1)
      000375 F5 83            [12] 1165 	mov	dph,a
      000377 75*00 08         [24] 1166 	mov	__modsint_PARM_2,#0x08
      00037A 75*01 00         [24] 1167 	mov	(__modsint_PARM_2 + 1),#0x00
      00037D C0 07            [24] 1168 	push	ar7
      00037F C0 06            [24] 1169 	push	ar6
      000381 C0 04            [24] 1170 	push	ar4
      000383 C0 02            [24] 1171 	push	ar2
      000385 C0 01            [24] 1172 	push	ar1
      000387 12r00r00         [24] 1173 	lcall	__modsint
      00038A AB 82            [24] 1174 	mov	r3,dpl
      00038C AD 83            [24] 1175 	mov	r5,dph
      00038E D0 01            [24] 1176 	pop	ar1
      000390 D0 02            [24] 1177 	pop	ar2
      000392 D0 04            [24] 1178 	pop	ar4
      000394 D0 06            [24] 1179 	pop	ar6
      000396 D0 07            [24] 1180 	pop	ar7
      000398 EB               [12] 1181 	mov	a,r3
      000399 2E               [12] 1182 	add	a,r6
      00039A F5 82            [12] 1183 	mov	dpl,a
      00039C ED               [12] 1184 	mov	a,r5
      00039D 3F               [12] 1185 	addc	a,r7
      00039E F5 83            [12] 1186 	mov	dph,a
      0003A0 E4               [12] 1187 	clr	a
      0003A1 93               [24] 1188 	movc	a,@a+dptr
      0003A2 FD               [12] 1189 	mov	r5,a
      0003A3 8A F0            [24] 1190 	mov	b,r2
      0003A5 05 F0            [12] 1191 	inc	b
      0003A7 ED               [12] 1192 	mov	a,r5
      0003A8 80 02            [24] 1193 	sjmp	00429$
      0003AA                       1194 00427$:
      0003AA 25 E0            [12] 1195 	add	a,acc
      0003AC                       1196 00429$:
      0003AC D5 F0 FB         [24] 1197 	djnz	b,00427$
      0003AF F7               [12] 1198 	mov	@r1,a
      0003B0 D0 05            [24] 1199 	pop	ar5
      0003B2 D0 04            [24] 1200 	pop	ar4
      0003B4 80 10            [24] 1201 	sjmp	00176$
      0003B6                       1202 00112$:
                                   1203 ;	snake_v2.c:270: data_mat[j] = 0;
      0003B6 E5*2A            [12] 1204 	mov	a,_game_over_j_65537_111
      0003B8 24r0C            [12] 1205 	add	a,#_data_mat
      0003BA F8               [12] 1206 	mov	r0,a
      0003BB 76 00            [12] 1207 	mov	@r0,#0x00
      0003BD 80 07            [24] 1208 	sjmp	00176$
      0003BF                       1209 00115$:
                                   1210 ;	snake_v2.c:273: data_mat[j] = 0;
      0003BF E5*2A            [12] 1211 	mov	a,_game_over_j_65537_111
      0003C1 24r0C            [12] 1212 	add	a,#_data_mat
      0003C3 F8               [12] 1213 	mov	r0,a
      0003C4 76 00            [12] 1214 	mov	@r0,#0x00
      0003C6                       1215 00176$:
                                   1216 ;	snake_v2.c:261: for (j = 0; j < 8; j++)
      0003C6 05*2A            [12] 1217 	inc	_game_over_j_65537_111
      0003C8 C3               [12] 1218 	clr	c
      0003C9 E5*2A            [12] 1219 	mov	a,_game_over_j_65537_111
      0003CB 64 80            [12] 1220 	xrl	a,#0x80
      0003CD 94 88            [12] 1221 	subb	a,#0x88
      0003CF 50 03            [24] 1222 	jnc	00430$
      0003D1 02r02rE1         [24] 1223 	ljmp	00175$
      0003D4                       1224 00430$:
                                   1225 ;	snake_v2.c:279: for (t = 30; t; --t)
      0003D4 75*2B 1E         [24] 1226 	mov	_game_over_t_65537_111,#0x1e
      0003D7                       1227 00191$:
                                   1228 ;	snake_v2.c:59: P2 = 0b11111111;
      0003D7 75 A0 FF         [24] 1229 	mov	_P2,#0xff
                                   1230 ;	snake_v2.c:60: P0 = 0xFF;
      0003DA 75 80 FF         [24] 1231 	mov	_P0,#0xff
                                   1232 ;	snake_v2.c:40: for (char row = 0; row < 8; row++)
      0003DD 75*2D 00         [24] 1233 	mov	_game_over_row_917505_148,#0x00
      0003E0                       1234 00184$:
      0003E0 74 F8            [12] 1235 	mov	a,#0x100 - 0x08
      0003E2 25*2D            [12] 1236 	add	a,_game_over_row_917505_148
      0003E4 40 78            [24] 1237 	jc	00139$
                                   1238 ;	snake_v2.c:42: const char current_data = data_mat[row];
      0003E6 E5*2D            [12] 1239 	mov	a,_game_over_row_917505_148
      0003E8 24r0C            [12] 1240 	add	a,#_data_mat
      0003EA F9               [12] 1241 	mov	r1,a
      0003EB 87*2E            [24] 1242 	mov	_game_over_current_data_983041_149,@r1
                                   1243 ;	snake_v2.c:43: for (char i = 0; i < 8; i++)
      0003ED 85*2D F0         [24] 1244 	mov	b,_game_over_row_917505_148
      0003F0 05 F0            [12] 1245 	inc	b
      0003F2 75*33 80         [24] 1246 	mov	_game_over_sloc2_1_0,#0x80
      0003F5 E4               [12] 1247 	clr	a
      0003F6 F5*34            [12] 1248 	mov	(_game_over_sloc2_1_0 + 1),a
      0003F8 33               [12] 1249 	rlc	a
      0003F9 92 D2            [24] 1250 	mov	ov,c
      0003FB 80 0C            [24] 1251 	sjmp	00433$
      0003FD                       1252 00432$:
      0003FD A2 D2            [12] 1253 	mov	c,ov
      0003FF E5*34            [12] 1254 	mov	a,(_game_over_sloc2_1_0 + 1)
      000401 13               [12] 1255 	rrc	a
      000402 F5*34            [12] 1256 	mov	(_game_over_sloc2_1_0 + 1),a
      000404 E5*33            [12] 1257 	mov	a,_game_over_sloc2_1_0
      000406 13               [12] 1258 	rrc	a
      000407 F5*33            [12] 1259 	mov	_game_over_sloc2_1_0,a
      000409                       1260 00433$:
      000409 D5 F0 F1         [24] 1261 	djnz	b,00432$
      00040C 75*2F 00         [24] 1262 	mov	_game_over_i_1048577_150,#0x00
      00040F                       1263 00178$:
      00040F 74 F8            [12] 1264 	mov	a,#0x100 - 0x08
      000411 25*2F            [12] 1265 	add	a,_game_over_i_1048577_150
      000413 40 2F            [24] 1266 	jc	00136$
                                   1267 ;	snake_v2.c:45: SER = (0x80 >> row) & (0x80 >> i);
      000415 85*2F F0         [24] 1268 	mov	b,_game_over_i_1048577_150
      000418 05 F0            [12] 1269 	inc	b
      00041A 7A 80            [12] 1270 	mov	r2,#0x80
      00041C E4               [12] 1271 	clr	a
      00041D FB               [12] 1272 	mov	r3,a
      00041E 33               [12] 1273 	rlc	a
      00041F 92 D2            [24] 1274 	mov	ov,c
      000421 80 08            [24] 1275 	sjmp	00436$
      000423                       1276 00435$:
      000423 A2 D2            [12] 1277 	mov	c,ov
      000425 EB               [12] 1278 	mov	a,r3
      000426 13               [12] 1279 	rrc	a
      000427 FB               [12] 1280 	mov	r3,a
      000428 EA               [12] 1281 	mov	a,r2
      000429 13               [12] 1282 	rrc	a
      00042A FA               [12] 1283 	mov	r2,a
      00042B                       1284 00436$:
      00042B D5 F0 F5         [24] 1285 	djnz	b,00435$
      00042E E5*33            [12] 1286 	mov	a,_game_over_sloc2_1_0
      000430 52 02            [12] 1287 	anl	ar2,a
      000432 E5*34            [12] 1288 	mov	a,(_game_over_sloc2_1_0 + 1)
      000434 52 03            [12] 1289 	anl	ar3,a
                                   1290 ;	assignBit
      000436 EA               [12] 1291 	mov	a,r2
      000437 4B               [12] 1292 	orl	a,r3
      000438 24 FF            [12] 1293 	add	a,#0xff
      00043A 92 B4            [24] 1294 	mov	_P3_4,c
                                   1295 ;	snake_v2.c:46: SCK = 1;
                                   1296 ;	assignBit
      00043C D2 B6            [12] 1297 	setb	_P3_6
                                   1298 ;	snake_v2.c:47: SCK = 0;
                                   1299 ;	assignBit
      00043E C2 B6            [12] 1300 	clr	_P3_6
                                   1301 ;	snake_v2.c:43: for (char i = 0; i < 8; i++)
      000440 05*2F            [12] 1302 	inc	_game_over_i_1048577_150
      000442 80 CB            [24] 1303 	sjmp	00178$
      000444                       1304 00136$:
                                   1305 ;	snake_v2.c:49: P0 = 0xff;
      000444 75 80 FF         [24] 1306 	mov	_P0,#0xff
                                   1307 ;	snake_v2.c:50: RCK = 1;
                                   1308 ;	assignBit
      000447 D2 B5            [12] 1309 	setb	_P3_5
                                   1310 ;	snake_v2.c:51: RCK = 0;
                                   1311 ;	assignBit
      000449 C2 B5            [12] 1312 	clr	_P3_5
                                   1313 ;	snake_v2.c:52: P0 = ~current_data;
      00044B E5*2E            [12] 1314 	mov	a,_game_over_current_data_983041_149
      00044D F4               [12] 1315 	cpl	a
      00044E F5 80            [12] 1316 	mov	_P0,a
                                   1317 ;	snake_v2.c:53: for (char i = 0; i < 5; i++)
      000450 7B 00            [12] 1318 	mov	r3,#0x00
      000452                       1319 00181$:
      000452 BB 05 00         [24] 1320 	cjne	r3,#0x05,00437$
      000455                       1321 00437$:
      000455 50 03            [24] 1322 	jnc	00185$
      000457 0B               [12] 1323 	inc	r3
      000458 80 F8            [24] 1324 	sjmp	00181$
      00045A                       1325 00185$:
                                   1326 ;	snake_v2.c:40: for (char row = 0; row < 8; row++)
      00045A 05*2D            [12] 1327 	inc	_game_over_row_917505_148
                                   1328 ;	snake_v2.c:61: display_led_mat();
      00045C 80 82            [24] 1329 	sjmp	00184$
      00045E                       1330 00139$:
                                   1331 ;	snake_v2.c:63: for (i = 0; i < 100; i++)
      00045E 7B 64            [12] 1332 	mov	r3,#0x64
      000460                       1333 00188$:
      000460 DB FE            [24] 1334 	djnz	r3,00188$
                                   1335 ;	snake_v2.c:65: SER = 0;
                                   1336 ;	assignBit
      000462 C2 B4            [12] 1337 	clr	_P3_4
                                   1338 ;	snake_v2.c:66: for (i = 0; i < 8; i++)
      000464 7B 00            [12] 1339 	mov	r3,#0x00
      000466                       1340 00189$:
                                   1341 ;	snake_v2.c:68: SCK = 1;
                                   1342 ;	assignBit
      000466 D2 B6            [12] 1343 	setb	_P3_6
                                   1344 ;	snake_v2.c:69: SCK = 0;
                                   1345 ;	assignBit
      000468 C2 B6            [12] 1346 	clr	_P3_6
                                   1347 ;	snake_v2.c:66: for (i = 0; i < 8; i++)
      00046A 0B               [12] 1348 	inc	r3
      00046B BB 08 00         [24] 1349 	cjne	r3,#0x08,00440$
      00046E                       1350 00440$:
      00046E 40 F6            [24] 1351 	jc	00189$
                                   1352 ;	snake_v2.c:71: RCK = 1;
      000470 C0 04            [24] 1353 	push	ar4
      000472 C0 05            [24] 1354 	push	ar5
                                   1355 ;	assignBit
      000474 D2 B5            [12] 1356 	setb	_P3_5
                                   1357 ;	snake_v2.c:72: RCK = 0;
                                   1358 ;	assignBit
      000476 C2 B5            [12] 1359 	clr	_P3_5
                                   1360 ;	snake_v2.c:73: display_number(point);
      000478 AA*09            [24] 1361 	mov	r2,_point
      00047A 7B 00            [12] 1362 	mov	r3,#0x00
      00047C 7C 00            [12] 1363 	mov	r4,#0x00
      00047E 7D 00            [12] 1364 	mov	r5,#0x00
      000480 8A 82            [24] 1365 	mov	dpl,r2
      000482 8B 83            [24] 1366 	mov	dph,r3
      000484 8C F0            [24] 1367 	mov	b,r4
      000486 ED               [12] 1368 	mov	a,r5
      000487 C0 07            [24] 1369 	push	ar7
      000489 C0 06            [24] 1370 	push	ar6
      00048B C0 05            [24] 1371 	push	ar5
      00048D C0 04            [24] 1372 	push	ar4
      00048F 12r00r00         [24] 1373 	lcall	_display_number
      000492 D0 04            [24] 1374 	pop	ar4
      000494 D0 05            [24] 1375 	pop	ar5
                                   1376 ;	snake_v2.c:74: display_number(point);
      000496 AA*09            [24] 1377 	mov	r2,_point
      000498 7B 00            [12] 1378 	mov	r3,#0x00
      00049A 7C 00            [12] 1379 	mov	r4,#0x00
      00049C 7D 00            [12] 1380 	mov	r5,#0x00
      00049E 8A 82            [24] 1381 	mov	dpl,r2
      0004A0 8B 83            [24] 1382 	mov	dph,r3
      0004A2 8C F0            [24] 1383 	mov	b,r4
      0004A4 ED               [12] 1384 	mov	a,r5
      0004A5 C0 05            [24] 1385 	push	ar5
      0004A7 C0 04            [24] 1386 	push	ar4
      0004A9 12r00r00         [24] 1387 	lcall	_display_number
      0004AC D0 04            [24] 1388 	pop	ar4
      0004AE D0 05            [24] 1389 	pop	ar5
                                   1390 ;	snake_v2.c:75: display_number(point);
      0004B0 AA*09            [24] 1391 	mov	r2,_point
      0004B2 7B 00            [12] 1392 	mov	r3,#0x00
      0004B4 7C 00            [12] 1393 	mov	r4,#0x00
      0004B6 7D 00            [12] 1394 	mov	r5,#0x00
      0004B8 8A 82            [24] 1395 	mov	dpl,r2
      0004BA 8B 83            [24] 1396 	mov	dph,r3
      0004BC 8C F0            [24] 1397 	mov	b,r4
      0004BE ED               [12] 1398 	mov	a,r5
      0004BF C0 05            [24] 1399 	push	ar5
      0004C1 C0 04            [24] 1400 	push	ar4
      0004C3 12r00r00         [24] 1401 	lcall	_display_number
      0004C6 D0 04            [24] 1402 	pop	ar4
      0004C8 D0 05            [24] 1403 	pop	ar5
      0004CA D0 06            [24] 1404 	pop	ar6
      0004CC D0 07            [24] 1405 	pop	ar7
                                   1406 ;	snake_v2.c:279: for (t = 30; t; --t)
      0004CE 15*2B            [12] 1407 	dec	_game_over_t_65537_111
      0004D0 D0 05            [24] 1408 	pop	ar5
      0004D2 D0 04            [24] 1409 	pop	ar4
      0004D4 E5*2B            [12] 1410 	mov	a,_game_over_t_65537_111
      0004D6 60 03            [24] 1411 	jz	00442$
      0004D8 02r03rD7         [24] 1412 	ljmp	00191$
      0004DB                       1413 00442$:
                                   1414 ;	snake_v2.c:259: for (i = 0; i < 16; i++)
      0004DB 05*29            [12] 1415 	inc	_game_over_i_65537_111
      0004DD C3               [12] 1416 	clr	c
      0004DE E5*29            [12] 1417 	mov	a,_game_over_i_65537_111
      0004E0 64 80            [12] 1418 	xrl	a,#0x80
      0004E2 94 90            [12] 1419 	subb	a,#0x90
      0004E4 50 03            [24] 1420 	jnc	00443$
      0004E6 02r02rD8         [24] 1421 	ljmp	00225$
      0004E9                       1422 00443$:
                                   1423 ;	snake_v2.c:286: }
      0004E9 02r02rC3         [24] 1424 	ljmp	00239$
                                   1425 ;------------------------------------------------------------
                                   1426 ;Allocation info for local variables in function 'update_food'
                                   1427 ;------------------------------------------------------------
                                   1428 ;cnt                       Allocated to registers 
                                   1429 ;i                         Allocated with name '_update_food_i_131072_157'
                                   1430 ;__2621440010              Allocated to registers 
                                   1431 ;__2621440011              Allocated to registers 
                                   1432 ;a                         Allocated to registers 
                                   1433 ;------------------------------------------------------------
                                   1434 ;	snake_v2.c:287: void update_food(void)
                                   1435 ;	-----------------------------------------
                                   1436 ;	 function update_food
                                   1437 ;	-----------------------------------------
      0004EC                       1438 _update_food:
                                   1439 ;	snake_v2.c:289: char cnt = sqr_left;
      0004EC AF*0A            [24] 1440 	mov	r7,_sqr_left
                                   1441 ;	snake_v2.c:290: for (char i = 0; i < 64; i++)
      0004EE 7E 00            [12] 1442 	mov	r6,#0x00
      0004F0 8E*35            [24] 1443 	mov	_update_food_i_131072_157,r6
      0004F2                       1444 00109$:
      0004F2 74 C0            [12] 1445 	mov	a,#0x100 - 0x40
      0004F4 25*35            [12] 1446 	add	a,_update_food_i_131072_157
      0004F6 40 68            [24] 1447 	jc	00110$
                                   1448 ;	snake_v2.c:107: return (data_mat[a >> 3] & (0x80 >> (a & 7))) != 0;
      0004F8 E5*35            [12] 1449 	mov	a,_update_food_i_131072_157
      0004FA C4               [12] 1450 	swap	a
      0004FB 23               [12] 1451 	rl	a
      0004FC 54 1F            [12] 1452 	anl	a,#0x1f
      0004FE 24r0C            [12] 1453 	add	a,#_data_mat
      000500 F9               [12] 1454 	mov	r1,a
      000501 87 04            [24] 1455 	mov	ar4,@r1
      000503 74 07            [12] 1456 	mov	a,#0x07
      000505 55*35            [12] 1457 	anl	a,_update_food_i_131072_157
      000507 FB               [12] 1458 	mov	r3,a
      000508 8B F0            [24] 1459 	mov	b,r3
      00050A 05 F0            [12] 1460 	inc	b
      00050C 7B 80            [12] 1461 	mov	r3,#0x80
      00050E E4               [12] 1462 	clr	a
      00050F FA               [12] 1463 	mov	r2,a
      000510 33               [12] 1464 	rlc	a
      000511 92 D2            [24] 1465 	mov	ov,c
      000513 80 08            [24] 1466 	sjmp	00130$
      000515                       1467 00129$:
      000515 A2 D2            [12] 1468 	mov	c,ov
      000517 EA               [12] 1469 	mov	a,r2
      000518 13               [12] 1470 	rrc	a
      000519 FA               [12] 1471 	mov	r2,a
      00051A EB               [12] 1472 	mov	a,r3
      00051B 13               [12] 1473 	rrc	a
      00051C FB               [12] 1474 	mov	r3,a
      00051D                       1475 00130$:
      00051D D5 F0 F5         [24] 1476 	djnz	b,00129$
      000520 7D 00            [12] 1477 	mov	r5,#0x00
      000522 EC               [12] 1478 	mov	a,r4
      000523 52 03            [12] 1479 	anl	ar3,a
      000525 ED               [12] 1480 	mov	a,r5
      000526 52 02            [12] 1481 	anl	ar2,a
      000528 EB               [12] 1482 	mov	a,r3
      000529 4A               [12] 1483 	orl	a,r2
      00052A B4 01 00         [24] 1484 	cjne	a,#0x01,00131$
      00052D                       1485 00131$:
      00052D B3               [12] 1486 	cpl	c
                                   1487 ;	snake_v2.c:292: if (value(i))
      00052E 92*00            [24] 1488 	mov	_update_food_sloc0_1_0,c
      000530 40 28            [24] 1489 	jc	00105$
                                   1490 ;	snake_v2.c:294: if (rand() % cnt == 0)
      000532 C0 07            [24] 1491 	push	ar7
      000534 C0 06            [24] 1492 	push	ar6
      000536 12r00r00         [24] 1493 	lcall	_rand
      000539 D0 06            [24] 1494 	pop	ar6
      00053B D0 07            [24] 1495 	pop	ar7
      00053D 8F*00            [24] 1496 	mov	__modsint_PARM_2,r7
      00053F 75*01 00         [24] 1497 	mov	(__modsint_PARM_2 + 1),#0x00
      000542 C0 07            [24] 1498 	push	ar7
      000544 C0 06            [24] 1499 	push	ar6
      000546 12r00r00         [24] 1500 	lcall	__modsint
      000549 E5 82            [12] 1501 	mov	a,dpl
      00054B 85 83 F0         [24] 1502 	mov	b,dph
      00054E D0 06            [24] 1503 	pop	ar6
      000550 D0 07            [24] 1504 	pop	ar7
      000552 45 F0            [12] 1505 	orl	a,b
      000554 70 03            [24] 1506 	jnz	00104$
                                   1507 ;	snake_v2.c:296: food = i;
      000556 8E*17            [24] 1508 	mov	_food,r6
                                   1509 ;	snake_v2.c:297: return;
      000558 22               [24] 1510 	ret
      000559                       1511 00104$:
                                   1512 ;	snake_v2.c:299: --cnt;
      000559 1F               [12] 1513 	dec	r7
      00055A                       1514 00105$:
                                   1515 ;	snake_v2.c:290: for (char i = 0; i < 64; i++)
      00055A 05*35            [12] 1516 	inc	_update_food_i_131072_157
      00055C AE*35            [24] 1517 	mov	r6,_update_food_i_131072_157
      00055E 80 92            [24] 1518 	sjmp	00109$
      000560                       1519 00110$:
                                   1520 ;	snake_v2.c:301: }
      000560 22               [24] 1521 	ret
                                   1522 ;------------------------------------------------------------
                                   1523 ;Allocation info for local variables in function 'update_game'
                                   1524 ;------------------------------------------------------------
                                   1525 ;__1310720013              Allocated to registers r7 
                                   1526 ;a                         Allocated to registers 
                                   1527 ;__1966080015              Allocated to registers r7 
                                   1528 ;a                         Allocated to registers 
                                   1529 ;__1966080017              Allocated to registers r7 
                                   1530 ;a                         Allocated to registers 
                                   1531 ;__1966080019              Allocated to registers r7 
                                   1532 ;dir                       Allocated to registers 
                                   1533 ;__1966090020              Allocated to registers r7 
                                   1534 ;tail                      Allocated to registers 
                                   1535 ;temp                      Allocated to registers r6 
                                   1536 ;------------------------------------------------------------
                                   1537 ;	snake_v2.c:302: void update_game(void)
                                   1538 ;	-----------------------------------------
                                   1539 ;	 function update_game
                                   1540 ;	-----------------------------------------
      000561                       1541 _update_game:
                                   1542 ;	snake_v2.c:304: if (head != food && (data_mat[(head / 8)] & (0x80 >> (head % 8))))
      000561 E5*17            [12] 1543 	mov	a,_food
      000563 B5*15 02         [24] 1544 	cjne	a,_head,00134$
      000566 80 4B            [24] 1545 	sjmp	00102$
      000568                       1546 00134$:
      000568 AE*15            [24] 1547 	mov	r6,_head
      00056A 7F 00            [12] 1548 	mov	r7,#0x00
      00056C 75*00 08         [24] 1549 	mov	__divsint_PARM_2,#0x08
      00056F 8F*01            [24] 1550 	mov	(__divsint_PARM_2 + 1),r7
      000571 8E 82            [24] 1551 	mov	dpl,r6
      000573 8F 83            [24] 1552 	mov	dph,r7
      000575 C0 07            [24] 1553 	push	ar7
      000577 C0 06            [24] 1554 	push	ar6
      000579 12r00r00         [24] 1555 	lcall	__divsint
      00057C AC 82            [24] 1556 	mov	r4,dpl
      00057E D0 06            [24] 1557 	pop	ar6
      000580 D0 07            [24] 1558 	pop	ar7
      000582 EC               [12] 1559 	mov	a,r4
      000583 24r0C            [12] 1560 	add	a,#_data_mat
      000585 F9               [12] 1561 	mov	r1,a
      000586 87 05            [24] 1562 	mov	ar5,@r1
      000588 53 06 07         [24] 1563 	anl	ar6,#0x07
      00058B 7F 00            [12] 1564 	mov	r7,#0x00
      00058D 8E F0            [24] 1565 	mov	b,r6
      00058F 05 F0            [12] 1566 	inc	b
      000591 7E 80            [12] 1567 	mov	r6,#0x80
      000593 E4               [12] 1568 	clr	a
      000594 33               [12] 1569 	rlc	a
      000595 92 D2            [24] 1570 	mov	ov,c
      000597 80 08            [24] 1571 	sjmp	00136$
      000599                       1572 00135$:
      000599 A2 D2            [12] 1573 	mov	c,ov
      00059B EF               [12] 1574 	mov	a,r7
      00059C 13               [12] 1575 	rrc	a
      00059D FF               [12] 1576 	mov	r7,a
      00059E EE               [12] 1577 	mov	a,r6
      00059F 13               [12] 1578 	rrc	a
      0005A0 FE               [12] 1579 	mov	r6,a
      0005A1                       1580 00136$:
      0005A1 D5 F0 F5         [24] 1581 	djnz	b,00135$
      0005A4 7C 00            [12] 1582 	mov	r4,#0x00
      0005A6 ED               [12] 1583 	mov	a,r5
      0005A7 52 06            [12] 1584 	anl	ar6,a
      0005A9 EC               [12] 1585 	mov	a,r4
      0005AA 52 07            [12] 1586 	anl	ar7,a
      0005AC EE               [12] 1587 	mov	a,r6
      0005AD 4F               [12] 1588 	orl	a,r7
      0005AE 60 03            [24] 1589 	jz	00102$
                                   1590 ;	snake_v2.c:306: game_over();
      0005B0 12r00rB2         [24] 1591 	lcall	_game_over
      0005B3                       1592 00102$:
                                   1593 ;	snake_v2.c:308: turn_on(head);
                                   1594 ;	snake_v2.c:116: data_mat[a >> 3] |= 0x80 >> (a & 7);
      0005B3 E5*15            [12] 1595 	mov	a,_head
      0005B5 FF               [12] 1596 	mov	r7,a
      0005B6 C4               [12] 1597 	swap	a
      0005B7 23               [12] 1598 	rl	a
      0005B8 54 1F            [12] 1599 	anl	a,#0x1f
      0005BA 24r0C            [12] 1600 	add	a,#_data_mat
      0005BC F9               [12] 1601 	mov	r1,a
      0005BD 87 06            [24] 1602 	mov	ar6,@r1
      0005BF 53 07 07         [24] 1603 	anl	ar7,#0x07
      0005C2 8F F0            [24] 1604 	mov	b,r7
      0005C4 05 F0            [12] 1605 	inc	b
      0005C6 7F 80            [12] 1606 	mov	r7,#0x80
      0005C8 E4               [12] 1607 	clr	a
      0005C9 FD               [12] 1608 	mov	r5,a
      0005CA 33               [12] 1609 	rlc	a
      0005CB 92 D2            [24] 1610 	mov	ov,c
      0005CD 80 08            [24] 1611 	sjmp	00139$
      0005CF                       1612 00138$:
      0005CF A2 D2            [12] 1613 	mov	c,ov
      0005D1 ED               [12] 1614 	mov	a,r5
      0005D2 13               [12] 1615 	rrc	a
      0005D3 FD               [12] 1616 	mov	r5,a
      0005D4 EF               [12] 1617 	mov	a,r7
      0005D5 13               [12] 1618 	rrc	a
      0005D6 FF               [12] 1619 	mov	r7,a
      0005D7                       1620 00139$:
      0005D7 D5 F0 F5         [24] 1621 	djnz	b,00138$
      0005DA EF               [12] 1622 	mov	a,r7
      0005DB 4E               [12] 1623 	orl	a,r6
      0005DC F7               [12] 1624 	mov	@r1,a
                                   1625 ;	snake_v2.c:309: if (head == food)
      0005DD E5*17            [12] 1626 	mov	a,_food
      0005DF B5*15 32         [24] 1627 	cjne	a,_head,00110$
                                   1628 ;	snake_v2.c:311: ++point;
      0005E2 05*09            [12] 1629 	inc	_point
                                   1630 ;	snake_v2.c:313: update_food();
      0005E4 12r04rEC         [24] 1631 	lcall	_update_food
                                   1632 ;	snake_v2.c:315: turn_on(food);
                                   1633 ;	snake_v2.c:116: data_mat[a >> 3] |= 0x80 >> (a & 7);
      0005E7 E5*17            [12] 1634 	mov	a,_food
      0005E9 FF               [12] 1635 	mov	r7,a
      0005EA C4               [12] 1636 	swap	a
      0005EB 23               [12] 1637 	rl	a
      0005EC 54 1F            [12] 1638 	anl	a,#0x1f
      0005EE 24r0C            [12] 1639 	add	a,#_data_mat
      0005F0 F9               [12] 1640 	mov	r1,a
      0005F1 87 06            [24] 1641 	mov	ar6,@r1
      0005F3 53 07 07         [24] 1642 	anl	ar7,#0x07
      0005F6 8F F0            [24] 1643 	mov	b,r7
      0005F8 05 F0            [12] 1644 	inc	b
      0005FA 7F 80            [12] 1645 	mov	r7,#0x80
      0005FC E4               [12] 1646 	clr	a
      0005FD FD               [12] 1647 	mov	r5,a
      0005FE 33               [12] 1648 	rlc	a
      0005FF 92 D2            [24] 1649 	mov	ov,c
      000601 80 08            [24] 1650 	sjmp	00143$
      000603                       1651 00142$:
      000603 A2 D2            [12] 1652 	mov	c,ov
      000605 ED               [12] 1653 	mov	a,r5
      000606 13               [12] 1654 	rrc	a
      000607 FD               [12] 1655 	mov	r5,a
      000608 EF               [12] 1656 	mov	a,r7
      000609 13               [12] 1657 	rrc	a
      00060A FF               [12] 1658 	mov	r7,a
      00060B                       1659 00143$:
      00060B D5 F0 F5         [24] 1660 	djnz	b,00142$
      00060E EF               [12] 1661 	mov	a,r7
      00060F 4E               [12] 1662 	orl	a,r6
      000610 F7               [12] 1663 	mov	@r1,a
                                   1664 ;	snake_v2.c:316: --sqr_left;
      000611 15*0A            [12] 1665 	dec	_sqr_left
                                   1666 ;	snake_v2.c:317: return;
      000613 22               [24] 1667 	ret
      000614                       1668 00110$:
                                   1669 ;	snake_v2.c:321: turn_off(tail);
                                   1670 ;	snake_v2.c:120: data_mat[a >> 3] &= ~(0x80 >> (a & 7));
      000614 E5*16            [12] 1671 	mov	a,_tail
      000616 FF               [12] 1672 	mov	r7,a
      000617 C4               [12] 1673 	swap	a
      000618 23               [12] 1674 	rl	a
      000619 54 1F            [12] 1675 	anl	a,#0x1f
      00061B 24r0C            [12] 1676 	add	a,#_data_mat
      00061D F9               [12] 1677 	mov	r1,a
      00061E 87 06            [24] 1678 	mov	ar6,@r1
      000620 53 07 07         [24] 1679 	anl	ar7,#0x07
      000623 8F F0            [24] 1680 	mov	b,r7
      000625 05 F0            [12] 1681 	inc	b
      000627 7F 80            [12] 1682 	mov	r7,#0x80
      000629 E4               [12] 1683 	clr	a
      00062A FD               [12] 1684 	mov	r5,a
      00062B 33               [12] 1685 	rlc	a
      00062C 92 D2            [24] 1686 	mov	ov,c
      00062E 80 08            [24] 1687 	sjmp	00145$
      000630                       1688 00144$:
      000630 A2 D2            [12] 1689 	mov	c,ov
      000632 ED               [12] 1690 	mov	a,r5
      000633 13               [12] 1691 	rrc	a
      000634 FD               [12] 1692 	mov	r5,a
      000635 EF               [12] 1693 	mov	a,r7
      000636 13               [12] 1694 	rrc	a
      000637 FF               [12] 1695 	mov	r7,a
      000638                       1696 00145$:
      000638 D5 F0 F5         [24] 1697 	djnz	b,00144$
      00063B EF               [12] 1698 	mov	a,r7
      00063C F4               [12] 1699 	cpl	a
      00063D 5E               [12] 1700 	anl	a,r6
      00063E F7               [12] 1701 	mov	@r1,a
                                   1702 ;	snake_v2.c:322: char dir = get_direction(tail);
      00063F AF*16            [24] 1703 	mov	r7,_tail
                                   1704 ;	snake_v2.c:80: char temp = 0x80 >> (tail & 7);
      000641 74 07            [12] 1705 	mov	a,#0x07
      000643 5F               [12] 1706 	anl	a,r7
      000644 FE               [12] 1707 	mov	r6,a
      000645 8E F0            [24] 1708 	mov	b,r6
      000647 05 F0            [12] 1709 	inc	b
      000649 7E 80            [12] 1710 	mov	r6,#0x80
      00064B E4               [12] 1711 	clr	a
      00064C FD               [12] 1712 	mov	r5,a
      00064D 33               [12] 1713 	rlc	a
      00064E 92 D2            [24] 1714 	mov	ov,c
      000650 80 08            [24] 1715 	sjmp	00147$
      000652                       1716 00146$:
      000652 A2 D2            [12] 1717 	mov	c,ov
      000654 ED               [12] 1718 	mov	a,r5
      000655 13               [12] 1719 	rrc	a
      000656 FD               [12] 1720 	mov	r5,a
      000657 EE               [12] 1721 	mov	a,r6
      000658 13               [12] 1722 	rrc	a
      000659 FE               [12] 1723 	mov	r6,a
      00065A                       1724 00147$:
      00065A D5 F0 F5         [24] 1725 	djnz	b,00146$
                                   1726 ;	snake_v2.c:322: char dir = get_direction(tail);
      00065D EF               [12] 1727 	mov	a,r7
      00065E C4               [12] 1728 	swap	a
      00065F 23               [12] 1729 	rl	a
      000660 54 1F            [12] 1730 	anl	a,#0x1f
      000662 FF               [12] 1731 	mov	r7,a
      000663 24r20            [12] 1732 	add	a,#_bit1
      000665 F9               [12] 1733 	mov	r1,a
      000666 87 05            [24] 1734 	mov	ar5,@r1
      000668 EE               [12] 1735 	mov	a,r6
      000669 52 05            [12] 1736 	anl	ar5,a
      00066B ED               [12] 1737 	mov	a,r5
      00066C B4 01 00         [24] 1738 	cjne	a,#0x01,00148$
      00066F                       1739 00148$:
      00066F B3               [12] 1740 	cpl	c
      000670 92*01            [24] 1741 	mov	_update_game_sloc0_1_0,c
      000672 E4               [12] 1742 	clr	a
      000673 33               [12] 1743 	rlc	a
      000674 25 E0            [12] 1744 	add	a,acc
      000676 FD               [12] 1745 	mov	r5,a
      000677 EF               [12] 1746 	mov	a,r7
      000678 24r18            [12] 1747 	add	a,#_bit0
      00067A F9               [12] 1748 	mov	r1,a
      00067B E7               [12] 1749 	mov	a,@r1
      00067C 52 06            [12] 1750 	anl	ar6,a
      00067E EE               [12] 1751 	mov	a,r6
      00067F B4 01 00         [24] 1752 	cjne	a,#0x01,00149$
      000682                       1753 00149$:
      000682 B3               [12] 1754 	cpl	c
      000683 92*01            [24] 1755 	mov	_update_game_sloc0_1_0,c
      000685 E4               [12] 1756 	clr	a
      000686 33               [12] 1757 	rlc	a
      000687 FF               [12] 1758 	mov	r7,a
      000688 ED               [12] 1759 	mov	a,r5
      000689 42 07            [12] 1760 	orl	ar7,a
                                   1761 ;	snake_v2.c:323: switch (dir)
      00068B EF               [12] 1762 	mov	a,r7
      00068C 24 FC            [12] 1763 	add	a,#0xff - 0x03
      00068E 40 22            [24] 1764 	jc	00116$
      000690 EF               [12] 1765 	mov	a,r7
      000691 2F               [12] 1766 	add	a,r7
                                   1767 ;	snake_v2.c:325: case dir_left:
      000692 90r06r96         [24] 1768 	mov	dptr,#00151$
      000695 73               [24] 1769 	jmp	@a+dptr
      000696                       1770 00151$:
      000696 80 06            [24] 1771 	sjmp	00104$
      000698 80 07            [24] 1772 	sjmp	00105$
      00069A 80 08            [24] 1773 	sjmp	00106$
      00069C 80 0D            [24] 1774 	sjmp	00107$
      00069E                       1775 00104$:
                                   1776 ;	snake_v2.c:326: --tail;
      00069E 15*16            [12] 1777 	dec	_tail
                                   1778 ;	snake_v2.c:327: break;
                                   1779 ;	snake_v2.c:328: case dir_right:
      0006A0 22               [24] 1780 	ret
      0006A1                       1781 00105$:
                                   1782 ;	snake_v2.c:329: ++tail;
      0006A1 05*16            [12] 1783 	inc	_tail
                                   1784 ;	snake_v2.c:330: break;
                                   1785 ;	snake_v2.c:331: case dir_up:
      0006A3 22               [24] 1786 	ret
      0006A4                       1787 00106$:
                                   1788 ;	snake_v2.c:332: tail -= 8;
      0006A4 E5*16            [12] 1789 	mov	a,_tail
      0006A6 24 F8            [12] 1790 	add	a,#0xf8
      0006A8 F5*16            [12] 1791 	mov	_tail,a
                                   1792 ;	snake_v2.c:333: break;
                                   1793 ;	snake_v2.c:334: case dir_down:
      0006AA 22               [24] 1794 	ret
      0006AB                       1795 00107$:
                                   1796 ;	snake_v2.c:335: tail += 8;
      0006AB AF*16            [24] 1797 	mov	r7,_tail
      0006AD 74 08            [12] 1798 	mov	a,#0x08
      0006AF 2F               [12] 1799 	add	a,r7
      0006B0 F5*16            [12] 1800 	mov	_tail,a
                                   1801 ;	snake_v2.c:337: }
      0006B2                       1802 00116$:
                                   1803 ;	snake_v2.c:339: }
      0006B2 22               [24] 1804 	ret
                                   1805 ;------------------------------------------------------------
                                   1806 ;Allocation info for local variables in function 'go_up'
                                   1807 ;------------------------------------------------------------
                                   1808 ;__1310720022              Allocated to registers r7 
                                   1809 ;__1310720023              Allocated to registers 
                                   1810 ;tail                      Allocated to registers r6 
                                   1811 ;direction                 Allocated to registers 
                                   1812 ;temp                      Allocated to registers r5 
                                   1813 ;------------------------------------------------------------
                                   1814 ;	snake_v2.c:341: void go_up(void)
                                   1815 ;	-----------------------------------------
                                   1816 ;	 function go_up
                                   1817 ;	-----------------------------------------
      0006B3                       1818 _go_up:
                                   1819 ;	snake_v2.c:343: if (head < 8)
      0006B3 74 F8            [12] 1820 	mov	a,#0x100 - 0x08
      0006B5 25*15            [12] 1821 	add	a,_head
      0006B7 40 03            [24] 1822 	jc	00102$
                                   1823 ;	snake_v2.c:344: game_over();
      0006B9 12r00rB2         [24] 1824 	lcall	_game_over
      0006BC                       1825 00102$:
                                   1826 ;	snake_v2.c:345: if (cur_dir == dir_down)
      0006BC 74 03            [12] 1827 	mov	a,#0x03
      0006BE B5*0B 01         [24] 1828 	cjne	a,_cur_dir,00104$
                                   1829 ;	snake_v2.c:346: return;
      0006C1 22               [24] 1830 	ret
      0006C2                       1831 00104$:
                                   1832 ;	snake_v2.c:347: update_direction(head, dir_up);
      0006C2 AF*15            [24] 1833 	mov	r7,_head
      0006C4 8F 06            [24] 1834 	mov	ar6,r7
                                   1835 ;	snake_v2.c:86: char temp = 0x80 >> (tail & 7);
      0006C6 74 07            [12] 1836 	mov	a,#0x07
      0006C8 5F               [12] 1837 	anl	a,r7
      0006C9 FD               [12] 1838 	mov	r5,a
      0006CA 8D F0            [24] 1839 	mov	b,r5
      0006CC 05 F0            [12] 1840 	inc	b
      0006CE 7D 80            [12] 1841 	mov	r5,#0x80
      0006D0 E4               [12] 1842 	clr	a
      0006D1 FC               [12] 1843 	mov	r4,a
      0006D2 33               [12] 1844 	rlc	a
      0006D3 92 D2            [24] 1845 	mov	ov,c
      0006D5 80 08            [24] 1846 	sjmp	00126$
      0006D7                       1847 00125$:
      0006D7 A2 D2            [12] 1848 	mov	c,ov
      0006D9 EC               [12] 1849 	mov	a,r4
      0006DA 13               [12] 1850 	rrc	a
      0006DB FC               [12] 1851 	mov	r4,a
      0006DC ED               [12] 1852 	mov	a,r5
      0006DD 13               [12] 1853 	rrc	a
      0006DE FD               [12] 1854 	mov	r5,a
      0006DF                       1855 00126$:
      0006DF D5 F0 F5         [24] 1856 	djnz	b,00125$
                                   1857 ;	snake_v2.c:87: bit1[tail >> 3] &= ~temp;
      0006E2 EF               [12] 1858 	mov	a,r7
      0006E3 C4               [12] 1859 	swap	a
      0006E4 23               [12] 1860 	rl	a
      0006E5 54 1F            [12] 1861 	anl	a,#0x1f
      0006E7 24r20            [12] 1862 	add	a,#_bit1
      0006E9 F9               [12] 1863 	mov	r1,a
      0006EA 87 07            [24] 1864 	mov	ar7,@r1
      0006EC ED               [12] 1865 	mov	a,r5
      0006ED F4               [12] 1866 	cpl	a
      0006EE 5F               [12] 1867 	anl	a,r7
      0006EF F7               [12] 1868 	mov	@r1,a
                                   1869 ;	snake_v2.c:90: bit1[tail >> 3] |= temp;
      0006F0 EE               [12] 1870 	mov	a,r6
      0006F1 C4               [12] 1871 	swap	a
      0006F2 23               [12] 1872 	rl	a
      0006F3 54 1F            [12] 1873 	anl	a,#0x1f
      0006F5 FE               [12] 1874 	mov	r6,a
      0006F6 24r20            [12] 1875 	add	a,#_bit1
      0006F8 F9               [12] 1876 	mov	r1,a
      0006F9 87 07            [24] 1877 	mov	ar7,@r1
      0006FB ED               [12] 1878 	mov	a,r5
      0006FC 4F               [12] 1879 	orl	a,r7
      0006FD F7               [12] 1880 	mov	@r1,a
                                   1881 ;	snake_v2.c:95: bit0[tail >> 3] &= ~temp;
      0006FE EE               [12] 1882 	mov	a,r6
      0006FF 24r18            [12] 1883 	add	a,#_bit0
      000701 F9               [12] 1884 	mov	r1,a
      000702 87 07            [24] 1885 	mov	ar7,@r1
      000704 ED               [12] 1886 	mov	a,r5
      000705 F4               [12] 1887 	cpl	a
      000706 5F               [12] 1888 	anl	a,r7
      000707 F7               [12] 1889 	mov	@r1,a
                                   1890 ;	snake_v2.c:348: head = head - 8;
      000708 E5*15            [12] 1891 	mov	a,_head
      00070A 24 F8            [12] 1892 	add	a,#0xf8
      00070C F5*15            [12] 1893 	mov	_head,a
                                   1894 ;	snake_v2.c:349: cur_dir = dir_up;
      00070E 75*0B 02         [24] 1895 	mov	_cur_dir,#0x02
                                   1896 ;	snake_v2.c:350: update_game();
                                   1897 ;	snake_v2.c:351: }
      000711 02r05r61         [24] 1898 	ljmp	_update_game
                                   1899 ;------------------------------------------------------------
                                   1900 ;Allocation info for local variables in function 'go_down'
                                   1901 ;------------------------------------------------------------
                                   1902 ;__1310720025              Allocated to registers r7 
                                   1903 ;__1310720026              Allocated to registers 
                                   1904 ;tail                      Allocated to registers r6 
                                   1905 ;direction                 Allocated to registers 
                                   1906 ;temp                      Allocated to registers r5 
                                   1907 ;------------------------------------------------------------
                                   1908 ;	snake_v2.c:352: void go_down(void)
                                   1909 ;	-----------------------------------------
                                   1910 ;	 function go_down
                                   1911 ;	-----------------------------------------
      000714                       1912 _go_down:
                                   1913 ;	snake_v2.c:354: if (head >= 56)
      000714 74 C8            [12] 1914 	mov	a,#0x100 - 0x38
      000716 25*15            [12] 1915 	add	a,_head
      000718 50 03            [24] 1916 	jnc	00102$
                                   1917 ;	snake_v2.c:355: game_over();
      00071A 12r00rB2         [24] 1918 	lcall	_game_over
      00071D                       1919 00102$:
                                   1920 ;	snake_v2.c:356: if (cur_dir == dir_up)
      00071D 74 02            [12] 1921 	mov	a,#0x02
      00071F B5*0B 01         [24] 1922 	cjne	a,_cur_dir,00104$
                                   1923 ;	snake_v2.c:357: return;
      000722 22               [24] 1924 	ret
      000723                       1925 00104$:
                                   1926 ;	snake_v2.c:358: update_direction(head, dir_down);
      000723 AF*15            [24] 1927 	mov	r7,_head
      000725 8F 06            [24] 1928 	mov	ar6,r7
                                   1929 ;	snake_v2.c:86: char temp = 0x80 >> (tail & 7);
      000727 74 07            [12] 1930 	mov	a,#0x07
      000729 5F               [12] 1931 	anl	a,r7
      00072A FD               [12] 1932 	mov	r5,a
      00072B 8D F0            [24] 1933 	mov	b,r5
      00072D 05 F0            [12] 1934 	inc	b
      00072F 7D 80            [12] 1935 	mov	r5,#0x80
      000731 E4               [12] 1936 	clr	a
      000732 FC               [12] 1937 	mov	r4,a
      000733 33               [12] 1938 	rlc	a
      000734 92 D2            [24] 1939 	mov	ov,c
      000736 80 08            [24] 1940 	sjmp	00126$
      000738                       1941 00125$:
      000738 A2 D2            [12] 1942 	mov	c,ov
      00073A EC               [12] 1943 	mov	a,r4
      00073B 13               [12] 1944 	rrc	a
      00073C FC               [12] 1945 	mov	r4,a
      00073D ED               [12] 1946 	mov	a,r5
      00073E 13               [12] 1947 	rrc	a
      00073F FD               [12] 1948 	mov	r5,a
      000740                       1949 00126$:
      000740 D5 F0 F5         [24] 1950 	djnz	b,00125$
                                   1951 ;	snake_v2.c:87: bit1[tail >> 3] &= ~temp;
      000743 EF               [12] 1952 	mov	a,r7
      000744 C4               [12] 1953 	swap	a
      000745 23               [12] 1954 	rl	a
      000746 54 1F            [12] 1955 	anl	a,#0x1f
      000748 24r20            [12] 1956 	add	a,#_bit1
      00074A F9               [12] 1957 	mov	r1,a
      00074B 87 07            [24] 1958 	mov	ar7,@r1
      00074D ED               [12] 1959 	mov	a,r5
      00074E F4               [12] 1960 	cpl	a
      00074F 5F               [12] 1961 	anl	a,r7
      000750 F7               [12] 1962 	mov	@r1,a
                                   1963 ;	snake_v2.c:90: bit1[tail >> 3] |= temp;
      000751 EE               [12] 1964 	mov	a,r6
      000752 C4               [12] 1965 	swap	a
      000753 23               [12] 1966 	rl	a
      000754 54 1F            [12] 1967 	anl	a,#0x1f
      000756 FE               [12] 1968 	mov	r6,a
      000757 24r20            [12] 1969 	add	a,#_bit1
      000759 F9               [12] 1970 	mov	r1,a
      00075A 87 07            [24] 1971 	mov	ar7,@r1
      00075C ED               [12] 1972 	mov	a,r5
      00075D 4F               [12] 1973 	orl	a,r7
      00075E F7               [12] 1974 	mov	@r1,a
                                   1975 ;	snake_v2.c:95: bit0[tail >> 3] &= ~temp;
      00075F EE               [12] 1976 	mov	a,r6
      000760 24r18            [12] 1977 	add	a,#_bit0
      000762 F9               [12] 1978 	mov	r1,a
      000763 87 07            [24] 1979 	mov	ar7,@r1
      000765 ED               [12] 1980 	mov	a,r5
      000766 F4               [12] 1981 	cpl	a
      000767 5F               [12] 1982 	anl	a,r7
      000768 F7               [12] 1983 	mov	@r1,a
                                   1984 ;	snake_v2.c:98: bit0[tail >> 3] |= temp;
      000769 87 07            [24] 1985 	mov	ar7,@r1
      00076B ED               [12] 1986 	mov	a,r5
      00076C 4F               [12] 1987 	orl	a,r7
      00076D F7               [12] 1988 	mov	@r1,a
                                   1989 ;	snake_v2.c:359: head = head + 8;
      00076E AF*15            [24] 1990 	mov	r7,_head
      000770 74 08            [12] 1991 	mov	a,#0x08
      000772 2F               [12] 1992 	add	a,r7
      000773 F5*15            [12] 1993 	mov	_head,a
                                   1994 ;	snake_v2.c:360: cur_dir = dir_down;
      000775 75*0B 03         [24] 1995 	mov	_cur_dir,#0x03
                                   1996 ;	snake_v2.c:361: update_game();
                                   1997 ;	snake_v2.c:362: }
      000778 02r05r61         [24] 1998 	ljmp	_update_game
                                   1999 ;------------------------------------------------------------
                                   2000 ;Allocation info for local variables in function 'go_left'
                                   2001 ;------------------------------------------------------------
                                   2002 ;__1310720028              Allocated to registers r7 
                                   2003 ;__1310720029              Allocated to registers 
                                   2004 ;tail                      Allocated to registers r6 
                                   2005 ;direction                 Allocated to registers 
                                   2006 ;temp                      Allocated to registers r5 
                                   2007 ;------------------------------------------------------------
                                   2008 ;	snake_v2.c:363: void go_left(void)
                                   2009 ;	-----------------------------------------
                                   2010 ;	 function go_left
                                   2011 ;	-----------------------------------------
      00077B                       2012 _go_left:
                                   2013 ;	snake_v2.c:365: if (head % 8 == 0)
      00077B E5*15            [12] 2014 	mov	a,_head
      00077D 54 07            [12] 2015 	anl	a,#0x07
      00077F 60 02            [24] 2016 	jz	00123$
      000781 80 03            [24] 2017 	sjmp	00102$
      000783                       2018 00123$:
                                   2019 ;	snake_v2.c:366: game_over();
      000783 12r00rB2         [24] 2020 	lcall	_game_over
      000786                       2021 00102$:
                                   2022 ;	snake_v2.c:367: if (cur_dir == dir_right)
      000786 74 01            [12] 2023 	mov	a,#0x01
      000788 B5*0B 01         [24] 2024 	cjne	a,_cur_dir,00104$
                                   2025 ;	snake_v2.c:368: return;
      00078B 22               [24] 2026 	ret
      00078C                       2027 00104$:
                                   2028 ;	snake_v2.c:369: update_direction(head, dir_left);
      00078C AF*15            [24] 2029 	mov	r7,_head
      00078E 8F 06            [24] 2030 	mov	ar6,r7
                                   2031 ;	snake_v2.c:86: char temp = 0x80 >> (tail & 7);
      000790 74 07            [12] 2032 	mov	a,#0x07
      000792 5F               [12] 2033 	anl	a,r7
      000793 FD               [12] 2034 	mov	r5,a
      000794 8D F0            [24] 2035 	mov	b,r5
      000796 05 F0            [12] 2036 	inc	b
      000798 7D 80            [12] 2037 	mov	r5,#0x80
      00079A E4               [12] 2038 	clr	a
      00079B FC               [12] 2039 	mov	r4,a
      00079C 33               [12] 2040 	rlc	a
      00079D 92 D2            [24] 2041 	mov	ov,c
      00079F 80 08            [24] 2042 	sjmp	00127$
      0007A1                       2043 00126$:
      0007A1 A2 D2            [12] 2044 	mov	c,ov
      0007A3 EC               [12] 2045 	mov	a,r4
      0007A4 13               [12] 2046 	rrc	a
      0007A5 FC               [12] 2047 	mov	r4,a
      0007A6 ED               [12] 2048 	mov	a,r5
      0007A7 13               [12] 2049 	rrc	a
      0007A8 FD               [12] 2050 	mov	r5,a
      0007A9                       2051 00127$:
      0007A9 D5 F0 F5         [24] 2052 	djnz	b,00126$
                                   2053 ;	snake_v2.c:87: bit1[tail >> 3] &= ~temp;
      0007AC EF               [12] 2054 	mov	a,r7
      0007AD C4               [12] 2055 	swap	a
      0007AE 23               [12] 2056 	rl	a
      0007AF 54 1F            [12] 2057 	anl	a,#0x1f
      0007B1 24r20            [12] 2058 	add	a,#_bit1
      0007B3 F9               [12] 2059 	mov	r1,a
      0007B4 87 07            [24] 2060 	mov	ar7,@r1
      0007B6 ED               [12] 2061 	mov	a,r5
      0007B7 F4               [12] 2062 	cpl	a
      0007B8 5F               [12] 2063 	anl	a,r7
      0007B9 F7               [12] 2064 	mov	@r1,a
                                   2065 ;	snake_v2.c:95: bit0[tail >> 3] &= ~temp;
      0007BA EE               [12] 2066 	mov	a,r6
      0007BB C4               [12] 2067 	swap	a
      0007BC 23               [12] 2068 	rl	a
      0007BD 54 1F            [12] 2069 	anl	a,#0x1f
      0007BF 24r18            [12] 2070 	add	a,#_bit0
      0007C1 F9               [12] 2071 	mov	r1,a
      0007C2 87 07            [24] 2072 	mov	ar7,@r1
      0007C4 ED               [12] 2073 	mov	a,r5
      0007C5 F4               [12] 2074 	cpl	a
      0007C6 5F               [12] 2075 	anl	a,r7
      0007C7 F7               [12] 2076 	mov	@r1,a
                                   2077 ;	snake_v2.c:370: --head;
      0007C8 15*15            [12] 2078 	dec	_head
                                   2079 ;	snake_v2.c:371: cur_dir = dir_left;
      0007CA 75*0B 00         [24] 2080 	mov	_cur_dir,#0x00
                                   2081 ;	snake_v2.c:372: update_game();
                                   2082 ;	snake_v2.c:373: }
      0007CD 02r05r61         [24] 2083 	ljmp	_update_game
                                   2084 ;------------------------------------------------------------
                                   2085 ;Allocation info for local variables in function 'go_right'
                                   2086 ;------------------------------------------------------------
                                   2087 ;__1310720031              Allocated to registers r7 
                                   2088 ;__1310720032              Allocated to registers 
                                   2089 ;tail                      Allocated to registers r6 
                                   2090 ;direction                 Allocated to registers 
                                   2091 ;temp                      Allocated to registers r5 
                                   2092 ;------------------------------------------------------------
                                   2093 ;	snake_v2.c:374: void go_right(void)
                                   2094 ;	-----------------------------------------
                                   2095 ;	 function go_right
                                   2096 ;	-----------------------------------------
      0007D0                       2097 _go_right:
                                   2098 ;	snake_v2.c:376: if (head % 8 == 7)
      0007D0 74 07            [12] 2099 	mov	a,#0x07
      0007D2 55*15            [12] 2100 	anl	a,_head
      0007D4 FE               [12] 2101 	mov	r6,a
      0007D5 7F 00            [12] 2102 	mov	r7,#0x00
      0007D7 BE 07 06         [24] 2103 	cjne	r6,#0x07,00102$
      0007DA BF 00 03         [24] 2104 	cjne	r7,#0x00,00102$
                                   2105 ;	snake_v2.c:377: game_over();
      0007DD 12r00rB2         [24] 2106 	lcall	_game_over
      0007E0                       2107 00102$:
                                   2108 ;	snake_v2.c:378: if (cur_dir == dir_left)
      0007E0 E5*0B            [12] 2109 	mov	a,_cur_dir
      0007E2 70 01            [24] 2110 	jnz	00104$
                                   2111 ;	snake_v2.c:379: return;
      0007E4 22               [24] 2112 	ret
      0007E5                       2113 00104$:
                                   2114 ;	snake_v2.c:380: update_direction(head, dir_right);
      0007E5 AF*15            [24] 2115 	mov	r7,_head
      0007E7 8F 06            [24] 2116 	mov	ar6,r7
                                   2117 ;	snake_v2.c:86: char temp = 0x80 >> (tail & 7);
      0007E9 74 07            [12] 2118 	mov	a,#0x07
      0007EB 5F               [12] 2119 	anl	a,r7
      0007EC FD               [12] 2120 	mov	r5,a
      0007ED 8D F0            [24] 2121 	mov	b,r5
      0007EF 05 F0            [12] 2122 	inc	b
      0007F1 7D 80            [12] 2123 	mov	r5,#0x80
      0007F3 E4               [12] 2124 	clr	a
      0007F4 FC               [12] 2125 	mov	r4,a
      0007F5 33               [12] 2126 	rlc	a
      0007F6 92 D2            [24] 2127 	mov	ov,c
      0007F8 80 08            [24] 2128 	sjmp	00126$
      0007FA                       2129 00125$:
      0007FA A2 D2            [12] 2130 	mov	c,ov
      0007FC EC               [12] 2131 	mov	a,r4
      0007FD 13               [12] 2132 	rrc	a
      0007FE FC               [12] 2133 	mov	r4,a
      0007FF ED               [12] 2134 	mov	a,r5
      000800 13               [12] 2135 	rrc	a
      000801 FD               [12] 2136 	mov	r5,a
      000802                       2137 00126$:
      000802 D5 F0 F5         [24] 2138 	djnz	b,00125$
                                   2139 ;	snake_v2.c:87: bit1[tail >> 3] &= ~temp;
      000805 EF               [12] 2140 	mov	a,r7
      000806 C4               [12] 2141 	swap	a
      000807 23               [12] 2142 	rl	a
      000808 54 1F            [12] 2143 	anl	a,#0x1f
      00080A 24r20            [12] 2144 	add	a,#_bit1
      00080C F9               [12] 2145 	mov	r1,a
      00080D 87 07            [24] 2146 	mov	ar7,@r1
      00080F ED               [12] 2147 	mov	a,r5
      000810 F4               [12] 2148 	cpl	a
      000811 5F               [12] 2149 	anl	a,r7
      000812 F7               [12] 2150 	mov	@r1,a
                                   2151 ;	snake_v2.c:95: bit0[tail >> 3] &= ~temp;
      000813 EE               [12] 2152 	mov	a,r6
      000814 C4               [12] 2153 	swap	a
      000815 23               [12] 2154 	rl	a
      000816 54 1F            [12] 2155 	anl	a,#0x1f
      000818 24r18            [12] 2156 	add	a,#_bit0
      00081A F9               [12] 2157 	mov	r1,a
      00081B 87 07            [24] 2158 	mov	ar7,@r1
      00081D ED               [12] 2159 	mov	a,r5
      00081E F4               [12] 2160 	cpl	a
      00081F 5F               [12] 2161 	anl	a,r7
      000820 F7               [12] 2162 	mov	@r1,a
                                   2163 ;	snake_v2.c:98: bit0[tail >> 3] |= temp;
      000821 87 07            [24] 2164 	mov	ar7,@r1
      000823 ED               [12] 2165 	mov	a,r5
      000824 4F               [12] 2166 	orl	a,r7
      000825 F7               [12] 2167 	mov	@r1,a
                                   2168 ;	snake_v2.c:381: ++head;
      000826 05*15            [12] 2169 	inc	_head
                                   2170 ;	snake_v2.c:382: cur_dir = dir_right;
      000828 75*0B 01         [24] 2171 	mov	_cur_dir,#0x01
                                   2172 ;	snake_v2.c:383: update_game();
                                   2173 ;	snake_v2.c:384: }
      00082B 02r05r61         [24] 2174 	ljmp	_update_game
                                   2175 ;------------------------------------------------------------
                                   2176 ;Allocation info for local variables in function 'reset_timer_0'
                                   2177 ;------------------------------------------------------------
                                   2178 ;	snake_v2.c:385: void reset_timer_0(void)
                                   2179 ;	-----------------------------------------
                                   2180 ;	 function reset_timer_0
                                   2181 ;	-----------------------------------------
      00082E                       2182 _reset_timer_0:
                                   2183 ;	snake_v2.c:388: TH0 = 0x4B; // Thiết lập giá trị đầu tiên của thanh ghi đếm cao
      00082E 75 8C 4B         [24] 2184 	mov	_TH0,#0x4b
                                   2185 ;	snake_v2.c:389: TL0 = 0xFF; // Thiết lập giá trị đầu tiên của thanh ghi đếm thấp
      000831 75 8A FF         [24] 2186 	mov	_TL0,#0xff
                                   2187 ;	snake_v2.c:390: }
      000834 22               [24] 2188 	ret
                                   2189 ;------------------------------------------------------------
                                   2190 ;Allocation info for local variables in function 'key_pressed_handle'
                                   2191 ;------------------------------------------------------------
                                   2192 ;	snake_v2.c:392: void key_pressed_handle(void)
                                   2193 ;	-----------------------------------------
                                   2194 ;	 function key_pressed_handle
                                   2195 ;	-----------------------------------------
      000835                       2196 _key_pressed_handle:
                                   2197 ;	snake_v2.c:394: reset_timer_0();
      000835 12r08r2E         [24] 2198 	lcall	_reset_timer_0
                                   2199 ;	snake_v2.c:395: game_timer_counter = -7;
      000838 75*07 F9         [24] 2200 	mov	_game_timer_counter,#0xf9
      00083B 75*08 FF         [24] 2201 	mov	(_game_timer_counter + 1),#0xff
                                   2202 ;	snake_v2.c:396: switch (key_pressed)
      00083E E5*14            [12] 2203 	mov	a,_key_pressed
      000840 24 FC            [12] 2204 	add	a,#0xff - 0x03
      000842 40 22            [24] 2205 	jc	00105$
      000844 E5*14            [12] 2206 	mov	a,_key_pressed
      000846 75 F0 03         [24] 2207 	mov	b,#0x03
      000849 A4               [48] 2208 	mul	ab
      00084A 90r08r4E         [24] 2209 	mov	dptr,#00114$
      00084D 73               [24] 2210 	jmp	@a+dptr
      00084E                       2211 00114$:
      00084E 02r08r63         [24] 2212 	ljmp	00104$
      000851 02r08r5A         [24] 2213 	ljmp	00101$
      000854 02r08r60         [24] 2214 	ljmp	00103$
      000857 02r08r5D         [24] 2215 	ljmp	00102$
                                   2216 ;	snake_v2.c:398: case 1:
      00085A                       2217 00101$:
                                   2218 ;	snake_v2.c:399: go_up();
                                   2219 ;	snake_v2.c:400: break;
                                   2220 ;	snake_v2.c:401: case 3:
      00085A 02r06rB3         [24] 2221 	ljmp	_go_up
      00085D                       2222 00102$:
                                   2223 ;	snake_v2.c:402: go_down();
                                   2224 ;	snake_v2.c:403: break;
                                   2225 ;	snake_v2.c:404: case 2:
      00085D 02r07r14         [24] 2226 	ljmp	_go_down
      000860                       2227 00103$:
                                   2228 ;	snake_v2.c:405: go_left();
                                   2229 ;	snake_v2.c:406: break;
                                   2230 ;	snake_v2.c:407: case 0:
      000860 02r07r7B         [24] 2231 	ljmp	_go_left
      000863                       2232 00104$:
                                   2233 ;	snake_v2.c:408: go_right();
                                   2234 ;	snake_v2.c:409: break;
                                   2235 ;	snake_v2.c:410: default:
      000863 02r07rD0         [24] 2236 	ljmp	_go_right
      000866                       2237 00105$:
                                   2238 ;	snake_v2.c:411: point = key_pressed;
      000866 85*14*09         [24] 2239 	mov	_point,_key_pressed
                                   2240 ;	snake_v2.c:413: }
                                   2241 ;	snake_v2.c:414: }
      000869 22               [24] 2242 	ret
                                   2243 ;------------------------------------------------------------
                                   2244 ;Allocation info for local variables in function 'uart_init'
                                   2245 ;------------------------------------------------------------
                                   2246 ;	snake_v2.c:415: void uart_init(void)
                                   2247 ;	-----------------------------------------
                                   2248 ;	 function uart_init
                                   2249 ;	-----------------------------------------
      00086A                       2250 _uart_init:
                                   2251 ;	snake_v2.c:419: TMOD &= 0x0f;
      00086A 53 89 0F         [24] 2252 	anl	_TMOD,#0x0f
                                   2253 ;	snake_v2.c:420: TMOD |= 0x20;
      00086D 43 89 20         [24] 2254 	orl	_TMOD,#0x20
                                   2255 ;	snake_v2.c:421: TH1 = 0xfd;
      000870 75 8D FD         [24] 2256 	mov	_TH1,#0xfd
                                   2257 ;	snake_v2.c:422: TL1 = 0xfd;
      000873 75 8B FD         [24] 2258 	mov	_TL1,#0xfd
                                   2259 ;	snake_v2.c:423: ET1 = 0;
                                   2260 ;	assignBit
      000876 C2 AB            [12] 2261 	clr	_ET1
                                   2262 ;	snake_v2.c:424: TR1 = 1;
                                   2263 ;	assignBit
      000878 D2 8E            [12] 2264 	setb	_TR1
                                   2265 ;	snake_v2.c:426: SM0 = 0;
                                   2266 ;	assignBit
      00087A C2 9F            [12] 2267 	clr	_SM0
                                   2268 ;	snake_v2.c:427: SM1 = 1;
                                   2269 ;	assignBit
      00087C D2 9E            [12] 2270 	setb	_SM1
                                   2271 ;	snake_v2.c:429: ES = 1;
                                   2272 ;	assignBit
      00087E D2 AC            [12] 2273 	setb	_ES
                                   2274 ;	snake_v2.c:430: EA = 1;
                                   2275 ;	assignBit
      000880 D2 AF            [12] 2276 	setb	_EA
                                   2277 ;	snake_v2.c:431: REN = 1;
                                   2278 ;	assignBit
      000882 D2 9C            [12] 2279 	setb	_REN
                                   2280 ;	snake_v2.c:432: }
      000884 22               [24] 2281 	ret
                                   2282 ;------------------------------------------------------------
                                   2283 ;Allocation info for local variables in function 'UART_Receive'
                                   2284 ;------------------------------------------------------------
                                   2285 ;	snake_v2.c:433: void UART_Receive(void) __interrupt(4)
                                   2286 ;	-----------------------------------------
                                   2287 ;	 function UART_Receive
                                   2288 ;	-----------------------------------------
      000885                       2289 _UART_Receive:
      000885 C0*00            [24] 2290 	push	bits
      000887 C0 E0            [24] 2291 	push	acc
      000889 C0 F0            [24] 2292 	push	b
      00088B C0 82            [24] 2293 	push	dpl
      00088D C0 83            [24] 2294 	push	dph
      00088F C0 07            [24] 2295 	push	(0+7)
      000891 C0 06            [24] 2296 	push	(0+6)
      000893 C0 05            [24] 2297 	push	(0+5)
      000895 C0 04            [24] 2298 	push	(0+4)
      000897 C0 03            [24] 2299 	push	(0+3)
      000899 C0 02            [24] 2300 	push	(0+2)
      00089B C0 01            [24] 2301 	push	(0+1)
      00089D C0 00            [24] 2302 	push	(0+0)
      00089F C0 D0            [24] 2303 	push	psw
      0008A1 75 D0 00         [24] 2304 	mov	psw,#0x00
                                   2305 ;	snake_v2.c:435: P2 = 0x10;
      0008A4 75 A0 10         [24] 2306 	mov	_P2,#0x10
                                   2307 ;	snake_v2.c:436: if (RI)
      0008A7 30 98 1A         [24] 2308 	jnb	_RI,00105$
                                   2309 ;	snake_v2.c:438: P2 = ~SBUF;
      0008AA E5 99            [12] 2310 	mov	a,_SBUF
      0008AC F4               [12] 2311 	cpl	a
      0008AD F5 A0            [12] 2312 	mov	_P2,a
                                   2313 ;	snake_v2.c:440: received_data = SBUF; // Get received data
      0008AF 85 99*02         [24] 2314 	mov	_received_data,_SBUF
                                   2315 ;	snake_v2.c:441: point = received_data + 10;
      0008B2 AF*02            [24] 2316 	mov	r7,_received_data
      0008B4 74 0A            [12] 2317 	mov	a,#0x0a
      0008B6 2F               [12] 2318 	add	a,r7
      0008B7 F5*09            [12] 2319 	mov	_point,a
                                   2320 ;	snake_v2.c:443: key_pressed = received_data;
      0008B9 85*02*14         [24] 2321 	mov	_key_pressed,_received_data
                                   2322 ;	snake_v2.c:444: if (TR0)
      0008BC 30 8C 03         [24] 2323 	jnb	_TR0,00102$
                                   2324 ;	snake_v2.c:445: key_pressed_handle();
      0008BF 12r08r35         [24] 2325 	lcall	_key_pressed_handle
      0008C2                       2326 00102$:
                                   2327 ;	snake_v2.c:446: RI = 0; // Clear receive interrupt flag
                                   2328 ;	assignBit
      0008C2 C2 98            [12] 2329 	clr	_RI
      0008C4                       2330 00105$:
                                   2331 ;	snake_v2.c:448: }
      0008C4 D0 D0            [24] 2332 	pop	psw
      0008C6 D0 00            [24] 2333 	pop	(0+0)
      0008C8 D0 01            [24] 2334 	pop	(0+1)
      0008CA D0 02            [24] 2335 	pop	(0+2)
      0008CC D0 03            [24] 2336 	pop	(0+3)
      0008CE D0 04            [24] 2337 	pop	(0+4)
      0008D0 D0 05            [24] 2338 	pop	(0+5)
      0008D2 D0 06            [24] 2339 	pop	(0+6)
      0008D4 D0 07            [24] 2340 	pop	(0+7)
      0008D6 D0 83            [24] 2341 	pop	dph
      0008D8 D0 82            [24] 2342 	pop	dpl
      0008DA D0 F0            [24] 2343 	pop	b
      0008DC D0 E0            [24] 2344 	pop	acc
      0008DE D0*00            [24] 2345 	pop	bits
      0008E0 32               [24] 2346 	reti
                                   2347 ;------------------------------------------------------------
                                   2348 ;Allocation info for local variables in function 'timer0_interrupt'
                                   2349 ;------------------------------------------------------------
                                   2350 ;__2621440034              Allocated to registers r7 
                                   2351 ;a                         Allocated to registers 
                                   2352 ;__2621440036              Allocated to registers r7 
                                   2353 ;a                         Allocated to registers 
                                   2354 ;------------------------------------------------------------
                                   2355 ;	snake_v2.c:450: void timer0_interrupt(void) __interrupt(1)
                                   2356 ;	-----------------------------------------
                                   2357 ;	 function timer0_interrupt
                                   2358 ;	-----------------------------------------
      0008E1                       2359 _timer0_interrupt:
      0008E1 C0*00            [24] 2360 	push	bits
      0008E3 C0 E0            [24] 2361 	push	acc
      0008E5 C0 F0            [24] 2362 	push	b
      0008E7 C0 82            [24] 2363 	push	dpl
      0008E9 C0 83            [24] 2364 	push	dph
      0008EB C0 07            [24] 2365 	push	(0+7)
      0008ED C0 06            [24] 2366 	push	(0+6)
      0008EF C0 05            [24] 2367 	push	(0+5)
      0008F1 C0 04            [24] 2368 	push	(0+4)
      0008F3 C0 03            [24] 2369 	push	(0+3)
      0008F5 C0 02            [24] 2370 	push	(0+2)
      0008F7 C0 01            [24] 2371 	push	(0+1)
      0008F9 C0 00            [24] 2372 	push	(0+0)
      0008FB C0 D0            [24] 2373 	push	psw
      0008FD 75 D0 00         [24] 2374 	mov	psw,#0x00
                                   2375 ;	snake_v2.c:453: ++timer_counter;
      000900 05*03            [12] 2376 	inc	_timer_counter
      000902 E4               [12] 2377 	clr	a
      000903 B5*03 0C         [24] 2378 	cjne	a,_timer_counter,00133$
      000906 05*04            [12] 2379 	inc	(_timer_counter + 1)
      000908 B5*04 07         [24] 2380 	cjne	a,(_timer_counter + 1),00133$
      00090B 05*05            [12] 2381 	inc	(_timer_counter + 2)
      00090D B5*05 02         [24] 2382 	cjne	a,(_timer_counter + 2),00133$
      000910 05*06            [12] 2383 	inc	(_timer_counter + 3)
      000912                       2384 00133$:
                                   2385 ;	snake_v2.c:454: reset_timer_0();
      000912 12r08r2E         [24] 2386 	lcall	_reset_timer_0
                                   2387 ;	snake_v2.c:455: ++game_timer_counter;
      000915 05*07            [12] 2388 	inc	_game_timer_counter
      000917 E4               [12] 2389 	clr	a
      000918 B5*07 02         [24] 2390 	cjne	a,_game_timer_counter,00134$
      00091B 05*08            [12] 2391 	inc	(_game_timer_counter + 1)
      00091D                       2392 00134$:
                                   2393 ;	snake_v2.c:456: if (!(timer_counter % 3))
      00091D 75*00 03         [24] 2394 	mov	__modulong_PARM_2,#0x03
      000920 E4               [12] 2395 	clr	a
      000921 F5*01            [12] 2396 	mov	(__modulong_PARM_2 + 1),a
      000923 F5*02            [12] 2397 	mov	(__modulong_PARM_2 + 2),a
      000925 F5*03            [12] 2398 	mov	(__modulong_PARM_2 + 3),a
      000927 85*03 82         [24] 2399 	mov	dpl,_timer_counter
      00092A 85*04 83         [24] 2400 	mov	dph,(_timer_counter + 1)
      00092D 85*05 F0         [24] 2401 	mov	b,(_timer_counter + 2)
      000930 E5*06            [12] 2402 	mov	a,(_timer_counter + 3)
      000932 12r00r00         [24] 2403 	lcall	__modulong
      000935 AC 82            [24] 2404 	mov	r4,dpl
      000937 AD 83            [24] 2405 	mov	r5,dph
      000939 AE F0            [24] 2406 	mov	r6,b
      00093B FF               [12] 2407 	mov	r7,a
      00093C EC               [12] 2408 	mov	a,r4
      00093D 4D               [12] 2409 	orl	a,r5
      00093E 4E               [12] 2410 	orl	a,r6
      00093F 4F               [12] 2411 	orl	a,r7
      000940 70 62            [24] 2412 	jnz	00105$
                                   2413 ;	snake_v2.c:458: if (show_food)
      000942 E5*36            [12] 2414 	mov	a,_show_food
      000944 60 31            [24] 2415 	jz	00102$
                                   2416 ;	snake_v2.c:460: turn_off(food);
                                   2417 ;	snake_v2.c:120: data_mat[a >> 3] &= ~(0x80 >> (a & 7));
      000946 E5*17            [12] 2418 	mov	a,_food
      000948 FF               [12] 2419 	mov	r7,a
      000949 C4               [12] 2420 	swap	a
      00094A 23               [12] 2421 	rl	a
      00094B 54 1F            [12] 2422 	anl	a,#0x1f
      00094D 24r0C            [12] 2423 	add	a,#_data_mat
      00094F F9               [12] 2424 	mov	r1,a
      000950 87 06            [24] 2425 	mov	ar6,@r1
      000952 53 07 07         [24] 2426 	anl	ar7,#0x07
      000955 8F F0            [24] 2427 	mov	b,r7
      000957 05 F0            [12] 2428 	inc	b
      000959 7F 80            [12] 2429 	mov	r7,#0x80
      00095B E4               [12] 2430 	clr	a
      00095C FD               [12] 2431 	mov	r5,a
      00095D 33               [12] 2432 	rlc	a
      00095E 92 D2            [24] 2433 	mov	ov,c
      000960 80 08            [24] 2434 	sjmp	00138$
      000962                       2435 00137$:
      000962 A2 D2            [12] 2436 	mov	c,ov
      000964 ED               [12] 2437 	mov	a,r5
      000965 13               [12] 2438 	rrc	a
      000966 FD               [12] 2439 	mov	r5,a
      000967 EF               [12] 2440 	mov	a,r7
      000968 13               [12] 2441 	rrc	a
      000969 FF               [12] 2442 	mov	r7,a
      00096A                       2443 00138$:
      00096A D5 F0 F5         [24] 2444 	djnz	b,00137$
      00096D EF               [12] 2445 	mov	a,r7
      00096E F4               [12] 2446 	cpl	a
      00096F FF               [12] 2447 	mov	r7,a
      000970 5E               [12] 2448 	anl	a,r6
      000971 F7               [12] 2449 	mov	@r1,a
                                   2450 ;	snake_v2.c:461: show_food = 0;
      000972 75*36 00         [24] 2451 	mov	_show_food,#0x00
      000975 80 2D            [24] 2452 	sjmp	00105$
      000977                       2453 00102$:
                                   2454 ;	snake_v2.c:465: turn_on(food);
                                   2455 ;	snake_v2.c:116: data_mat[a >> 3] |= 0x80 >> (a & 7);
      000977 E5*17            [12] 2456 	mov	a,_food
      000979 FF               [12] 2457 	mov	r7,a
      00097A C4               [12] 2458 	swap	a
      00097B 23               [12] 2459 	rl	a
      00097C 54 1F            [12] 2460 	anl	a,#0x1f
      00097E 24r0C            [12] 2461 	add	a,#_data_mat
      000980 F9               [12] 2462 	mov	r1,a
      000981 87 06            [24] 2463 	mov	ar6,@r1
      000983 53 07 07         [24] 2464 	anl	ar7,#0x07
      000986 8F F0            [24] 2465 	mov	b,r7
      000988 05 F0            [12] 2466 	inc	b
      00098A 7F 80            [12] 2467 	mov	r7,#0x80
      00098C E4               [12] 2468 	clr	a
      00098D FD               [12] 2469 	mov	r5,a
      00098E 33               [12] 2470 	rlc	a
      00098F 92 D2            [24] 2471 	mov	ov,c
      000991 80 08            [24] 2472 	sjmp	00140$
      000993                       2473 00139$:
      000993 A2 D2            [12] 2474 	mov	c,ov
      000995 ED               [12] 2475 	mov	a,r5
      000996 13               [12] 2476 	rrc	a
      000997 FD               [12] 2477 	mov	r5,a
      000998 EF               [12] 2478 	mov	a,r7
      000999 13               [12] 2479 	rrc	a
      00099A FF               [12] 2480 	mov	r7,a
      00099B                       2481 00140$:
      00099B D5 F0 F5         [24] 2482 	djnz	b,00139$
      00099E EF               [12] 2483 	mov	a,r7
      00099F 4E               [12] 2484 	orl	a,r6
      0009A0 F7               [12] 2485 	mov	@r1,a
                                   2486 ;	snake_v2.c:466: show_food = 1;
      0009A1 75*36 01         [24] 2487 	mov	_show_food,#0x01
      0009A4                       2488 00105$:
                                   2489 ;	snake_v2.c:469: if (!(game_timer_counter % 10))
      0009A4 75*00 0A         [24] 2490 	mov	__modsint_PARM_2,#0x0a
      0009A7 75*01 00         [24] 2491 	mov	(__modsint_PARM_2 + 1),#0x00
      0009AA 85*07 82         [24] 2492 	mov	dpl,_game_timer_counter
      0009AD 85*08 83         [24] 2493 	mov	dph,(_game_timer_counter + 1)
      0009B0 12r00r00         [24] 2494 	lcall	__modsint
      0009B3 E5 82            [12] 2495 	mov	a,dpl
      0009B5 85 83 F0         [24] 2496 	mov	b,dph
      0009B8 45 F0            [12] 2497 	orl	a,b
      0009BA 70 2E            [24] 2498 	jnz	00115$
                                   2499 ;	snake_v2.c:471: switch (cur_dir)
      0009BC E5*0B            [12] 2500 	mov	a,_cur_dir
      0009BE 24 FC            [12] 2501 	add	a,#0xff - 0x03
      0009C0 40 28            [24] 2502 	jc	00115$
      0009C2 E5*0B            [12] 2503 	mov	a,_cur_dir
      0009C4 75 F0 03         [24] 2504 	mov	b,#0x03
      0009C7 A4               [48] 2505 	mul	ab
      0009C8 90r09rCC         [24] 2506 	mov	dptr,#00143$
      0009CB 73               [24] 2507 	jmp	@a+dptr
      0009CC                       2508 00143$:
      0009CC 02r09rE2         [24] 2509 	ljmp	00108$
      0009CF 02r09rE7         [24] 2510 	ljmp	00109$
      0009D2 02r09rD8         [24] 2511 	ljmp	00106$
      0009D5 02r09rDD         [24] 2512 	ljmp	00107$
                                   2513 ;	snake_v2.c:473: case (dir_up):
      0009D8                       2514 00106$:
                                   2515 ;	snake_v2.c:474: go_up();
      0009D8 12r06rB3         [24] 2516 	lcall	_go_up
                                   2517 ;	snake_v2.c:475: break;
                                   2518 ;	snake_v2.c:476: case (dir_down):
      0009DB 80 0D            [24] 2519 	sjmp	00115$
      0009DD                       2520 00107$:
                                   2521 ;	snake_v2.c:477: go_down();
      0009DD 12r07r14         [24] 2522 	lcall	_go_down
                                   2523 ;	snake_v2.c:478: break;
                                   2524 ;	snake_v2.c:479: case (dir_left):
      0009E0 80 08            [24] 2525 	sjmp	00115$
      0009E2                       2526 00108$:
                                   2527 ;	snake_v2.c:480: go_left();
      0009E2 12r07r7B         [24] 2528 	lcall	_go_left
                                   2529 ;	snake_v2.c:481: break;
                                   2530 ;	snake_v2.c:482: case (dir_right):
      0009E5 80 03            [24] 2531 	sjmp	00115$
      0009E7                       2532 00109$:
                                   2533 ;	snake_v2.c:483: go_right();
      0009E7 12r07rD0         [24] 2534 	lcall	_go_right
                                   2535 ;	snake_v2.c:485: }
      0009EA                       2536 00115$:
                                   2537 ;	snake_v2.c:488: }
      0009EA D0 D0            [24] 2538 	pop	psw
      0009EC D0 00            [24] 2539 	pop	(0+0)
      0009EE D0 01            [24] 2540 	pop	(0+1)
      0009F0 D0 02            [24] 2541 	pop	(0+2)
      0009F2 D0 03            [24] 2542 	pop	(0+3)
      0009F4 D0 04            [24] 2543 	pop	(0+4)
      0009F6 D0 05            [24] 2544 	pop	(0+5)
      0009F8 D0 06            [24] 2545 	pop	(0+6)
      0009FA D0 07            [24] 2546 	pop	(0+7)
      0009FC D0 83            [24] 2547 	pop	dph
      0009FE D0 82            [24] 2548 	pop	dpl
      000A00 D0 F0            [24] 2549 	pop	b
      000A02 D0 E0            [24] 2550 	pop	acc
      000A04 D0*00            [24] 2551 	pop	bits
      000A06 32               [24] 2552 	reti
                                   2553 ;------------------------------------------------------------
                                   2554 ;Allocation info for local variables in function 'main'
                                   2555 ;------------------------------------------------------------
                                   2556 ;__1310720038              Allocated to registers 
                                   2557 ;__1310720039              Allocated to registers 
                                   2558 ;tail                      Allocated to registers 
                                   2559 ;direction                 Allocated to registers 
                                   2560 ;temp                      Allocated to registers 
                                   2561 ;__1310720041              Allocated to registers 
                                   2562 ;__1310720042              Allocated to registers 
                                   2563 ;tail                      Allocated to registers 
                                   2564 ;direction                 Allocated to registers 
                                   2565 ;temp                      Allocated to registers 
                                   2566 ;__1310720044              Allocated to registers 
                                   2567 ;__1310720045              Allocated to registers 
                                   2568 ;tail                      Allocated to registers 
                                   2569 ;direction                 Allocated to registers 
                                   2570 ;temp                      Allocated to registers 
                                   2571 ;__1310720047              Allocated to registers r7 
                                   2572 ;a                         Allocated to registers 
                                   2573 ;row                       Allocated to registers r7 
                                   2574 ;current_data              Allocated with name '_main_current_data_655360_262'
                                   2575 ;i                         Allocated to registers r3 
                                   2576 ;i                         Allocated to registers r6 
                                   2577 ;i                         Allocated to registers r7 
                                   2578 ;------------------------------------------------------------
                                   2579 ;	snake_v2.c:490: void main(void)
                                   2580 ;	-----------------------------------------
                                   2581 ;	 function main
                                   2582 ;	-----------------------------------------
      000A07                       2583 _main:
                                   2584 ;	snake_v2.c:492: uart_init();
      000A07 12r08r6A         [24] 2585 	lcall	_uart_init
                                   2586 ;	snake_v2.c:493: IT0 = 1; // Falling edge trigger
                                   2587 ;	assignBit
      000A0A D2 88            [12] 2588 	setb	_IT0
                                   2589 ;	snake_v2.c:494: EX0 = 1; // Enable INT0 interrupt
                                   2590 ;	assignBit
      000A0C D2 A8            [12] 2591 	setb	_EX0
                                   2592 ;	snake_v2.c:495: EA = 1;  // Enable global interrupt flag
                                   2593 ;	assignBit
      000A0E D2 AF            [12] 2594 	setb	_EA
                                   2595 ;	snake_v2.c:497: TMOD = 0x21; // Timer 0 mode 1 (16-bit timer
      000A10 75 89 21         [24] 2596 	mov	_TMOD,#0x21
                                   2597 ;	snake_v2.c:499: TH0 = 0x4B; // Thiết lập giá trị đầu tiên của thanh ghi đếm cao
      000A13 75 8C 4B         [24] 2598 	mov	_TH0,#0x4b
                                   2599 ;	snake_v2.c:500: TL0 = 0xFF; // Thiết lập giá trị đầu tiên của thanh ghi đếm thấp
      000A16 75 8A FF         [24] 2600 	mov	_TL0,#0xff
                                   2601 ;	snake_v2.c:504: reset_timer_0();
      000A19 12r08r2E         [24] 2602 	lcall	_reset_timer_0
                                   2603 ;	snake_v2.c:506: while (key_pressed != 5)
      000A1C                       2604 00101$:
      000A1C 74 05            [12] 2605 	mov	a,#0x05
      000A1E B5*14 FB         [24] 2606 	cjne	a,_key_pressed,00101$
                                   2607 ;	snake_v2.c:509: ET0 = 1; // Enable timer 0 interrupt'
                                   2608 ;	assignBit
      000A21 D2 A9            [12] 2609 	setb	_ET0
                                   2610 ;	snake_v2.c:510: TR0 = 1; // Start timer 0
                                   2611 ;	assignBit
      000A23 D2 8C            [12] 2612 	setb	_TR0
                                   2613 ;	snake_v2.c:511: srand(timer_counter);
      000A25 85*03 82         [24] 2614 	mov	dpl,_timer_counter
      000A28 85*04 83         [24] 2615 	mov	dph,(_timer_counter + 1)
      000A2B 12r00r00         [24] 2616 	lcall	_srand
                                   2617 ;	snake_v2.c:513: P0 = 0x00;
      000A2E 75 80 00         [24] 2618 	mov	_P0,#0x00
                                   2619 ;	snake_v2.c:514: SCK = 0;
                                   2620 ;	assignBit
      000A31 C2 B6            [12] 2621 	clr	_P3_6
                                   2622 ;	snake_v2.c:515: RCK = 0;
                                   2623 ;	assignBit
      000A33 C2 B5            [12] 2624 	clr	_P3_5
                                   2625 ;	snake_v2.c:516: data_mat[0] = 0xE0;
      000A35 75*0C E0         [24] 2626 	mov	_data_mat,#0xe0
                                   2627 ;	snake_v2.c:517: head = 2;
      000A38 75*15 02         [24] 2628 	mov	_head,#0x02
                                   2629 ;	snake_v2.c:87: bit1[tail >> 3] &= ~temp;
      000A3B 74 7F            [12] 2630 	mov	a,#0x7f
      000A3D 55*20            [12] 2631 	anl	a,_bit1
      000A3F F5*20            [12] 2632 	mov	_bit1,a
                                   2633 ;	snake_v2.c:95: bit0[tail >> 3] &= ~temp;
      000A41 74 7F            [12] 2634 	mov	a,#0x7f
      000A43 55*18            [12] 2635 	anl	a,_bit0
      000A45 F5*18            [12] 2636 	mov	_bit0,a
                                   2637 ;	snake_v2.c:98: bit0[tail >> 3] |= temp;
      000A47 74 80            [12] 2638 	mov	a,#0x80
      000A49 45*18            [12] 2639 	orl	a,_bit0
      000A4B F5*18            [12] 2640 	mov	_bit0,a
                                   2641 ;	snake_v2.c:87: bit1[tail >> 3] &= ~temp;
      000A4D 74 BF            [12] 2642 	mov	a,#0xbf
      000A4F 55*20            [12] 2643 	anl	a,_bit1
      000A51 F5*20            [12] 2644 	mov	_bit1,a
                                   2645 ;	snake_v2.c:95: bit0[tail >> 3] &= ~temp;
      000A53 74 BF            [12] 2646 	mov	a,#0xbf
      000A55 55*18            [12] 2647 	anl	a,_bit0
      000A57 F5*18            [12] 2648 	mov	_bit0,a
                                   2649 ;	snake_v2.c:98: bit0[tail >> 3] |= temp;
      000A59 74 40            [12] 2650 	mov	a,#0x40
      000A5B 45*18            [12] 2651 	orl	a,_bit0
      000A5D F5*18            [12] 2652 	mov	_bit0,a
                                   2653 ;	snake_v2.c:87: bit1[tail >> 3] &= ~temp;
      000A5F 74 DF            [12] 2654 	mov	a,#0xdf
      000A61 55*20            [12] 2655 	anl	a,_bit1
      000A63 F5*20            [12] 2656 	mov	_bit1,a
                                   2657 ;	snake_v2.c:95: bit0[tail >> 3] &= ~temp;
      000A65 74 DF            [12] 2658 	mov	a,#0xdf
      000A67 55*18            [12] 2659 	anl	a,_bit0
      000A69 F5*18            [12] 2660 	mov	_bit0,a
                                   2661 ;	snake_v2.c:98: bit0[tail >> 3] |= temp;
      000A6B 74 20            [12] 2662 	mov	a,#0x20
      000A6D 45*18            [12] 2663 	orl	a,_bit0
      000A6F F5*18            [12] 2664 	mov	_bit0,a
                                   2665 ;	snake_v2.c:522: tail = 0;
      000A71 75*16 00         [24] 2666 	mov	_tail,#0x00
                                   2667 ;	snake_v2.c:524: update_food();
      000A74 12r04rEC         [24] 2668 	lcall	_update_food
                                   2669 ;	snake_v2.c:525: turn_on(food);
                                   2670 ;	snake_v2.c:116: data_mat[a >> 3] |= 0x80 >> (a & 7);
      000A77 E5*17            [12] 2671 	mov	a,_food
      000A79 FF               [12] 2672 	mov	r7,a
      000A7A C4               [12] 2673 	swap	a
      000A7B 23               [12] 2674 	rl	a
      000A7C 54 1F            [12] 2675 	anl	a,#0x1f
      000A7E 24r0C            [12] 2676 	add	a,#_data_mat
      000A80 F9               [12] 2677 	mov	r1,a
      000A81 87 06            [24] 2678 	mov	ar6,@r1
      000A83 53 07 07         [24] 2679 	anl	ar7,#0x07
      000A86 8F F0            [24] 2680 	mov	b,r7
      000A88 05 F0            [12] 2681 	inc	b
      000A8A 7F 80            [12] 2682 	mov	r7,#0x80
      000A8C E4               [12] 2683 	clr	a
      000A8D FD               [12] 2684 	mov	r5,a
      000A8E 33               [12] 2685 	rlc	a
      000A8F 92 D2            [24] 2686 	mov	ov,c
      000A91 80 08            [24] 2687 	sjmp	00212$
      000A93                       2688 00211$:
      000A93 A2 D2            [12] 2689 	mov	c,ov
      000A95 ED               [12] 2690 	mov	a,r5
      000A96 13               [12] 2691 	rrc	a
      000A97 FD               [12] 2692 	mov	r5,a
      000A98 EF               [12] 2693 	mov	a,r7
      000A99 13               [12] 2694 	rrc	a
      000A9A FF               [12] 2695 	mov	r7,a
      000A9B                       2696 00212$:
      000A9B D5 F0 F5         [24] 2697 	djnz	b,00211$
      000A9E EF               [12] 2698 	mov	a,r7
      000A9F 4E               [12] 2699 	orl	a,r6
      000AA0 F7               [12] 2700 	mov	@r1,a
                                   2701 ;	snake_v2.c:527: while (1)
      000AA1                       2702 00105$:
                                   2703 ;	snake_v2.c:59: P2 = 0b11111111;
      000AA1 75 A0 FF         [24] 2704 	mov	_P2,#0xff
                                   2705 ;	snake_v2.c:60: P0 = 0xFF;
      000AA4 75 80 FF         [24] 2706 	mov	_P0,#0xff
                                   2707 ;	snake_v2.c:40: for (char row = 0; row < 8; row++)
      000AA7 7F 00            [12] 2708 	mov	r7,#0x00
      000AA9                       2709 00137$:
      000AA9 BF 08 00         [24] 2710 	cjne	r7,#0x08,00213$
      000AAC                       2711 00213$:
      000AAC 50 69            [24] 2712 	jnc	00126$
                                   2713 ;	snake_v2.c:42: const char current_data = data_mat[row];
      000AAE EF               [12] 2714 	mov	a,r7
      000AAF 24r0C            [12] 2715 	add	a,#_data_mat
      000AB1 F9               [12] 2716 	mov	r1,a
      000AB2 87*37            [24] 2717 	mov	_main_current_data_655360_262,@r1
                                   2718 ;	snake_v2.c:43: for (char i = 0; i < 8; i++)
      000AB4 8F F0            [24] 2719 	mov	b,r7
      000AB6 05 F0            [12] 2720 	inc	b
      000AB8 7C 80            [12] 2721 	mov	r4,#0x80
      000ABA E4               [12] 2722 	clr	a
      000ABB FD               [12] 2723 	mov	r5,a
      000ABC 33               [12] 2724 	rlc	a
      000ABD 92 D2            [24] 2725 	mov	ov,c
      000ABF 80 08            [24] 2726 	sjmp	00216$
      000AC1                       2727 00215$:
      000AC1 A2 D2            [12] 2728 	mov	c,ov
      000AC3 ED               [12] 2729 	mov	a,r5
      000AC4 13               [12] 2730 	rrc	a
      000AC5 FD               [12] 2731 	mov	r5,a
      000AC6 EC               [12] 2732 	mov	a,r4
      000AC7 13               [12] 2733 	rrc	a
      000AC8 FC               [12] 2734 	mov	r4,a
      000AC9                       2735 00216$:
      000AC9 D5 F0 F5         [24] 2736 	djnz	b,00215$
      000ACC 7B 00            [12] 2737 	mov	r3,#0x00
      000ACE                       2738 00131$:
      000ACE BB 08 00         [24] 2739 	cjne	r3,#0x08,00217$
      000AD1                       2740 00217$:
      000AD1 50 2B            [24] 2741 	jnc	00123$
                                   2742 ;	snake_v2.c:45: SER = (0x80 >> row) & (0x80 >> i);
      000AD3 8B F0            [24] 2743 	mov	b,r3
      000AD5 05 F0            [12] 2744 	inc	b
      000AD7 7A 80            [12] 2745 	mov	r2,#0x80
      000AD9 E4               [12] 2746 	clr	a
      000ADA FE               [12] 2747 	mov	r6,a
      000ADB 33               [12] 2748 	rlc	a
      000ADC 92 D2            [24] 2749 	mov	ov,c
      000ADE 80 08            [24] 2750 	sjmp	00220$
      000AE0                       2751 00219$:
      000AE0 A2 D2            [12] 2752 	mov	c,ov
      000AE2 EE               [12] 2753 	mov	a,r6
      000AE3 13               [12] 2754 	rrc	a
      000AE4 FE               [12] 2755 	mov	r6,a
      000AE5 EA               [12] 2756 	mov	a,r2
      000AE6 13               [12] 2757 	rrc	a
      000AE7 FA               [12] 2758 	mov	r2,a
      000AE8                       2759 00220$:
      000AE8 D5 F0 F5         [24] 2760 	djnz	b,00219$
      000AEB EC               [12] 2761 	mov	a,r4
      000AEC 52 02            [12] 2762 	anl	ar2,a
      000AEE ED               [12] 2763 	mov	a,r5
      000AEF 52 06            [12] 2764 	anl	ar6,a
                                   2765 ;	assignBit
      000AF1 EA               [12] 2766 	mov	a,r2
      000AF2 4E               [12] 2767 	orl	a,r6
      000AF3 24 FF            [12] 2768 	add	a,#0xff
      000AF5 92 B4            [24] 2769 	mov	_P3_4,c
                                   2770 ;	snake_v2.c:46: SCK = 1;
                                   2771 ;	assignBit
      000AF7 D2 B6            [12] 2772 	setb	_P3_6
                                   2773 ;	snake_v2.c:47: SCK = 0;
                                   2774 ;	assignBit
      000AF9 C2 B6            [12] 2775 	clr	_P3_6
                                   2776 ;	snake_v2.c:43: for (char i = 0; i < 8; i++)
      000AFB 0B               [12] 2777 	inc	r3
      000AFC 80 D0            [24] 2778 	sjmp	00131$
      000AFE                       2779 00123$:
                                   2780 ;	snake_v2.c:49: P0 = 0xff;
      000AFE 75 80 FF         [24] 2781 	mov	_P0,#0xff
                                   2782 ;	snake_v2.c:50: RCK = 1;
                                   2783 ;	assignBit
      000B01 D2 B5            [12] 2784 	setb	_P3_5
                                   2785 ;	snake_v2.c:51: RCK = 0;
                                   2786 ;	assignBit
      000B03 C2 B5            [12] 2787 	clr	_P3_5
                                   2788 ;	snake_v2.c:52: P0 = ~current_data;
      000B05 E5*37            [12] 2789 	mov	a,_main_current_data_655360_262
      000B07 F4               [12] 2790 	cpl	a
      000B08 F5 80            [12] 2791 	mov	_P0,a
                                   2792 ;	snake_v2.c:53: for (char i = 0; i < 5; i++)
      000B0A 7E 00            [12] 2793 	mov	r6,#0x00
      000B0C                       2794 00134$:
      000B0C BE 05 00         [24] 2795 	cjne	r6,#0x05,00221$
      000B0F                       2796 00221$:
      000B0F 50 03            [24] 2797 	jnc	00138$
      000B11 0E               [12] 2798 	inc	r6
      000B12 80 F8            [24] 2799 	sjmp	00134$
      000B14                       2800 00138$:
                                   2801 ;	snake_v2.c:40: for (char row = 0; row < 8; row++)
      000B14 0F               [12] 2802 	inc	r7
                                   2803 ;	snake_v2.c:61: display_led_mat();
      000B15 80 92            [24] 2804 	sjmp	00137$
      000B17                       2805 00126$:
                                   2806 ;	snake_v2.c:63: for (i = 0; i < 100; i++)
      000B17 7F 64            [12] 2807 	mov	r7,#0x64
      000B19                       2808 00141$:
      000B19 DF FE            [24] 2809 	djnz	r7,00141$
                                   2810 ;	snake_v2.c:65: SER = 0;
                                   2811 ;	assignBit
      000B1B C2 B4            [12] 2812 	clr	_P3_4
                                   2813 ;	snake_v2.c:66: for (i = 0; i < 8; i++)
      000B1D 7F 00            [12] 2814 	mov	r7,#0x00
      000B1F                       2815 00142$:
                                   2816 ;	snake_v2.c:68: SCK = 1;
                                   2817 ;	assignBit
      000B1F D2 B6            [12] 2818 	setb	_P3_6
                                   2819 ;	snake_v2.c:69: SCK = 0;
                                   2820 ;	assignBit
      000B21 C2 B6            [12] 2821 	clr	_P3_6
                                   2822 ;	snake_v2.c:66: for (i = 0; i < 8; i++)
      000B23 0F               [12] 2823 	inc	r7
      000B24 BF 08 00         [24] 2824 	cjne	r7,#0x08,00224$
      000B27                       2825 00224$:
      000B27 40 F6            [24] 2826 	jc	00142$
                                   2827 ;	snake_v2.c:71: RCK = 1;
                                   2828 ;	assignBit
      000B29 D2 B5            [12] 2829 	setb	_P3_5
                                   2830 ;	snake_v2.c:72: RCK = 0;
                                   2831 ;	assignBit
      000B2B C2 B5            [12] 2832 	clr	_P3_5
                                   2833 ;	snake_v2.c:73: display_number(point);
      000B2D AC*09            [24] 2834 	mov	r4,_point
      000B2F 7D 00            [12] 2835 	mov	r5,#0x00
      000B31 7E 00            [12] 2836 	mov	r6,#0x00
      000B33 7F 00            [12] 2837 	mov	r7,#0x00
      000B35 8C 82            [24] 2838 	mov	dpl,r4
      000B37 8D 83            [24] 2839 	mov	dph,r5
      000B39 8E F0            [24] 2840 	mov	b,r6
      000B3B EF               [12] 2841 	mov	a,r7
      000B3C 12r00r00         [24] 2842 	lcall	_display_number
                                   2843 ;	snake_v2.c:74: display_number(point);
      000B3F AC*09            [24] 2844 	mov	r4,_point
      000B41 7D 00            [12] 2845 	mov	r5,#0x00
      000B43 7E 00            [12] 2846 	mov	r6,#0x00
      000B45 7F 00            [12] 2847 	mov	r7,#0x00
      000B47 8C 82            [24] 2848 	mov	dpl,r4
      000B49 8D 83            [24] 2849 	mov	dph,r5
      000B4B 8E F0            [24] 2850 	mov	b,r6
      000B4D EF               [12] 2851 	mov	a,r7
      000B4E 12r00r00         [24] 2852 	lcall	_display_number
                                   2853 ;	snake_v2.c:75: display_number(point);
      000B51 AC*09            [24] 2854 	mov	r4,_point
      000B53 7D 00            [12] 2855 	mov	r5,#0x00
      000B55 7E 00            [12] 2856 	mov	r6,#0x00
      000B57 7F 00            [12] 2857 	mov	r7,#0x00
      000B59 8C 82            [24] 2858 	mov	dpl,r4
      000B5B 8D 83            [24] 2859 	mov	dph,r5
      000B5D 8E F0            [24] 2860 	mov	b,r6
      000B5F EF               [12] 2861 	mov	a,r7
      000B60 12r00r00         [24] 2862 	lcall	_display_number
                                   2863 ;	snake_v2.c:529: display_game_and_point();
                                   2864 ;	snake_v2.c:531: }
      000B63 02r0ArA1         [24] 2865 	ljmp	00105$
                                   2866 	.area CSEG    (CODE)
                                   2867 	.area CONST   (CODE)
      000000                       2868 _number_string:
      000000 3F                    2869 	.db #0x3f	; 63
      000001 06                    2870 	.db #0x06	; 6
      000002 5B                    2871 	.db #0x5b	; 91
      000003 4F                    2872 	.db #0x4f	; 79	'O'
      000004 66                    2873 	.db #0x66	; 102	'f'
      000005 6D                    2874 	.db #0x6d	; 109	'm'
      000006 7D                    2875 	.db #0x7d	; 125
      000007 07                    2876 	.db #0x07	; 7
      000008 7F                    2877 	.db #0x7f	; 127
      000009 6F                    2878 	.db #0x6f	; 111	'o'
      00000A                       2879 _game_over_floating_display_65537_111:
      00000A 81                    2880 	.db #0x81	; 129
      00000B 42                    2881 	.db #0x42	; 66	'B'
      00000C 24                    2882 	.db #0x24	; 36
      00000D 18                    2883 	.db #0x18	; 24
      00000E 18                    2884 	.db #0x18	; 24
      00000F 24                    2885 	.db #0x24	; 36
      000010 42                    2886 	.db #0x42	; 66	'B'
      000011 81                    2887 	.db #0x81	; 129
      000012 18                    2888 	.db #0x18	; 24
      000013 3C                    2889 	.db #0x3c	; 60
      000014 7E                    2890 	.db #0x7e	; 126
      000015 FF                    2891 	.db #0xff	; 255
      000016 FF                    2892 	.db #0xff	; 255
      000017 7E                    2893 	.db #0x7e	; 126
      000018 3C                    2894 	.db #0x3c	; 60
      000019 18                    2895 	.db #0x18	; 24
      00001A 00                    2896 	.db #0x00	; 0
      00001B 66                    2897 	.db #0x66	; 102	'f'
      00001C FF                    2898 	.db #0xff	; 255
      00001D FF                    2899 	.db #0xff	; 255
      00001E 7E                    2900 	.db #0x7e	; 126
      00001F 3C                    2901 	.db #0x3c	; 60
      000020 18                    2902 	.db #0x18	; 24
      000021 00                    2903 	.db #0x00	; 0
      000022 3C                    2904 	.db #0x3c	; 60
      000023 42                    2905 	.db #0x42	; 66	'B'
      000024 81                    2906 	.db #0x81	; 129
      000025 A5                    2907 	.db #0xa5	; 165
      000026 81                    2908 	.db #0x81	; 129
      000027 99                    2909 	.db #0x99	; 153
      000028 42                    2910 	.db #0x42	; 66	'B'
      000029 3C                    2911 	.db #0x3c	; 60
      00002A 3C                    2912 	.db #0x3c	; 60
      00002B 42                    2913 	.db #0x42	; 66	'B'
      00002C 81                    2914 	.db #0x81	; 129
      00002D 81                    2915 	.db #0x81	; 129
      00002E 81                    2916 	.db #0x81	; 129
      00002F 81                    2917 	.db #0x81	; 129
      000030 42                    2918 	.db #0x42	; 66	'B'
      000031 3C                    2919 	.db #0x3c	; 60
      000032 60                    2920 	.db #0x60	; 96
      000033 50                    2921 	.db #0x50	; 80	'P'
      000034 50                    2922 	.db #0x50	; 80	'P'
      000035 10                    2923 	.db #0x10	; 16
      000036 10                    2924 	.db #0x10	; 16
      000037 10                    2925 	.db #0x10	; 16
      000038 10                    2926 	.db #0x10	; 16
      000039 1F                    2927 	.db #0x1f	; 31
      00003A 00                    2928 	.db 0x00
      00003B 00                    2929 	.db 0x00
      00003C 00                    2930 	.db 0x00
      00003D 00                    2931 	.db 0x00
      00003E 00                    2932 	.db 0x00
      00003F 00                    2933 	.db 0x00
      000040 00                    2934 	.db 0x00
      000041 00                    2935 	.db 0x00
      000042 00                    2936 	.db 0x00
      000043 00                    2937 	.db 0x00
      000044 00                    2938 	.db 0x00
      000045 00                    2939 	.db 0x00
      000046 00                    2940 	.db 0x00
      000047 00                    2941 	.db 0x00
      000048 00                    2942 	.db 0x00
      000049 00                    2943 	.db 0x00
      00004A 00                    2944 	.db 0x00
      00004B 00                    2945 	.db 0x00
      00004C 00                    2946 	.db 0x00
      00004D 00                    2947 	.db 0x00
      00004E 00                    2948 	.db 0x00
      00004F 00                    2949 	.db 0x00
      000050 00                    2950 	.db 0x00
      000051 00                    2951 	.db 0x00
      000052 00                    2952 	.db 0x00
      000053 00                    2953 	.db 0x00
      000054 00                    2954 	.db 0x00
      000055 00                    2955 	.db 0x00
      000056 00                    2956 	.db 0x00
      000057 00                    2957 	.db 0x00
      000058 00                    2958 	.db 0x00
      000059 00                    2959 	.db 0x00
      00005A 00                    2960 	.db 0x00
      00005B 00                    2961 	.db 0x00
      00005C 00                    2962 	.db 0x00
      00005D 00                    2963 	.db 0x00
      00005E 00                    2964 	.db 0x00
      00005F 00                    2965 	.db 0x00
      000060 00                    2966 	.db 0x00
      000061 00                    2967 	.db 0x00
      000062 00                    2968 	.db 0x00
      000063 00                    2969 	.db 0x00
      000064 00                    2970 	.db 0x00
      000065 00                    2971 	.db 0x00
      000066 00                    2972 	.db 0x00
      000067 00                    2973 	.db 0x00
      000068 00                    2974 	.db 0x00
      000069 00                    2975 	.db 0x00
      00006A                       2976 _game_over_firework_65537_111:
      00006A 00                    2977 	.db #0x00	; 0
      00006B 00                    2978 	.db #0x00	; 0
      00006C 00                    2979 	.db #0x00	; 0
      00006D 00                    2980 	.db #0x00	; 0
      00006E 00                    2981 	.db #0x00	; 0
      00006F 00                    2982 	.db #0x00	; 0
      000070 18                    2983 	.db #0x18	; 24
      000071 18                    2984 	.db #0x18	; 24
      000072 00                    2985 	.db #0x00	; 0
      000073 00                    2986 	.db #0x00	; 0
      000074 00                    2987 	.db #0x00	; 0
      000075 18                    2988 	.db #0x18	; 24
      000076 18                    2989 	.db #0x18	; 24
      000077 00                    2990 	.db #0x00	; 0
      000078 00                    2991 	.db #0x00	; 0
      000079 00                    2992 	.db #0x00	; 0
      00007A 00                    2993 	.db #0x00	; 0
      00007B 00                    2994 	.db #0x00	; 0
      00007C 18                    2995 	.db #0x18	; 24
      00007D 18                    2996 	.db #0x18	; 24
      00007E 00                    2997 	.db #0x00	; 0
      00007F 00                    2998 	.db #0x00	; 0
      000080 00                    2999 	.db #0x00	; 0
      000081 00                    3000 	.db #0x00	; 0
      000082 24                    3001 	.db #0x24	; 36
      000083 00                    3002 	.db #0x00	; 0
      000084 81                    3003 	.db #0x81	; 129
      000085 18                    3004 	.db #0x18	; 24
      000086 18                    3005 	.db #0x18	; 24
      000087 81                    3006 	.db #0x81	; 129
      000088 00                    3007 	.db #0x00	; 0
      000089 24                    3008 	.db #0x24	; 36
      00008A 00                    3009 	.db #0x00	; 0
      00008B 24                    3010 	.db #0x24	; 36
      00008C 00                    3011 	.db #0x00	; 0
      00008D 81                    3012 	.db #0x81	; 129
      00008E 81                    3013 	.db #0x81	; 129
      00008F 00                    3014 	.db #0x00	; 0
      000090 24                    3015 	.db #0x24	; 36
      000091 00                    3016 	.db #0x00	; 0
      000092 24                    3017 	.db #0x24	; 36
      000093 00                    3018 	.db #0x00	; 0
      000094 81                    3019 	.db #0x81	; 129
      000095 00                    3020 	.db #0x00	; 0
      000096 00                    3021 	.db #0x00	; 0
      000097 81                    3022 	.db #0x81	; 129
      000098 00                    3023 	.db #0x00	; 0
      000099 24                    3024 	.db #0x24	; 36
      00009A 00                    3025 	.db #0x00	; 0
      00009B 24                    3026 	.db #0x24	; 36
      00009C 00                    3027 	.db #0x00	; 0
      00009D 00                    3028 	.db #0x00	; 0
      00009E 00                    3029 	.db #0x00	; 0
      00009F 00                    3030 	.db #0x00	; 0
      0000A0 24                    3031 	.db #0x24	; 36
      0000A1 00                    3032 	.db #0x00	; 0
      0000A2 00                    3033 	.db #0x00	; 0
      0000A3 00                    3034 	.db #0x00	; 0
      0000A4 24                    3035 	.db #0x24	; 36
      0000A5 00                    3036 	.db #0x00	; 0
      0000A6 00                    3037 	.db #0x00	; 0
      0000A7 24                    3038 	.db #0x24	; 36
      0000A8 00                    3039 	.db #0x00	; 0
      0000A9 00                    3040 	.db #0x00	; 0
      0000AA 00                    3041 	.db #0x00	; 0
      0000AB 00                    3042 	.db #0x00	; 0
      0000AC 00                    3043 	.db #0x00	; 0
      0000AD 24                    3044 	.db #0x24	; 36
      0000AE 24                    3045 	.db #0x24	; 36
      0000AF 00                    3046 	.db #0x00	; 0
      0000B0 00                    3047 	.db #0x00	; 0
      0000B1 00                    3048 	.db #0x00	; 0
      0000B2 00                    3049 	.db #0x00	; 0
      0000B3 00                    3050 	.db #0x00	; 0
      0000B4 00                    3051 	.db #0x00	; 0
      0000B5 00                    3052 	.db #0x00	; 0
      0000B6 00                    3053 	.db #0x00	; 0
      0000B7 24                    3054 	.db #0x24	; 36
      0000B8 24                    3055 	.db #0x24	; 36
      0000B9 00                    3056 	.db #0x00	; 0
      0000BA 00                    3057 	.db #0x00	; 0
      0000BB 00                    3058 	.db #0x00	; 0
      0000BC 00                    3059 	.db #0x00	; 0
      0000BD 00                    3060 	.db #0x00	; 0
      0000BE 00                    3061 	.db #0x00	; 0
      0000BF 00                    3062 	.db #0x00	; 0
      0000C0 00                    3063 	.db #0x00	; 0
      0000C1 00                    3064 	.db #0x00	; 0
                                   3065 	.area XINIT   (CODE)
                                   3066 	.area CABS    (ABS,CODE)
