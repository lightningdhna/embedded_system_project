                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module connect
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _back
                                     12 	.globl _forward
                                     13 	.globl _number_string
                                     14 	.globl _main
                                     15 	.globl _key_pressed_handle
                                     16 	.globl _UART_Receive
                                     17 	.globl _uart_send
                                     18 	.globl _uart_init
                                     19 	.globl _display_number
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _F1
                                     27 	.globl _P
                                     28 	.globl _PS
                                     29 	.globl _PT1
                                     30 	.globl _PX1
                                     31 	.globl _PT0
                                     32 	.globl _PX0
                                     33 	.globl _RD
                                     34 	.globl _WR
                                     35 	.globl _T1
                                     36 	.globl _T0
                                     37 	.globl _INT1
                                     38 	.globl _INT0
                                     39 	.globl _TXD
                                     40 	.globl _RXD
                                     41 	.globl _P3_7
                                     42 	.globl _P3_6
                                     43 	.globl _P3_5
                                     44 	.globl _P3_4
                                     45 	.globl _P3_3
                                     46 	.globl _P3_2
                                     47 	.globl _P3_1
                                     48 	.globl _P3_0
                                     49 	.globl _EA
                                     50 	.globl _ES
                                     51 	.globl _ET1
                                     52 	.globl _EX1
                                     53 	.globl _ET0
                                     54 	.globl _EX0
                                     55 	.globl _P2_7
                                     56 	.globl _P2_6
                                     57 	.globl _P2_5
                                     58 	.globl _P2_4
                                     59 	.globl _P2_3
                                     60 	.globl _P2_2
                                     61 	.globl _P2_1
                                     62 	.globl _P2_0
                                     63 	.globl _SM0
                                     64 	.globl _SM1
                                     65 	.globl _SM2
                                     66 	.globl _REN
                                     67 	.globl _TB8
                                     68 	.globl _RB8
                                     69 	.globl _TI
                                     70 	.globl _RI
                                     71 	.globl _P1_7
                                     72 	.globl _P1_6
                                     73 	.globl _P1_5
                                     74 	.globl _P1_4
                                     75 	.globl _P1_3
                                     76 	.globl _P1_2
                                     77 	.globl _P1_1
                                     78 	.globl _P1_0
                                     79 	.globl _TF1
                                     80 	.globl _TR1
                                     81 	.globl _TF0
                                     82 	.globl _TR0
                                     83 	.globl _IE1
                                     84 	.globl _IT1
                                     85 	.globl _IE0
                                     86 	.globl _IT0
                                     87 	.globl _P0_7
                                     88 	.globl _P0_6
                                     89 	.globl _P0_5
                                     90 	.globl _P0_4
                                     91 	.globl _P0_3
                                     92 	.globl _P0_2
                                     93 	.globl _P0_1
                                     94 	.globl _P0_0
                                     95 	.globl _B
                                     96 	.globl _ACC
                                     97 	.globl _PSW
                                     98 	.globl _IP
                                     99 	.globl _P3
                                    100 	.globl _IE
                                    101 	.globl _P2
                                    102 	.globl _SBUF
                                    103 	.globl _SCON
                                    104 	.globl _P1
                                    105 	.globl _TH1
                                    106 	.globl _TH0
                                    107 	.globl _TL1
                                    108 	.globl _TL0
                                    109 	.globl _TMOD
                                    110 	.globl _TCON
                                    111 	.globl _PCON
                                    112 	.globl _DPH
                                    113 	.globl _DPL
                                    114 	.globl _SP
                                    115 	.globl _P0
                                    116 	.globl _kit_id
                                    117 	.globl _key_pressed
                                    118 	.globl _data_mat
                                    119 	.globl _point
                                    120 	.globl _received_data
                                    121 	.globl _move_up
                                    122 	.globl _move_down
                                    123 	.globl _move_left
                                    124 	.globl _move_right
                                    125 	.globl _resolve_message
                                    126 ;--------------------------------------------------------
                                    127 ; special function registers
                                    128 ;--------------------------------------------------------
                                    129 	.area RSEG    (ABS,DATA)
      000000                        130 	.org 0x0000
                           000080   131 _P0	=	0x0080
                           000081   132 _SP	=	0x0081
                           000082   133 _DPL	=	0x0082
                           000083   134 _DPH	=	0x0083
                           000087   135 _PCON	=	0x0087
                           000088   136 _TCON	=	0x0088
                           000089   137 _TMOD	=	0x0089
                           00008A   138 _TL0	=	0x008a
                           00008B   139 _TL1	=	0x008b
                           00008C   140 _TH0	=	0x008c
                           00008D   141 _TH1	=	0x008d
                           000090   142 _P1	=	0x0090
                           000098   143 _SCON	=	0x0098
                           000099   144 _SBUF	=	0x0099
                           0000A0   145 _P2	=	0x00a0
                           0000A8   146 _IE	=	0x00a8
                           0000B0   147 _P3	=	0x00b0
                           0000B8   148 _IP	=	0x00b8
                           0000D0   149 _PSW	=	0x00d0
                           0000E0   150 _ACC	=	0x00e0
                           0000F0   151 _B	=	0x00f0
                                    152 ;--------------------------------------------------------
                                    153 ; special function bits
                                    154 ;--------------------------------------------------------
                                    155 	.area RSEG    (ABS,DATA)
      000000                        156 	.org 0x0000
                           000080   157 _P0_0	=	0x0080
                           000081   158 _P0_1	=	0x0081
                           000082   159 _P0_2	=	0x0082
                           000083   160 _P0_3	=	0x0083
                           000084   161 _P0_4	=	0x0084
                           000085   162 _P0_5	=	0x0085
                           000086   163 _P0_6	=	0x0086
                           000087   164 _P0_7	=	0x0087
                           000088   165 _IT0	=	0x0088
                           000089   166 _IE0	=	0x0089
                           00008A   167 _IT1	=	0x008a
                           00008B   168 _IE1	=	0x008b
                           00008C   169 _TR0	=	0x008c
                           00008D   170 _TF0	=	0x008d
                           00008E   171 _TR1	=	0x008e
                           00008F   172 _TF1	=	0x008f
                           000090   173 _P1_0	=	0x0090
                           000091   174 _P1_1	=	0x0091
                           000092   175 _P1_2	=	0x0092
                           000093   176 _P1_3	=	0x0093
                           000094   177 _P1_4	=	0x0094
                           000095   178 _P1_5	=	0x0095
                           000096   179 _P1_6	=	0x0096
                           000097   180 _P1_7	=	0x0097
                           000098   181 _RI	=	0x0098
                           000099   182 _TI	=	0x0099
                           00009A   183 _RB8	=	0x009a
                           00009B   184 _TB8	=	0x009b
                           00009C   185 _REN	=	0x009c
                           00009D   186 _SM2	=	0x009d
                           00009E   187 _SM1	=	0x009e
                           00009F   188 _SM0	=	0x009f
                           0000A0   189 _P2_0	=	0x00a0
                           0000A1   190 _P2_1	=	0x00a1
                           0000A2   191 _P2_2	=	0x00a2
                           0000A3   192 _P2_3	=	0x00a3
                           0000A4   193 _P2_4	=	0x00a4
                           0000A5   194 _P2_5	=	0x00a5
                           0000A6   195 _P2_6	=	0x00a6
                           0000A7   196 _P2_7	=	0x00a7
                           0000A8   197 _EX0	=	0x00a8
                           0000A9   198 _ET0	=	0x00a9
                           0000AA   199 _EX1	=	0x00aa
                           0000AB   200 _ET1	=	0x00ab
                           0000AC   201 _ES	=	0x00ac
                           0000AF   202 _EA	=	0x00af
                           0000B0   203 _P3_0	=	0x00b0
                           0000B1   204 _P3_1	=	0x00b1
                           0000B2   205 _P3_2	=	0x00b2
                           0000B3   206 _P3_3	=	0x00b3
                           0000B4   207 _P3_4	=	0x00b4
                           0000B5   208 _P3_5	=	0x00b5
                           0000B6   209 _P3_6	=	0x00b6
                           0000B7   210 _P3_7	=	0x00b7
                           0000B0   211 _RXD	=	0x00b0
                           0000B1   212 _TXD	=	0x00b1
                           0000B2   213 _INT0	=	0x00b2
                           0000B3   214 _INT1	=	0x00b3
                           0000B4   215 _T0	=	0x00b4
                           0000B5   216 _T1	=	0x00b5
                           0000B6   217 _WR	=	0x00b6
                           0000B7   218 _RD	=	0x00b7
                           0000B8   219 _PX0	=	0x00b8
                           0000B9   220 _PT0	=	0x00b9
                           0000BA   221 _PX1	=	0x00ba
                           0000BB   222 _PT1	=	0x00bb
                           0000BC   223 _PS	=	0x00bc
                           0000D0   224 _P	=	0x00d0
                           0000D1   225 _F1	=	0x00d1
                           0000D2   226 _OV	=	0x00d2
                           0000D3   227 _RS0	=	0x00d3
                           0000D4   228 _RS1	=	0x00d4
                           0000D5   229 _F0	=	0x00d5
                           0000D6   230 _AC	=	0x00d6
                           0000D7   231 _CY	=	0x00d7
                                    232 ;--------------------------------------------------------
                                    233 ; overlayable register banks
                                    234 ;--------------------------------------------------------
                                    235 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        236 	.ds 8
                                    237 ;--------------------------------------------------------
                                    238 ; overlayable bit register bank
                                    239 ;--------------------------------------------------------
                                    240 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        241 bits:
      000000                        242 	.ds 1
                           008000   243 	b0 = bits[0]
                           008100   244 	b1 = bits[1]
                           008200   245 	b2 = bits[2]
                           008300   246 	b3 = bits[3]
                           008400   247 	b4 = bits[4]
                           008500   248 	b5 = bits[5]
                           008600   249 	b6 = bits[6]
                           008700   250 	b7 = bits[7]
                                    251 ;--------------------------------------------------------
                                    252 ; internal ram data
                                    253 ;--------------------------------------------------------
                                    254 	.area DSEG    (DATA)
      000000                        255 _display_number_led_65537_38:
      000000                        256 	.ds 1
      000001                        257 _display_number_neg_65537_38:
      000001                        258 	.ds 1
      000002                        259 _received_data::
      000002                        260 	.ds 1
      000003                        261 _point::
      000003                        262 	.ds 1
      000004                        263 _data_mat::
      000004                        264 	.ds 8
      00000C                        265 _key_pressed::
      00000C                        266 	.ds 1
      00000D                        267 _main_current_data_458752_175:
      00000D                        268 	.ds 1
                                    269 ;--------------------------------------------------------
                                    270 ; overlayable items in internal ram
                                    271 ;--------------------------------------------------------
                                    272 	.area	OSEG    (OVR,DATA)
                                    273 	.area	OSEG    (OVR,DATA)
                                    274 	.area	OSEG    (OVR,DATA)
                                    275 ;--------------------------------------------------------
                                    276 ; Stack segment in internal ram
                                    277 ;--------------------------------------------------------
                                    278 	.area SSEG
      000000                        279 __start__stack:
      000000                        280 	.ds	1
                                    281 
                                    282 ;--------------------------------------------------------
                                    283 ; indirectly addressable internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area ISEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; absolute internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area IABS    (ABS,DATA)
                                    290 	.area IABS    (ABS,DATA)
                                    291 ;--------------------------------------------------------
                                    292 ; bit data
                                    293 ;--------------------------------------------------------
                                    294 	.area BSEG    (BIT)
      000000                        295 _kit_id::
      000000                        296 	.ds 1
                                    297 ;--------------------------------------------------------
                                    298 ; paged external ram data
                                    299 ;--------------------------------------------------------
                                    300 	.area PSEG    (PAG,XDATA)
                                    301 ;--------------------------------------------------------
                                    302 ; uninitialized external ram data
                                    303 ;--------------------------------------------------------
                                    304 	.area XSEG    (XDATA)
                                    305 ;--------------------------------------------------------
                                    306 ; absolute external ram data
                                    307 ;--------------------------------------------------------
                                    308 	.area XABS    (ABS,XDATA)
                                    309 ;--------------------------------------------------------
                                    310 ; initialized external ram data
                                    311 ;--------------------------------------------------------
                                    312 	.area XISEG   (XDATA)
                                    313 	.area HOME    (CODE)
                                    314 	.area GSINIT0 (CODE)
                                    315 	.area GSINIT1 (CODE)
                                    316 	.area GSINIT2 (CODE)
                                    317 	.area GSINIT3 (CODE)
                                    318 	.area GSINIT4 (CODE)
                                    319 	.area GSINIT5 (CODE)
                                    320 	.area GSINIT  (CODE)
                                    321 	.area GSFINAL (CODE)
                                    322 	.area CSEG    (CODE)
                                    323 ;--------------------------------------------------------
                                    324 ; interrupt vector
                                    325 ;--------------------------------------------------------
                                    326 	.area HOME    (CODE)
      000000                        327 __interrupt_vect:
      000000 02r00r00         [24]  328 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  329 	reti
      000004                        330 	.ds	7
      00000B 32               [24]  331 	reti
      00000C                        332 	.ds	7
      000013 32               [24]  333 	reti
      000014                        334 	.ds	7
      00001B 32               [24]  335 	reti
      00001C                        336 	.ds	7
      000023 02r00rDB         [24]  337 	ljmp	_UART_Receive
                                    338 ;--------------------------------------------------------
                                    339 ; global & static initialisations
                                    340 ;--------------------------------------------------------
                                    341 	.area HOME    (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area GSINIT  (CODE)
                                    345 	.globl __sdcc_gsinit_startup
                                    346 	.globl __sdcc_program_startup
                                    347 	.globl __start__stack
                                    348 	.globl __mcs51_genXINIT
                                    349 	.globl __mcs51_genXRAMCLEAR
                                    350 	.globl __mcs51_genRAMCLEAR
                                    351 ;	connect.c:12: char point = 65;
      000000 75*03 41         [24]  352 	mov	_point,#0x41
                                    353 ;	connect.c:116: char key_pressed = 0;
      000003 75*0C 00         [24]  354 	mov	_key_pressed,#0x00
                                    355 ;	connect.c:11: __bit kit_id = 0;
                                    356 ;	assignBit
      000006 C2*00            [12]  357 	clr	_kit_id
                                    358 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  359 	ljmp	__sdcc_program_startup
                                    360 ;--------------------------------------------------------
                                    361 ; Home
                                    362 ;--------------------------------------------------------
                                    363 	.area HOME    (CODE)
                                    364 	.area HOME    (CODE)
      000026                        365 __sdcc_program_startup:
      000026 02r04r43         [24]  366 	ljmp	_main
                                    367 ;	return from main will return to caller
                                    368 ;--------------------------------------------------------
                                    369 ; code
                                    370 ;--------------------------------------------------------
                                    371 	.area CSEG    (CODE)
                                    372 ;------------------------------------------------------------
                                    373 ;Allocation info for local variables in function 'display_number'
                                    374 ;------------------------------------------------------------
                                    375 ;number                    Allocated to registers r4 r5 r6 r7 
                                    376 ;i                         Allocated to registers r3 
                                    377 ;led                       Allocated with name '_display_number_led_65537_38'
                                    378 ;neg                       Allocated with name '_display_number_neg_65537_38'
                                    379 ;__1966090004              Allocated to registers r3 
                                    380 ;__1966090005              Allocated to registers r0 
                                    381 ;led                       Allocated to registers 
                                    382 ;digit                     Allocated to registers 
                                    383 ;------------------------------------------------------------
                                    384 ;	led7seg.h:27: void display_number(long number)
                                    385 ;	-----------------------------------------
                                    386 ;	 function display_number
                                    387 ;	-----------------------------------------
      000000                        388 _display_number:
                           000007   389 	ar7 = 0x07
                           000006   390 	ar6 = 0x06
                           000005   391 	ar5 = 0x05
                           000004   392 	ar4 = 0x04
                           000003   393 	ar3 = 0x03
                           000002   394 	ar2 = 0x02
                           000001   395 	ar1 = 0x01
                           000000   396 	ar0 = 0x00
      000000 AC 82            [24]  397 	mov	r4,dpl
      000002 AD 83            [24]  398 	mov	r5,dph
      000004 AE F0            [24]  399 	mov	r6,b
      000006 FF               [12]  400 	mov	r7,a
                                    401 ;	led7seg.h:29: if (!number)
      000007 EC               [12]  402 	mov	a,r4
      000008 4D               [12]  403 	orl	a,r5
      000009 4E               [12]  404 	orl	a,r6
      00000A 4F               [12]  405 	orl	a,r7
                                    406 ;	led7seg.h:31: P0 = 0;
      00000B 70 17            [24]  407 	jnz	00103$
      00000D F5 80            [12]  408 	mov	_P0,a
                                    409 ;	led7seg.h:32: P2 &= 0b11100011;
      00000F 53 A0 E3         [24]  410 	anl	_P2,#0xe3
                                    411 ;	led7seg.h:33: P0 = number_string[0];
      000012 90r00r00         [24]  412 	mov	dptr,#_number_string
      000015 E4               [12]  413 	clr	a
      000016 93               [24]  414 	movc	a,@a+dptr
      000017 F5 80            [12]  415 	mov	_P0,a
                                    416 ;	led7seg.h:34: for (char i = 0; i < 100; i++)
      000019 7B 00            [12]  417 	mov	r3,#0x00
      00001B                        418 00113$:
      00001B BB 64 00         [24]  419 	cjne	r3,#0x64,00148$
      00001E                        420 00148$:
      00001E 50 03            [24]  421 	jnc	00101$
      000020 0B               [12]  422 	inc	r3
      000021 80 F8            [24]  423 	sjmp	00113$
      000023                        424 00101$:
                                    425 ;	led7seg.h:36: return;
      000023 22               [24]  426 	ret
      000024                        427 00103$:
                                    428 ;	led7seg.h:39: char neg = 0;
      000024 75*01 00         [24]  429 	mov	_display_number_neg_65537_38,#0x00
                                    430 ;	led7seg.h:40: if (number < 0)
      000027 EF               [12]  431 	mov	a,r7
      000028 30 E7 10         [24]  432 	jnb	acc.7,00122$
                                    433 ;	led7seg.h:42: neg = 1;
      00002B 75*01 01         [24]  434 	mov	_display_number_neg_65537_38,#0x01
                                    435 ;	led7seg.h:43: number = -number;
      00002E C3               [12]  436 	clr	c
      00002F E4               [12]  437 	clr	a
      000030 9C               [12]  438 	subb	a,r4
      000031 FC               [12]  439 	mov	r4,a
      000032 E4               [12]  440 	clr	a
      000033 9D               [12]  441 	subb	a,r5
      000034 FD               [12]  442 	mov	r5,a
      000035 E4               [12]  443 	clr	a
      000036 9E               [12]  444 	subb	a,r6
      000037 FE               [12]  445 	mov	r6,a
      000038 E4               [12]  446 	clr	a
      000039 9F               [12]  447 	subb	a,r7
      00003A FF               [12]  448 	mov	r7,a
                                    449 ;	led7seg.h:53: while (number)
      00003B                        450 00122$:
      00003B 75*00 00         [24]  451 	mov	_display_number_led_65537_38,#0x00
      00003E                        452 00106$:
      00003E EC               [12]  453 	mov	a,r4
      00003F 4D               [12]  454 	orl	a,r5
      000040 4E               [12]  455 	orl	a,r6
      000041 4F               [12]  456 	orl	a,r7
      000042 60 5A            [24]  457 	jz	00108$
                                    458 ;	led7seg.h:55: display_digit(led++, number % 10);
      000044 75*00 0A         [24]  459 	mov	__modslong_PARM_2,#0x0a
      000047 E4               [12]  460 	clr	a
      000048 F5*01            [12]  461 	mov	(__modslong_PARM_2 + 1),a
      00004A F5*02            [12]  462 	mov	(__modslong_PARM_2 + 2),a
      00004C F5*03            [12]  463 	mov	(__modslong_PARM_2 + 3),a
      00004E 8C 82            [24]  464 	mov	dpl,r4
      000050 8D 83            [24]  465 	mov	dph,r5
      000052 8E F0            [24]  466 	mov	b,r6
      000054 EF               [12]  467 	mov	a,r7
      000055 C0 07            [24]  468 	push	ar7
      000057 C0 06            [24]  469 	push	ar6
      000059 C0 05            [24]  470 	push	ar5
      00005B C0 04            [24]  471 	push	ar4
      00005D 12r00r00         [24]  472 	lcall	__modslong
      000060 A8 82            [24]  473 	mov	r0,dpl
      000062 D0 04            [24]  474 	pop	ar4
      000064 D0 05            [24]  475 	pop	ar5
      000066 D0 06            [24]  476 	pop	ar6
      000068 D0 07            [24]  477 	pop	ar7
      00006A AB*00            [24]  478 	mov	r3,_display_number_led_65537_38
      00006C 05*00            [12]  479 	inc	_display_number_led_65537_38
                                    480 ;	led7seg.h:19: P0 = 0;
      00006E 75 80 00         [24]  481 	mov	_P0,#0x00
                                    482 ;	led7seg.h:20: P2 &= 0b11100011;
      000071 53 A0 E3         [24]  483 	anl	_P2,#0xe3
                                    484 ;	led7seg.h:21: P2 |= led << 2;
      000074 EB               [12]  485 	mov	a,r3
      000075 2B               [12]  486 	add	a,r3
      000076 25 E0            [12]  487 	add	a,acc
      000078 42 A0            [12]  488 	orl	_P2,a
                                    489 ;	led7seg.h:24: P0 = number_string[digit];
      00007A E8               [12]  490 	mov	a,r0
      00007B 90r00r00         [24]  491 	mov	dptr,#_number_string
      00007E 93               [24]  492 	movc	a,@a+dptr
      00007F F5 80            [12]  493 	mov	_P0,a
                                    494 ;	led7seg.h:56: number /= 10;
      000081 75*00 0A         [24]  495 	mov	__divslong_PARM_2,#0x0a
      000084 E4               [12]  496 	clr	a
      000085 F5*01            [12]  497 	mov	(__divslong_PARM_2 + 1),a
      000087 F5*02            [12]  498 	mov	(__divslong_PARM_2 + 2),a
      000089 F5*03            [12]  499 	mov	(__divslong_PARM_2 + 3),a
      00008B 8C 82            [24]  500 	mov	dpl,r4
      00008D 8D 83            [24]  501 	mov	dph,r5
      00008F 8E F0            [24]  502 	mov	b,r6
      000091 EF               [12]  503 	mov	a,r7
      000092 12r00r00         [24]  504 	lcall	__divslong
      000095 AC 82            [24]  505 	mov	r4,dpl
      000097 AD 83            [24]  506 	mov	r5,dph
      000099 AE F0            [24]  507 	mov	r6,b
      00009B FF               [12]  508 	mov	r7,a
      00009C 80 A0            [24]  509 	sjmp	00106$
      00009E                        510 00108$:
                                    511 ;	led7seg.h:58: if (neg)
      00009E E5*01            [12]  512 	mov	a,_display_number_neg_65537_38
      0000A0 60 0F            [24]  513 	jz	00115$
                                    514 ;	led7seg.h:60: P0 = 0;
      0000A2 75 80 00         [24]  515 	mov	_P0,#0x00
                                    516 ;	led7seg.h:61: P2 = led << 2;
      0000A5 E5*00            [12]  517 	mov	a,_display_number_led_65537_38
      0000A7 FA               [12]  518 	mov	r2,a
      0000A8 25 E0            [12]  519 	add	a,acc
      0000AA 25 E0            [12]  520 	add	a,acc
      0000AC F5 A0            [12]  521 	mov	_P2,a
                                    522 ;	led7seg.h:62: P0 = 0b01000000;
      0000AE 75 80 40         [24]  523 	mov	_P0,#0x40
      0000B1                        524 00115$:
                                    525 ;	led7seg.h:64: }
      0000B1 22               [24]  526 	ret
                                    527 ;------------------------------------------------------------
                                    528 ;Allocation info for local variables in function 'uart_init'
                                    529 ;------------------------------------------------------------
                                    530 ;	connect.c:24: void uart_init(void)
                                    531 ;	-----------------------------------------
                                    532 ;	 function uart_init
                                    533 ;	-----------------------------------------
      0000B2                        534 _uart_init:
                                    535 ;	connect.c:28: TMOD &= 0x0f;
      0000B2 53 89 0F         [24]  536 	anl	_TMOD,#0x0f
                                    537 ;	connect.c:29: TMOD |= 0x20;
      0000B5 43 89 20         [24]  538 	orl	_TMOD,#0x20
                                    539 ;	connect.c:30: TH1 = 0xfd;
      0000B8 75 8D FD         [24]  540 	mov	_TH1,#0xfd
                                    541 ;	connect.c:31: TL1 = 0xfd;
      0000BB 75 8B FD         [24]  542 	mov	_TL1,#0xfd
                                    543 ;	connect.c:32: ET1 = 0;
                                    544 ;	assignBit
      0000BE C2 AB            [12]  545 	clr	_ET1
                                    546 ;	connect.c:33: TR1 = 1;
                                    547 ;	assignBit
      0000C0 D2 8E            [12]  548 	setb	_TR1
                                    549 ;	connect.c:35: SM0 = 0;
                                    550 ;	assignBit
      0000C2 C2 9F            [12]  551 	clr	_SM0
                                    552 ;	connect.c:36: SM1 = 1;
                                    553 ;	assignBit
      0000C4 D2 9E            [12]  554 	setb	_SM1
                                    555 ;	connect.c:38: ES = 1;
                                    556 ;	assignBit
      0000C6 D2 AC            [12]  557 	setb	_ES
                                    558 ;	connect.c:39: EA = 1;
                                    559 ;	assignBit
      0000C8 D2 AF            [12]  560 	setb	_EA
                                    561 ;	connect.c:40: REN = 1;
                                    562 ;	assignBit
      0000CA D2 9C            [12]  563 	setb	_REN
                                    564 ;	connect.c:41: }
      0000CC 22               [24]  565 	ret
                                    566 ;------------------------------------------------------------
                                    567 ;Allocation info for local variables in function 'uart_send'
                                    568 ;------------------------------------------------------------
                                    569 ;data                      Allocated to registers r7 
                                    570 ;------------------------------------------------------------
                                    571 ;	connect.c:43: void uart_send(__code char data)
                                    572 ;	-----------------------------------------
                                    573 ;	 function uart_send
                                    574 ;	-----------------------------------------
      0000CD                        575 _uart_send:
      0000CD AF 82            [24]  576 	mov	r7,dpl
                                    577 ;	connect.c:45: ES = 0;
                                    578 ;	assignBit
      0000CF C2 AC            [12]  579 	clr	_ES
                                    580 ;	connect.c:46: SBUF = data; // Load data into buffer
      0000D1 8F 99            [24]  581 	mov	_SBUF,r7
                                    582 ;	connect.c:47: while (TI == 0)
      0000D3                        583 00101$:
                                    584 ;	connect.c:50: TI = 0; // Clear transmit interrupt flag
                                    585 ;	assignBit
      0000D3 10 99 02         [24]  586 	jbc	_TI,00114$
      0000D6 80 FB            [24]  587 	sjmp	00101$
      0000D8                        588 00114$:
                                    589 ;	connect.c:51: ES = 1;
                                    590 ;	assignBit
      0000D8 D2 AC            [12]  591 	setb	_ES
                                    592 ;	connect.c:52: }
      0000DA 22               [24]  593 	ret
                                    594 ;------------------------------------------------------------
                                    595 ;Allocation info for local variables in function 'UART_Receive'
                                    596 ;------------------------------------------------------------
                                    597 ;	connect.c:54: void UART_Receive(void) __interrupt(4)
                                    598 ;	-----------------------------------------
                                    599 ;	 function UART_Receive
                                    600 ;	-----------------------------------------
      0000DB                        601 _UART_Receive:
      0000DB C0*00            [24]  602 	push	bits
      0000DD C0 E0            [24]  603 	push	acc
      0000DF C0 F0            [24]  604 	push	b
      0000E1 C0 82            [24]  605 	push	dpl
      0000E3 C0 83            [24]  606 	push	dph
      0000E5 C0 07            [24]  607 	push	(0+7)
      0000E7 C0 06            [24]  608 	push	(0+6)
      0000E9 C0 05            [24]  609 	push	(0+5)
      0000EB C0 04            [24]  610 	push	(0+4)
      0000ED C0 03            [24]  611 	push	(0+3)
      0000EF C0 02            [24]  612 	push	(0+2)
      0000F1 C0 01            [24]  613 	push	(0+1)
      0000F3 C0 00            [24]  614 	push	(0+0)
      0000F5 C0 D0            [24]  615 	push	psw
      0000F7 75 D0 00         [24]  616 	mov	psw,#0x00
                                    617 ;	connect.c:56: P2 = 0x10;
      0000FA 75 A0 10         [24]  618 	mov	_P2,#0x10
                                    619 ;	connect.c:57: if (RI)
      0000FD 30 98 0D         [24]  620 	jnb	_RI,00103$
                                    621 ;	connect.c:59: P2 = ~SBUF;
      000100 E5 99            [12]  622 	mov	a,_SBUF
      000102 F4               [12]  623 	cpl	a
      000103 F5 A0            [12]  624 	mov	_P2,a
                                    625 ;	connect.c:60: received_data = SBUF; // Get received data
      000105 85 99*02         [24]  626 	mov	_received_data,_SBUF
                                    627 ;	connect.c:61: resolve_message();
      000108 12r03rAB         [24]  628 	lcall	_resolve_message
                                    629 ;	connect.c:62: RI = 0; // Clear receive interrupt flag
                                    630 ;	assignBit
      00010B C2 98            [12]  631 	clr	_RI
      00010D                        632 00103$:
                                    633 ;	connect.c:64: }
      00010D D0 D0            [24]  634 	pop	psw
      00010F D0 00            [24]  635 	pop	(0+0)
      000111 D0 01            [24]  636 	pop	(0+1)
      000113 D0 02            [24]  637 	pop	(0+2)
      000115 D0 03            [24]  638 	pop	(0+3)
      000117 D0 04            [24]  639 	pop	(0+4)
      000119 D0 05            [24]  640 	pop	(0+5)
      00011B D0 06            [24]  641 	pop	(0+6)
      00011D D0 07            [24]  642 	pop	(0+7)
      00011F D0 83            [24]  643 	pop	dph
      000121 D0 82            [24]  644 	pop	dpl
      000123 D0 F0            [24]  645 	pop	b
      000125 D0 E0            [24]  646 	pop	acc
      000127 D0*00            [24]  647 	pop	bits
      000129 32               [24]  648 	reti
                                    649 ;------------------------------------------------------------
                                    650 ;Allocation info for local variables in function 'key_pressed_handle'
                                    651 ;------------------------------------------------------------
                                    652 ;	connect.c:117: void key_pressed_handle(void)
                                    653 ;	-----------------------------------------
                                    654 ;	 function key_pressed_handle
                                    655 ;	-----------------------------------------
      00012A                        656 _key_pressed_handle:
                                    657 ;	connect.c:119: if (point >= 64)
      00012A 74 C0            [12]  658 	mov	a,#0x100 - 0x40
      00012C 25*03            [12]  659 	add	a,_point
      00012E 50 06            [24]  660 	jnc	00102$
                                    661 ;	connect.c:121: uart_send(key_pressed);
      000130 85*0C 82         [24]  662 	mov	dpl,_key_pressed
                                    663 ;	connect.c:122: return;
      000133 02r00rCD         [24]  664 	ljmp	_uart_send
      000136                        665 00102$:
                                    666 ;	connect.c:124: switch (key_pressed)
      000136 74 02            [12]  667 	mov	a,#0x02
      000138 B5*0C 02         [24]  668 	cjne	a,_key_pressed,00131$
      00013B 80 15            [24]  669 	sjmp	00103$
      00013D                        670 00131$:
      00013D 74 05            [12]  671 	mov	a,#0x05
      00013F B5*0C 02         [24]  672 	cjne	a,_key_pressed,00132$
      000142 80 14            [24]  673 	sjmp	00105$
      000144                        674 00132$:
      000144 74 06            [12]  675 	mov	a,#0x06
      000146 B5*0C 02         [24]  676 	cjne	a,_key_pressed,00133$
      000149 80 0A            [24]  677 	sjmp	00104$
      00014B                        678 00133$:
      00014B 74 07            [12]  679 	mov	a,#0x07
                                    680 ;	connect.c:126: case 2:
      00014D B5*0C 0E         [24]  681 	cjne	a,_key_pressed,00108$
      000150 80 09            [24]  682 	sjmp	00106$
      000152                        683 00103$:
                                    684 ;	connect.c:128: move_up();
                                    685 ;	connect.c:129: break;
                                    686 ;	connect.c:130: case 6:
      000152 02r01r5F         [24]  687 	ljmp	_move_up
      000155                        688 00104$:
                                    689 ;	connect.c:132: move_down();
                                    690 ;	connect.c:133: break;
                                    691 ;	connect.c:134: case 5:
      000155 02r01rCD         [24]  692 	ljmp	_move_down
      000158                        693 00105$:
                                    694 ;	connect.c:136: move_left();
                                    695 ;	connect.c:137: break;
                                    696 ;	connect.c:138: case 7:
      000158 02r02r3C         [24]  697 	ljmp	_move_left
      00015B                        698 00106$:
                                    699 ;	connect.c:140: move_right();
                                    700 ;	connect.c:142: }
                                    701 ;	connect.c:143: }
      00015B 02r02rF1         [24]  702 	ljmp	_move_right
      00015E                        703 00108$:
      00015E 22               [24]  704 	ret
                                    705 ;------------------------------------------------------------
                                    706 ;Allocation info for local variables in function 'move_up'
                                    707 ;------------------------------------------------------------
                                    708 ;__1310720007              Allocated to registers r7 
                                    709 ;a                         Allocated to registers 
                                    710 ;__1310720009              Allocated to registers r7 
                                    711 ;a                         Allocated to registers 
                                    712 ;------------------------------------------------------------
                                    713 ;	connect.c:149: void move_up(void)
                                    714 ;	-----------------------------------------
                                    715 ;	 function move_up
                                    716 ;	-----------------------------------------
      00015F                        717 _move_up:
                                    718 ;	connect.c:151: if (point < 8)
      00015F 74 F8            [12]  719 	mov	a,#0x100 - 0x08
      000161 25*03            [12]  720 	add	a,_point
      000163 40 01            [24]  721 	jc	00102$
                                    722 ;	connect.c:152: return;
      000165 22               [24]  723 	ret
      000166                        724 00102$:
                                    725 ;	connect.c:153: turn_off(point);
                                    726 ;	connect.c:107: if (a > 63)
      000166 E5*03            [12]  727 	mov	a,_point
      000168 FF               [12]  728 	mov	r7,a
      000169 24 C0            [12]  729 	add	a,#0xff - 0x3f
      00016B 40 2A            [24]  730 	jc	00105$
                                    731 ;	connect.c:109: data_mat[a >> 3] &= ~(0x80 >> (a & 7));
      00016D EF               [12]  732 	mov	a,r7
      00016E C4               [12]  733 	swap	a
      00016F 23               [12]  734 	rl	a
      000170 54 1F            [12]  735 	anl	a,#0x1f
      000172 24r04            [12]  736 	add	a,#_data_mat
      000174 F9               [12]  737 	mov	r1,a
      000175 87 06            [24]  738 	mov	ar6,@r1
      000177 53 07 07         [24]  739 	anl	ar7,#0x07
      00017A 8F F0            [24]  740 	mov	b,r7
      00017C 05 F0            [12]  741 	inc	b
      00017E 7F 80            [12]  742 	mov	r7,#0x80
      000180 E4               [12]  743 	clr	a
      000181 FD               [12]  744 	mov	r5,a
      000182 33               [12]  745 	rlc	a
      000183 92 D2            [24]  746 	mov	ov,c
      000185 80 08            [24]  747 	sjmp	00126$
      000187                        748 00125$:
      000187 A2 D2            [12]  749 	mov	c,ov
      000189 ED               [12]  750 	mov	a,r5
      00018A 13               [12]  751 	rrc	a
      00018B FD               [12]  752 	mov	r5,a
      00018C EF               [12]  753 	mov	a,r7
      00018D 13               [12]  754 	rrc	a
      00018E FF               [12]  755 	mov	r7,a
      00018F                        756 00126$:
      00018F D5 F0 F5         [24]  757 	djnz	b,00125$
      000192 EF               [12]  758 	mov	a,r7
      000193 F4               [12]  759 	cpl	a
      000194 FF               [12]  760 	mov	r7,a
      000195 5E               [12]  761 	anl	a,r6
      000196 F7               [12]  762 	mov	@r1,a
                                    763 ;	connect.c:153: turn_off(point);
      000197                        764 00105$:
                                    765 ;	connect.c:154: point -= 8;
      000197 E5*03            [12]  766 	mov	a,_point
      000199 24 F8            [12]  767 	add	a,#0xf8
      00019B F5*03            [12]  768 	mov	_point,a
                                    769 ;	connect.c:155: turn_on(point);
                                    770 ;	connect.c:101: if (a > 63)
      00019D E5*03            [12]  771 	mov	a,_point
      00019F FF               [12]  772 	mov	r7,a
      0001A0 24 C0            [12]  773 	add	a,#0xff - 0x3f
      0001A2 40 28            [24]  774 	jc	00109$
                                    775 ;	connect.c:103: data_mat[a >> 3] |= 0x80 >> (a & 7);
      0001A4 EF               [12]  776 	mov	a,r7
      0001A5 C4               [12]  777 	swap	a
      0001A6 23               [12]  778 	rl	a
      0001A7 54 1F            [12]  779 	anl	a,#0x1f
      0001A9 24r04            [12]  780 	add	a,#_data_mat
      0001AB F9               [12]  781 	mov	r1,a
      0001AC 87 06            [24]  782 	mov	ar6,@r1
      0001AE 53 07 07         [24]  783 	anl	ar7,#0x07
      0001B1 8F F0            [24]  784 	mov	b,r7
      0001B3 05 F0            [12]  785 	inc	b
      0001B5 7F 80            [12]  786 	mov	r7,#0x80
      0001B7 E4               [12]  787 	clr	a
      0001B8 FD               [12]  788 	mov	r5,a
      0001B9 33               [12]  789 	rlc	a
      0001BA 92 D2            [24]  790 	mov	ov,c
      0001BC 80 08            [24]  791 	sjmp	00129$
      0001BE                        792 00128$:
      0001BE A2 D2            [12]  793 	mov	c,ov
      0001C0 ED               [12]  794 	mov	a,r5
      0001C1 13               [12]  795 	rrc	a
      0001C2 FD               [12]  796 	mov	r5,a
      0001C3 EF               [12]  797 	mov	a,r7
      0001C4 13               [12]  798 	rrc	a
      0001C5 FF               [12]  799 	mov	r7,a
      0001C6                        800 00129$:
      0001C6 D5 F0 F5         [24]  801 	djnz	b,00128$
      0001C9 EF               [12]  802 	mov	a,r7
      0001CA 4E               [12]  803 	orl	a,r6
      0001CB F7               [12]  804 	mov	@r1,a
                                    805 ;	connect.c:155: turn_on(point);
      0001CC                        806 00109$:
                                    807 ;	connect.c:156: }
      0001CC 22               [24]  808 	ret
                                    809 ;------------------------------------------------------------
                                    810 ;Allocation info for local variables in function 'move_down'
                                    811 ;------------------------------------------------------------
                                    812 ;__1310720011              Allocated to registers r7 
                                    813 ;a                         Allocated to registers 
                                    814 ;__1310720013              Allocated to registers r7 
                                    815 ;a                         Allocated to registers 
                                    816 ;------------------------------------------------------------
                                    817 ;	connect.c:157: void move_down(void)
                                    818 ;	-----------------------------------------
                                    819 ;	 function move_down
                                    820 ;	-----------------------------------------
      0001CD                        821 _move_down:
                                    822 ;	connect.c:159: if (point >= 56)
      0001CD 74 C8            [12]  823 	mov	a,#0x100 - 0x38
      0001CF 25*03            [12]  824 	add	a,_point
      0001D1 50 01            [24]  825 	jnc	00102$
                                    826 ;	connect.c:161: return;
      0001D3 22               [24]  827 	ret
      0001D4                        828 00102$:
                                    829 ;	connect.c:163: turn_off(point);
                                    830 ;	connect.c:107: if (a > 63)
      0001D4 E5*03            [12]  831 	mov	a,_point
      0001D6 FF               [12]  832 	mov	r7,a
      0001D7 24 C0            [12]  833 	add	a,#0xff - 0x3f
      0001D9 40 2A            [24]  834 	jc	00105$
                                    835 ;	connect.c:109: data_mat[a >> 3] &= ~(0x80 >> (a & 7));
      0001DB EF               [12]  836 	mov	a,r7
      0001DC C4               [12]  837 	swap	a
      0001DD 23               [12]  838 	rl	a
      0001DE 54 1F            [12]  839 	anl	a,#0x1f
      0001E0 24r04            [12]  840 	add	a,#_data_mat
      0001E2 F9               [12]  841 	mov	r1,a
      0001E3 87 06            [24]  842 	mov	ar6,@r1
      0001E5 53 07 07         [24]  843 	anl	ar7,#0x07
      0001E8 8F F0            [24]  844 	mov	b,r7
      0001EA 05 F0            [12]  845 	inc	b
      0001EC 7F 80            [12]  846 	mov	r7,#0x80
      0001EE E4               [12]  847 	clr	a
      0001EF FD               [12]  848 	mov	r5,a
      0001F0 33               [12]  849 	rlc	a
      0001F1 92 D2            [24]  850 	mov	ov,c
      0001F3 80 08            [24]  851 	sjmp	00126$
      0001F5                        852 00125$:
      0001F5 A2 D2            [12]  853 	mov	c,ov
      0001F7 ED               [12]  854 	mov	a,r5
      0001F8 13               [12]  855 	rrc	a
      0001F9 FD               [12]  856 	mov	r5,a
      0001FA EF               [12]  857 	mov	a,r7
      0001FB 13               [12]  858 	rrc	a
      0001FC FF               [12]  859 	mov	r7,a
      0001FD                        860 00126$:
      0001FD D5 F0 F5         [24]  861 	djnz	b,00125$
      000200 EF               [12]  862 	mov	a,r7
      000201 F4               [12]  863 	cpl	a
      000202 FF               [12]  864 	mov	r7,a
      000203 5E               [12]  865 	anl	a,r6
      000204 F7               [12]  866 	mov	@r1,a
                                    867 ;	connect.c:163: turn_off(point);
      000205                        868 00105$:
                                    869 ;	connect.c:164: point += 8;
      000205 AF*03            [24]  870 	mov	r7,_point
      000207 74 08            [12]  871 	mov	a,#0x08
      000209 2F               [12]  872 	add	a,r7
      00020A F5*03            [12]  873 	mov	_point,a
                                    874 ;	connect.c:165: turn_on(point);
                                    875 ;	connect.c:101: if (a > 63)
      00020C E5*03            [12]  876 	mov	a,_point
      00020E FF               [12]  877 	mov	r7,a
      00020F 24 C0            [12]  878 	add	a,#0xff - 0x3f
      000211 40 28            [24]  879 	jc	00109$
                                    880 ;	connect.c:103: data_mat[a >> 3] |= 0x80 >> (a & 7);
      000213 EF               [12]  881 	mov	a,r7
      000214 C4               [12]  882 	swap	a
      000215 23               [12]  883 	rl	a
      000216 54 1F            [12]  884 	anl	a,#0x1f
      000218 24r04            [12]  885 	add	a,#_data_mat
      00021A F9               [12]  886 	mov	r1,a
      00021B 87 06            [24]  887 	mov	ar6,@r1
      00021D 53 07 07         [24]  888 	anl	ar7,#0x07
      000220 8F F0            [24]  889 	mov	b,r7
      000222 05 F0            [12]  890 	inc	b
      000224 7F 80            [12]  891 	mov	r7,#0x80
      000226 E4               [12]  892 	clr	a
      000227 FD               [12]  893 	mov	r5,a
      000228 33               [12]  894 	rlc	a
      000229 92 D2            [24]  895 	mov	ov,c
      00022B 80 08            [24]  896 	sjmp	00129$
      00022D                        897 00128$:
      00022D A2 D2            [12]  898 	mov	c,ov
      00022F ED               [12]  899 	mov	a,r5
      000230 13               [12]  900 	rrc	a
      000231 FD               [12]  901 	mov	r5,a
      000232 EF               [12]  902 	mov	a,r7
      000233 13               [12]  903 	rrc	a
      000234 FF               [12]  904 	mov	r7,a
      000235                        905 00129$:
      000235 D5 F0 F5         [24]  906 	djnz	b,00128$
      000238 EF               [12]  907 	mov	a,r7
      000239 4E               [12]  908 	orl	a,r6
      00023A F7               [12]  909 	mov	@r1,a
                                    910 ;	connect.c:165: turn_on(point);
      00023B                        911 00109$:
                                    912 ;	connect.c:166: }
      00023B 22               [24]  913 	ret
                                    914 ;------------------------------------------------------------
                                    915 ;Allocation info for local variables in function 'move_left'
                                    916 ;------------------------------------------------------------
                                    917 ;__2621440015              Allocated to registers r7 
                                    918 ;a                         Allocated to registers 
                                    919 ;__1310720017              Allocated to registers r7 
                                    920 ;a                         Allocated to registers 
                                    921 ;__1310720019              Allocated to registers r7 
                                    922 ;a                         Allocated to registers 
                                    923 ;------------------------------------------------------------
                                    924 ;	connect.c:167: void move_left(void)
                                    925 ;	-----------------------------------------
                                    926 ;	 function move_left
                                    927 ;	-----------------------------------------
      00023C                        928 _move_left:
                                    929 ;	connect.c:169: if ((point & 7) == 0)
      00023C E5*03            [12]  930 	mov	a,_point
      00023E 54 07            [12]  931 	anl	a,#0x07
      000240 60 02            [24]  932 	jz	00137$
      000242 80 4A            [24]  933 	sjmp	00104$
      000244                        934 00137$:
                                    935 ;	connect.c:171: if (kit_id)
      000244 30*00 46         [24]  936 	jnb	_kit_id,00102$
                                    937 ;	connect.c:173: turn_off(point);
                                    938 ;	connect.c:107: if (a > 63)
      000247 E5*03            [12]  939 	mov	a,_point
      000249 FF               [12]  940 	mov	r7,a
      00024A 24 C0            [12]  941 	add	a,#0xff - 0x3f
      00024C 40 2A            [24]  942 	jc	00107$
                                    943 ;	connect.c:109: data_mat[a >> 3] &= ~(0x80 >> (a & 7));
      00024E EF               [12]  944 	mov	a,r7
      00024F C4               [12]  945 	swap	a
      000250 23               [12]  946 	rl	a
      000251 54 1F            [12]  947 	anl	a,#0x1f
      000253 24r04            [12]  948 	add	a,#_data_mat
      000255 F9               [12]  949 	mov	r1,a
      000256 87 06            [24]  950 	mov	ar6,@r1
      000258 53 07 07         [24]  951 	anl	ar7,#0x07
      00025B 8F F0            [24]  952 	mov	b,r7
      00025D 05 F0            [12]  953 	inc	b
      00025F 7F 80            [12]  954 	mov	r7,#0x80
      000261 E4               [12]  955 	clr	a
      000262 FD               [12]  956 	mov	r5,a
      000263 33               [12]  957 	rlc	a
      000264 92 D2            [24]  958 	mov	ov,c
      000266 80 08            [24]  959 	sjmp	00141$
      000268                        960 00140$:
      000268 A2 D2            [12]  961 	mov	c,ov
      00026A ED               [12]  962 	mov	a,r5
      00026B 13               [12]  963 	rrc	a
      00026C FD               [12]  964 	mov	r5,a
      00026D EF               [12]  965 	mov	a,r7
      00026E 13               [12]  966 	rrc	a
      00026F FF               [12]  967 	mov	r7,a
      000270                        968 00141$:
      000270 D5 F0 F5         [24]  969 	djnz	b,00140$
      000273 EF               [12]  970 	mov	a,r7
      000274 F4               [12]  971 	cpl	a
      000275 FF               [12]  972 	mov	r7,a
      000276 5E               [12]  973 	anl	a,r6
      000277 F7               [12]  974 	mov	@r1,a
                                    975 ;	connect.c:173: turn_off(point);
      000278                        976 00107$:
                                    977 ;	connect.c:174: uart_send(back | (point >> 3));
      000278 E5*03            [12]  978 	mov	a,_point
      00027A C4               [12]  979 	swap	a
      00027B 23               [12]  980 	rl	a
      00027C 54 1F            [12]  981 	anl	a,#0x1f
      00027E FF               [12]  982 	mov	r7,a
      00027F 90r00r0B         [24]  983 	mov	dptr,#_back
      000282 E4               [12]  984 	clr	a
      000283 93               [24]  985 	movc	a,@a+dptr
      000284 4F               [12]  986 	orl	a,r7
      000285 F5 82            [12]  987 	mov	dpl,a
      000287 12r00rCD         [24]  988 	lcall	_uart_send
                                    989 ;	connect.c:175: point = 100;
      00028A 75*03 64         [24]  990 	mov	_point,#0x64
      00028D                        991 00102$:
                                    992 ;	connect.c:177: return;
      00028D 22               [24]  993 	ret
      00028E                        994 00104$:
                                    995 ;	connect.c:179: turn_off(point);
                                    996 ;	connect.c:107: if (a > 63)
      00028E E5*03            [12]  997 	mov	a,_point
      000290 FF               [12]  998 	mov	r7,a
      000291 24 C0            [12]  999 	add	a,#0xff - 0x3f
      000293 40 2A            [24] 1000 	jc	00110$
                                   1001 ;	connect.c:109: data_mat[a >> 3] &= ~(0x80 >> (a & 7));
      000295 EF               [12] 1002 	mov	a,r7
      000296 C4               [12] 1003 	swap	a
      000297 23               [12] 1004 	rl	a
      000298 54 1F            [12] 1005 	anl	a,#0x1f
      00029A 24r04            [12] 1006 	add	a,#_data_mat
      00029C F9               [12] 1007 	mov	r1,a
      00029D 87 06            [24] 1008 	mov	ar6,@r1
      00029F 53 07 07         [24] 1009 	anl	ar7,#0x07
      0002A2 8F F0            [24] 1010 	mov	b,r7
      0002A4 05 F0            [12] 1011 	inc	b
      0002A6 7F 80            [12] 1012 	mov	r7,#0x80
      0002A8 E4               [12] 1013 	clr	a
      0002A9 FD               [12] 1014 	mov	r5,a
      0002AA 33               [12] 1015 	rlc	a
      0002AB 92 D2            [24] 1016 	mov	ov,c
      0002AD 80 08            [24] 1017 	sjmp	00144$
      0002AF                       1018 00143$:
      0002AF A2 D2            [12] 1019 	mov	c,ov
      0002B1 ED               [12] 1020 	mov	a,r5
      0002B2 13               [12] 1021 	rrc	a
      0002B3 FD               [12] 1022 	mov	r5,a
      0002B4 EF               [12] 1023 	mov	a,r7
      0002B5 13               [12] 1024 	rrc	a
      0002B6 FF               [12] 1025 	mov	r7,a
      0002B7                       1026 00144$:
      0002B7 D5 F0 F5         [24] 1027 	djnz	b,00143$
      0002BA EF               [12] 1028 	mov	a,r7
      0002BB F4               [12] 1029 	cpl	a
      0002BC FF               [12] 1030 	mov	r7,a
      0002BD 5E               [12] 1031 	anl	a,r6
      0002BE F7               [12] 1032 	mov	@r1,a
                                   1033 ;	connect.c:179: turn_off(point);
      0002BF                       1034 00110$:
                                   1035 ;	connect.c:180: point--;
      0002BF 15*03            [12] 1036 	dec	_point
                                   1037 ;	connect.c:181: turn_on(point);
                                   1038 ;	connect.c:101: if (a > 63)
      0002C1 E5*03            [12] 1039 	mov	a,_point
      0002C3 FF               [12] 1040 	mov	r7,a
      0002C4 24 C0            [12] 1041 	add	a,#0xff - 0x3f
      0002C6 40 28            [24] 1042 	jc	00114$
                                   1043 ;	connect.c:103: data_mat[a >> 3] |= 0x80 >> (a & 7);
      0002C8 EF               [12] 1044 	mov	a,r7
      0002C9 C4               [12] 1045 	swap	a
      0002CA 23               [12] 1046 	rl	a
      0002CB 54 1F            [12] 1047 	anl	a,#0x1f
      0002CD 24r04            [12] 1048 	add	a,#_data_mat
      0002CF F9               [12] 1049 	mov	r1,a
      0002D0 87 06            [24] 1050 	mov	ar6,@r1
      0002D2 53 07 07         [24] 1051 	anl	ar7,#0x07
      0002D5 8F F0            [24] 1052 	mov	b,r7
      0002D7 05 F0            [12] 1053 	inc	b
      0002D9 7F 80            [12] 1054 	mov	r7,#0x80
      0002DB E4               [12] 1055 	clr	a
      0002DC FD               [12] 1056 	mov	r5,a
      0002DD 33               [12] 1057 	rlc	a
      0002DE 92 D2            [24] 1058 	mov	ov,c
      0002E0 80 08            [24] 1059 	sjmp	00147$
      0002E2                       1060 00146$:
      0002E2 A2 D2            [12] 1061 	mov	c,ov
      0002E4 ED               [12] 1062 	mov	a,r5
      0002E5 13               [12] 1063 	rrc	a
      0002E6 FD               [12] 1064 	mov	r5,a
      0002E7 EF               [12] 1065 	mov	a,r7
      0002E8 13               [12] 1066 	rrc	a
      0002E9 FF               [12] 1067 	mov	r7,a
      0002EA                       1068 00147$:
      0002EA D5 F0 F5         [24] 1069 	djnz	b,00146$
      0002ED EF               [12] 1070 	mov	a,r7
      0002EE 4E               [12] 1071 	orl	a,r6
      0002EF F7               [12] 1072 	mov	@r1,a
                                   1073 ;	connect.c:181: turn_on(point);
      0002F0                       1074 00114$:
                                   1075 ;	connect.c:182: }
      0002F0 22               [24] 1076 	ret
                                   1077 ;------------------------------------------------------------
                                   1078 ;Allocation info for local variables in function 'move_right'
                                   1079 ;------------------------------------------------------------
                                   1080 ;__2621440021              Allocated to registers r7 
                                   1081 ;a                         Allocated to registers 
                                   1082 ;__1310720023              Allocated to registers r7 
                                   1083 ;a                         Allocated to registers 
                                   1084 ;__1310720025              Allocated to registers r7 
                                   1085 ;a                         Allocated to registers 
                                   1086 ;------------------------------------------------------------
                                   1087 ;	connect.c:183: void move_right(void)
                                   1088 ;	-----------------------------------------
                                   1089 ;	 function move_right
                                   1090 ;	-----------------------------------------
      0002F1                       1091 _move_right:
                                   1092 ;	connect.c:185: if ((point & 7) == 7)
      0002F1 AE*03            [24] 1093 	mov	r6,_point
      0002F3 53 06 07         [24] 1094 	anl	ar6,#0x07
      0002F6 7F 00            [12] 1095 	mov	r7,#0x00
      0002F8 BE 07 4D         [24] 1096 	cjne	r6,#0x07,00104$
      0002FB BF 00 4A         [24] 1097 	cjne	r7,#0x00,00104$
                                   1098 ;	connect.c:187: if (kit_id == 0)
      0002FE 20*00 46         [24] 1099 	jb	_kit_id,00102$
                                   1100 ;	connect.c:189: turn_off(point);
                                   1101 ;	connect.c:107: if (a > 63)
      000301 E5*03            [12] 1102 	mov	a,_point
      000303 FF               [12] 1103 	mov	r7,a
      000304 24 C0            [12] 1104 	add	a,#0xff - 0x3f
      000306 40 2A            [24] 1105 	jc	00107$
                                   1106 ;	connect.c:109: data_mat[a >> 3] &= ~(0x80 >> (a & 7));
      000308 EF               [12] 1107 	mov	a,r7
      000309 C4               [12] 1108 	swap	a
      00030A 23               [12] 1109 	rl	a
      00030B 54 1F            [12] 1110 	anl	a,#0x1f
      00030D 24r04            [12] 1111 	add	a,#_data_mat
      00030F F9               [12] 1112 	mov	r1,a
      000310 87 06            [24] 1113 	mov	ar6,@r1
      000312 53 07 07         [24] 1114 	anl	ar7,#0x07
      000315 8F F0            [24] 1115 	mov	b,r7
      000317 05 F0            [12] 1116 	inc	b
      000319 7F 80            [12] 1117 	mov	r7,#0x80
      00031B E4               [12] 1118 	clr	a
      00031C FD               [12] 1119 	mov	r5,a
      00031D 33               [12] 1120 	rlc	a
      00031E 92 D2            [24] 1121 	mov	ov,c
      000320 80 08            [24] 1122 	sjmp	00141$
      000322                       1123 00140$:
      000322 A2 D2            [12] 1124 	mov	c,ov
      000324 ED               [12] 1125 	mov	a,r5
      000325 13               [12] 1126 	rrc	a
      000326 FD               [12] 1127 	mov	r5,a
      000327 EF               [12] 1128 	mov	a,r7
      000328 13               [12] 1129 	rrc	a
      000329 FF               [12] 1130 	mov	r7,a
      00032A                       1131 00141$:
      00032A D5 F0 F5         [24] 1132 	djnz	b,00140$
      00032D EF               [12] 1133 	mov	a,r7
      00032E F4               [12] 1134 	cpl	a
      00032F FF               [12] 1135 	mov	r7,a
      000330 5E               [12] 1136 	anl	a,r6
      000331 F7               [12] 1137 	mov	@r1,a
                                   1138 ;	connect.c:189: turn_off(point);
      000332                       1139 00107$:
                                   1140 ;	connect.c:190: uart_send(forward | (point >> 3));
      000332 E5*03            [12] 1141 	mov	a,_point
      000334 C4               [12] 1142 	swap	a
      000335 23               [12] 1143 	rl	a
      000336 54 1F            [12] 1144 	anl	a,#0x1f
      000338 FF               [12] 1145 	mov	r7,a
      000339 90r00r0A         [24] 1146 	mov	dptr,#_forward
      00033C E4               [12] 1147 	clr	a
      00033D 93               [24] 1148 	movc	a,@a+dptr
      00033E 4F               [12] 1149 	orl	a,r7
      00033F F5 82            [12] 1150 	mov	dpl,a
      000341 12r00rCD         [24] 1151 	lcall	_uart_send
                                   1152 ;	connect.c:191: point = 100;
      000344 75*03 64         [24] 1153 	mov	_point,#0x64
      000347                       1154 00102$:
                                   1155 ;	connect.c:193: return;
      000347 22               [24] 1156 	ret
      000348                       1157 00104$:
                                   1158 ;	connect.c:195: turn_off(point);
                                   1159 ;	connect.c:107: if (a > 63)
      000348 E5*03            [12] 1160 	mov	a,_point
      00034A FF               [12] 1161 	mov	r7,a
      00034B 24 C0            [12] 1162 	add	a,#0xff - 0x3f
      00034D 40 2A            [24] 1163 	jc	00110$
                                   1164 ;	connect.c:109: data_mat[a >> 3] &= ~(0x80 >> (a & 7));
      00034F EF               [12] 1165 	mov	a,r7
      000350 C4               [12] 1166 	swap	a
      000351 23               [12] 1167 	rl	a
      000352 54 1F            [12] 1168 	anl	a,#0x1f
      000354 24r04            [12] 1169 	add	a,#_data_mat
      000356 F9               [12] 1170 	mov	r1,a
      000357 87 06            [24] 1171 	mov	ar6,@r1
      000359 53 07 07         [24] 1172 	anl	ar7,#0x07
      00035C 8F F0            [24] 1173 	mov	b,r7
      00035E 05 F0            [12] 1174 	inc	b
      000360 7F 80            [12] 1175 	mov	r7,#0x80
      000362 E4               [12] 1176 	clr	a
      000363 FD               [12] 1177 	mov	r5,a
      000364 33               [12] 1178 	rlc	a
      000365 92 D2            [24] 1179 	mov	ov,c
      000367 80 08            [24] 1180 	sjmp	00144$
      000369                       1181 00143$:
      000369 A2 D2            [12] 1182 	mov	c,ov
      00036B ED               [12] 1183 	mov	a,r5
      00036C 13               [12] 1184 	rrc	a
      00036D FD               [12] 1185 	mov	r5,a
      00036E EF               [12] 1186 	mov	a,r7
      00036F 13               [12] 1187 	rrc	a
      000370 FF               [12] 1188 	mov	r7,a
      000371                       1189 00144$:
      000371 D5 F0 F5         [24] 1190 	djnz	b,00143$
      000374 EF               [12] 1191 	mov	a,r7
      000375 F4               [12] 1192 	cpl	a
      000376 FF               [12] 1193 	mov	r7,a
      000377 5E               [12] 1194 	anl	a,r6
      000378 F7               [12] 1195 	mov	@r1,a
                                   1196 ;	connect.c:195: turn_off(point);
      000379                       1197 00110$:
                                   1198 ;	connect.c:196: point++;
      000379 05*03            [12] 1199 	inc	_point
                                   1200 ;	connect.c:197: turn_on(point);
                                   1201 ;	connect.c:101: if (a > 63)
      00037B E5*03            [12] 1202 	mov	a,_point
      00037D FF               [12] 1203 	mov	r7,a
      00037E 24 C0            [12] 1204 	add	a,#0xff - 0x3f
      000380 40 28            [24] 1205 	jc	00114$
                                   1206 ;	connect.c:103: data_mat[a >> 3] |= 0x80 >> (a & 7);
      000382 EF               [12] 1207 	mov	a,r7
      000383 C4               [12] 1208 	swap	a
      000384 23               [12] 1209 	rl	a
      000385 54 1F            [12] 1210 	anl	a,#0x1f
      000387 24r04            [12] 1211 	add	a,#_data_mat
      000389 F9               [12] 1212 	mov	r1,a
      00038A 87 06            [24] 1213 	mov	ar6,@r1
      00038C 53 07 07         [24] 1214 	anl	ar7,#0x07
      00038F 8F F0            [24] 1215 	mov	b,r7
      000391 05 F0            [12] 1216 	inc	b
      000393 7F 80            [12] 1217 	mov	r7,#0x80
      000395 E4               [12] 1218 	clr	a
      000396 FD               [12] 1219 	mov	r5,a
      000397 33               [12] 1220 	rlc	a
      000398 92 D2            [24] 1221 	mov	ov,c
      00039A 80 08            [24] 1222 	sjmp	00147$
      00039C                       1223 00146$:
      00039C A2 D2            [12] 1224 	mov	c,ov
      00039E ED               [12] 1225 	mov	a,r5
      00039F 13               [12] 1226 	rrc	a
      0003A0 FD               [12] 1227 	mov	r5,a
      0003A1 EF               [12] 1228 	mov	a,r7
      0003A2 13               [12] 1229 	rrc	a
      0003A3 FF               [12] 1230 	mov	r7,a
      0003A4                       1231 00147$:
      0003A4 D5 F0 F5         [24] 1232 	djnz	b,00146$
      0003A7 EF               [12] 1233 	mov	a,r7
      0003A8 4E               [12] 1234 	orl	a,r6
      0003A9 F7               [12] 1235 	mov	@r1,a
                                   1236 ;	connect.c:197: turn_on(point);
      0003AA                       1237 00114$:
                                   1238 ;	connect.c:198: }
      0003AA 22               [24] 1239 	ret
                                   1240 ;------------------------------------------------------------
                                   1241 ;Allocation info for local variables in function 'resolve_message'
                                   1242 ;------------------------------------------------------------
                                   1243 ;__1966080027              Allocated to registers r7 
                                   1244 ;a                         Allocated to registers 
                                   1245 ;__1966080029              Allocated to registers r7 
                                   1246 ;a                         Allocated to registers 
                                   1247 ;------------------------------------------------------------
                                   1248 ;	connect.c:199: void resolve_message(void)
                                   1249 ;	-----------------------------------------
                                   1250 ;	 function resolve_message
                                   1251 ;	-----------------------------------------
      0003AB                       1252 _resolve_message:
                                   1253 ;	connect.c:201: if (received_data & forward)
      0003AB 90r00r0A         [24] 1254 	mov	dptr,#_forward
      0003AE E4               [12] 1255 	clr	a
      0003AF 93               [24] 1256 	movc	a,@a+dptr
      0003B0 FF               [12] 1257 	mov	r7,a
      0003B1 55*02            [12] 1258 	anl	a,_received_data
      0003B3 60 3E            [24] 1259 	jz	00105$
                                   1260 ;	connect.c:203: kit_id = 1;
                                   1261 ;	assignBit
      0003B5 D2*00            [12] 1262 	setb	_kit_id
                                   1263 ;	connect.c:204: point = 8 * (received_data ^ forward);
      0003B7 E5*02            [12] 1264 	mov	a,_received_data
      0003B9 62 07            [12] 1265 	xrl	ar7,a
      0003BB EF               [12] 1266 	mov	a,r7
      0003BC C4               [12] 1267 	swap	a
      0003BD 03               [12] 1268 	rr	a
      0003BE 54 F8            [12] 1269 	anl	a,#0xf8
      0003C0 F5*03            [12] 1270 	mov	_point,a
                                   1271 ;	connect.c:206: turn_on(point);
                                   1272 ;	connect.c:101: if (a > 63)
      0003C2 E5*03            [12] 1273 	mov	a,_point
      0003C4 FF               [12] 1274 	mov	r7,a
      0003C5 24 C0            [12] 1275 	add	a,#0xff - 0x3f
      0003C7 50 01            [24] 1276 	jnc	00132$
      0003C9 22               [24] 1277 	ret
      0003CA                       1278 00132$:
                                   1279 ;	connect.c:103: data_mat[a >> 3] |= 0x80 >> (a & 7);
      0003CA EF               [12] 1280 	mov	a,r7
      0003CB C4               [12] 1281 	swap	a
      0003CC 23               [12] 1282 	rl	a
      0003CD 54 1F            [12] 1283 	anl	a,#0x1f
      0003CF 24r04            [12] 1284 	add	a,#_data_mat
      0003D1 F9               [12] 1285 	mov	r1,a
      0003D2 87 06            [24] 1286 	mov	ar6,@r1
      0003D4 53 07 07         [24] 1287 	anl	ar7,#0x07
      0003D7 8F F0            [24] 1288 	mov	b,r7
      0003D9 05 F0            [12] 1289 	inc	b
      0003DB 7F 80            [12] 1290 	mov	r7,#0x80
      0003DD E4               [12] 1291 	clr	a
      0003DE FD               [12] 1292 	mov	r5,a
      0003DF 33               [12] 1293 	rlc	a
      0003E0 92 D2            [24] 1294 	mov	ov,c
      0003E2 80 08            [24] 1295 	sjmp	00134$
      0003E4                       1296 00133$:
      0003E4 A2 D2            [12] 1297 	mov	c,ov
      0003E6 ED               [12] 1298 	mov	a,r5
      0003E7 13               [12] 1299 	rrc	a
      0003E8 FD               [12] 1300 	mov	r5,a
      0003E9 EF               [12] 1301 	mov	a,r7
      0003EA 13               [12] 1302 	rrc	a
      0003EB FF               [12] 1303 	mov	r7,a
      0003EC                       1304 00134$:
      0003EC D5 F0 F5         [24] 1305 	djnz	b,00133$
      0003EF EF               [12] 1306 	mov	a,r7
      0003F0 4E               [12] 1307 	orl	a,r6
      0003F1 F7               [12] 1308 	mov	@r1,a
                                   1309 ;	connect.c:206: turn_on(point);
      0003F2 22               [24] 1310 	ret
      0003F3                       1311 00105$:
                                   1312 ;	connect.c:208: else if (received_data & back)
      0003F3 90r00r0B         [24] 1313 	mov	dptr,#_back
      0003F6 E4               [12] 1314 	clr	a
      0003F7 93               [24] 1315 	movc	a,@a+dptr
      0003F8 FF               [12] 1316 	mov	r7,a
      0003F9 55*02            [12] 1317 	anl	a,_received_data
      0003FB 60 3F            [24] 1318 	jz	00102$
                                   1319 ;	connect.c:210: kit_id = 0;
                                   1320 ;	assignBit
      0003FD C2*00            [12] 1321 	clr	_kit_id
                                   1322 ;	connect.c:211: point = 7 + (8 * (received_data ^ back));
      0003FF E5*02            [12] 1323 	mov	a,_received_data
      000401 62 07            [12] 1324 	xrl	ar7,a
      000403 EF               [12] 1325 	mov	a,r7
      000404 C4               [12] 1326 	swap	a
      000405 03               [12] 1327 	rr	a
      000406 54 F8            [12] 1328 	anl	a,#0xf8
      000408 24 07            [12] 1329 	add	a,#0x07
      00040A F5*03            [12] 1330 	mov	_point,a
                                   1331 ;	connect.c:212: turn_on(point);
                                   1332 ;	connect.c:101: if (a > 63)
      00040C E5*03            [12] 1333 	mov	a,_point
      00040E FF               [12] 1334 	mov	r7,a
      00040F 24 C0            [12] 1335 	add	a,#0xff - 0x3f
      000411 40 2F            [24] 1336 	jc	00113$
                                   1337 ;	connect.c:103: data_mat[a >> 3] |= 0x80 >> (a & 7);
      000413 EF               [12] 1338 	mov	a,r7
      000414 C4               [12] 1339 	swap	a
      000415 23               [12] 1340 	rl	a
      000416 54 1F            [12] 1341 	anl	a,#0x1f
      000418 24r04            [12] 1342 	add	a,#_data_mat
      00041A F9               [12] 1343 	mov	r1,a
      00041B 87 06            [24] 1344 	mov	ar6,@r1
      00041D 53 07 07         [24] 1345 	anl	ar7,#0x07
      000420 8F F0            [24] 1346 	mov	b,r7
      000422 05 F0            [12] 1347 	inc	b
      000424 7F 80            [12] 1348 	mov	r7,#0x80
      000426 E4               [12] 1349 	clr	a
      000427 FD               [12] 1350 	mov	r5,a
      000428 33               [12] 1351 	rlc	a
      000429 92 D2            [24] 1352 	mov	ov,c
      00042B 80 08            [24] 1353 	sjmp	00138$
      00042D                       1354 00137$:
      00042D A2 D2            [12] 1355 	mov	c,ov
      00042F ED               [12] 1356 	mov	a,r5
      000430 13               [12] 1357 	rrc	a
      000431 FD               [12] 1358 	mov	r5,a
      000432 EF               [12] 1359 	mov	a,r7
      000433 13               [12] 1360 	rrc	a
      000434 FF               [12] 1361 	mov	r7,a
      000435                       1362 00138$:
      000435 D5 F0 F5         [24] 1363 	djnz	b,00137$
      000438 EF               [12] 1364 	mov	a,r7
      000439 4E               [12] 1365 	orl	a,r6
      00043A F7               [12] 1366 	mov	@r1,a
                                   1367 ;	connect.c:212: turn_on(point);
      00043B 22               [24] 1368 	ret
      00043C                       1369 00102$:
                                   1370 ;	connect.c:216: key_pressed = received_data;
      00043C 85*02*0C         [24] 1371 	mov	_key_pressed,_received_data
                                   1372 ;	connect.c:217: key_pressed_handle();
                                   1373 ;	connect.c:219: }
      00043F 02r01r2A         [24] 1374 	ljmp	_key_pressed_handle
      000442                       1375 00113$:
      000442 22               [24] 1376 	ret
                                   1377 ;------------------------------------------------------------
                                   1378 ;Allocation info for local variables in function 'main'
                                   1379 ;------------------------------------------------------------
                                   1380 ;__1966080031              Allocated to registers r7 
                                   1381 ;row                       Allocated to registers r7 
                                   1382 ;current_data              Allocated with name '_main_current_data_458752_175'
                                   1383 ;i                         Allocated to registers r3 
                                   1384 ;i                         Allocated to registers r6 
                                   1385 ;------------------------------------------------------------
                                   1386 ;	connect.c:222: void main(void)
                                   1387 ;	-----------------------------------------
                                   1388 ;	 function main
                                   1389 ;	-----------------------------------------
      000443                       1390 _main:
                                   1391 ;	connect.c:235: kit_id = 0;
                                   1392 ;	assignBit
      000443 C2*00            [12] 1393 	clr	_kit_id
                                   1394 ;	connect.c:236: point = 0;
      000445 75*03 00         [24] 1395 	mov	_point,#0x00
                                   1396 ;	connect.c:238: uart_init();
      000448 12r00rB2         [24] 1397 	lcall	_uart_init
                                   1398 ;	connect.c:239: while (1)
      00044B                       1399 00104$:
                                   1400 ;	keymatrix.h:12: P1 = 0xff;
      00044B 75 90 FF         [24] 1401 	mov	_P1,#0xff
                                   1402 ;	keymatrix.h:13: P1_3 = 0;
                                   1403 ;	assignBit
      00044E C2 93            [12] 1404 	clr	_P1_3
                                   1405 ;	connect.c:14: void move_up(void);
      000450 20 97 08         [24] 1406 	jb	_P1_7,00110$
      000453                       1407 00106$:
      000453 30 97 FD         [24] 1408 	jnb	_P1_7,00106$
      000456 7F 01            [12] 1409 	mov	r7,#0x01
      000458 02r05r06         [24] 1410 	ljmp	00186$
      00045B                       1411 00110$:
                                   1412 ;	connect.c:15: void move_down(void);
      00045B 20 96 08         [24] 1413 	jb	_P1_6,00115$
      00045E                       1414 00111$:
      00045E 30 96 FD         [24] 1415 	jnb	_P1_6,00111$
      000461 7F 05            [12] 1416 	mov	r7,#0x05
      000463 02r05r06         [24] 1417 	ljmp	00186$
      000466                       1418 00115$:
                                   1419 ;	connect.c:16: void move_left(void);
      000466 20 95 08         [24] 1420 	jb	_P1_5,00120$
      000469                       1421 00116$:
      000469 30 95 FD         [24] 1422 	jnb	_P1_5,00116$
      00046C 7F 09            [12] 1423 	mov	r7,#0x09
      00046E 02r05r06         [24] 1424 	ljmp	00186$
      000471                       1425 00120$:
                                   1426 ;	connect.c:17: void move_right(void);
      000471 20 94 08         [24] 1427 	jb	_P1_4,00125$
      000474                       1428 00121$:
      000474 30 94 FD         [24] 1429 	jnb	_P1_4,00121$
      000477 7F 0D            [12] 1430 	mov	r7,#0x0d
      000479 02r05r06         [24] 1431 	ljmp	00186$
      00047C                       1432 00125$:
                                   1433 ;	keymatrix.h:19: P1 = 0xff;
      00047C 75 90 FF         [24] 1434 	mov	_P1,#0xff
                                   1435 ;	keymatrix.h:20: P1_2 = 0;
                                   1436 ;	assignBit
      00047F C2 92            [12] 1437 	clr	_P1_2
                                   1438 ;	connect.c:21: #define RCK P3_5
      000481 20 97 08         [24] 1439 	jb	_P1_7,00130$
      000484                       1440 00126$:
      000484 30 97 FD         [24] 1441 	jnb	_P1_7,00126$
      000487 7F 02            [12] 1442 	mov	r7,#0x02
      000489 02r05r06         [24] 1443 	ljmp	00186$
      00048C                       1444 00130$:
                                   1445 ;	connect.c:22: 
      00048C 20 96 07         [24] 1446 	jb	_P1_6,00135$
      00048F                       1447 00131$:
      00048F 30 96 FD         [24] 1448 	jnb	_P1_6,00131$
      000492 7F 06            [12] 1449 	mov	r7,#0x06
      000494 80 70            [24] 1450 	sjmp	00186$
      000496                       1451 00135$:
                                   1452 ;	connect.c:23: //***************************************************************//
      000496 20 95 07         [24] 1453 	jb	_P1_5,00140$
      000499                       1454 00136$:
      000499 30 95 FD         [24] 1455 	jnb	_P1_5,00136$
      00049C 7F 0A            [12] 1456 	mov	r7,#0x0a
      00049E 80 66            [24] 1457 	sjmp	00186$
      0004A0                       1458 00140$:
                                   1459 ;	connect.c:24: void uart_init(void)
      0004A0 20 94 07         [24] 1460 	jb	_P1_4,00145$
      0004A3                       1461 00141$:
      0004A3 30 94 FD         [24] 1462 	jnb	_P1_4,00141$
      0004A6 7F 0E            [12] 1463 	mov	r7,#0x0e
      0004A8 80 5C            [24] 1464 	sjmp	00186$
      0004AA                       1465 00145$:
                                   1466 ;	keymatrix.h:26: P1 = 0xff;
      0004AA 75 90 FF         [24] 1467 	mov	_P1,#0xff
                                   1468 ;	keymatrix.h:27: P1_1 = 0;
                                   1469 ;	assignBit
      0004AD C2 91            [12] 1470 	clr	_P1_1
                                   1471 ;	connect.c:28: TMOD &= 0x0f;
      0004AF 20 97 07         [24] 1472 	jb	_P1_7,00150$
      0004B2                       1473 00146$:
      0004B2 30 97 FD         [24] 1474 	jnb	_P1_7,00146$
      0004B5 7F 03            [12] 1475 	mov	r7,#0x03
      0004B7 80 4D            [24] 1476 	sjmp	00186$
      0004B9                       1477 00150$:
                                   1478 ;	connect.c:29: TMOD |= 0x20;
      0004B9 20 96 07         [24] 1479 	jb	_P1_6,00155$
      0004BC                       1480 00151$:
      0004BC 30 96 FD         [24] 1481 	jnb	_P1_6,00151$
      0004BF 7F 07            [12] 1482 	mov	r7,#0x07
      0004C1 80 43            [24] 1483 	sjmp	00186$
      0004C3                       1484 00155$:
                                   1485 ;	connect.c:30: TH1 = 0xfd;
      0004C3 20 95 07         [24] 1486 	jb	_P1_5,00160$
      0004C6                       1487 00156$:
      0004C6 30 95 FD         [24] 1488 	jnb	_P1_5,00156$
      0004C9 7F 0B            [12] 1489 	mov	r7,#0x0b
      0004CB 80 39            [24] 1490 	sjmp	00186$
      0004CD                       1491 00160$:
                                   1492 ;	connect.c:31: TL1 = 0xfd;
      0004CD 20 94 07         [24] 1493 	jb	_P1_4,00165$
      0004D0                       1494 00161$:
      0004D0 30 94 FD         [24] 1495 	jnb	_P1_4,00161$
      0004D3 7F 0F            [12] 1496 	mov	r7,#0x0f
      0004D5 80 2F            [24] 1497 	sjmp	00186$
      0004D7                       1498 00165$:
                                   1499 ;	keymatrix.h:33: P1 = 0xff;
      0004D7 75 90 FF         [24] 1500 	mov	_P1,#0xff
                                   1501 ;	keymatrix.h:34: P1_0 = 0;
                                   1502 ;	assignBit
      0004DA C2 90            [12] 1503 	clr	_P1_0
                                   1504 ;	connect.c:35: SM0 = 0;
      0004DC 20 97 07         [24] 1505 	jb	_P1_7,00170$
      0004DF                       1506 00166$:
      0004DF 30 97 FD         [24] 1507 	jnb	_P1_7,00166$
      0004E2 7F 04            [12] 1508 	mov	r7,#0x04
      0004E4 80 20            [24] 1509 	sjmp	00186$
      0004E6                       1510 00170$:
                                   1511 ;	connect.c:36: SM1 = 1;
      0004E6 20 96 07         [24] 1512 	jb	_P1_6,00175$
      0004E9                       1513 00171$:
      0004E9 30 96 FD         [24] 1514 	jnb	_P1_6,00171$
      0004EC 7F 08            [12] 1515 	mov	r7,#0x08
      0004EE 80 16            [24] 1516 	sjmp	00186$
      0004F0                       1517 00175$:
                                   1518 ;	connect.c:37: // allow interrupt for receive interrupt
      0004F0 20 95 07         [24] 1519 	jb	_P1_5,00180$
      0004F3                       1520 00176$:
      0004F3 30 95 FD         [24] 1521 	jnb	_P1_5,00176$
      0004F6 7F 0C            [12] 1522 	mov	r7,#0x0c
      0004F8 80 0C            [24] 1523 	sjmp	00186$
      0004FA                       1524 00180$:
                                   1525 ;	connect.c:38: ES = 1;
      0004FA 20 94 07         [24] 1526 	jb	_P1_4,00185$
      0004FD                       1527 00181$:
      0004FD 30 94 FD         [24] 1528 	jnb	_P1_4,00181$
      000500 7F 10            [12] 1529 	mov	r7,#0x10
      000502 80 02            [24] 1530 	sjmp	00186$
      000504                       1531 00185$:
                                   1532 ;	keymatrix.h:39: return 0;
      000504 7F 00            [12] 1533 	mov	r7,#0x00
                                   1534 ;	connect.c:241: key_pressed = get_pressed_key();
      000506                       1535 00186$:
                                   1536 ;	connect.c:242: if (key_pressed)
      000506 EF               [12] 1537 	mov	a,r7
      000507 F5*0C            [12] 1538 	mov	_key_pressed,a
      000509 60 03            [24] 1539 	jz	00241$
                                   1540 ;	connect.c:244: key_pressed_handle();
      00050B 12r01r2A         [24] 1541 	lcall	_key_pressed_handle
                                   1542 ;	connect.c:73: for (char row = 0; row < 8; row++)
      00050E                       1543 00241$:
      00050E 7F 00            [12] 1544 	mov	r7,#0x00
      000510                       1545 00198$:
      000510 BF 08 00         [24] 1546 	cjne	r7,#0x08,00397$
      000513                       1547 00397$:
      000513 40 03            [24] 1548 	jc	00398$
      000515 02r04r4B         [24] 1549 	ljmp	00104$
      000518                       1550 00398$:
                                   1551 ;	connect.c:75: const char current_data = data_mat[row];
      000518 EF               [12] 1552 	mov	a,r7
      000519 24r04            [12] 1553 	add	a,#_data_mat
      00051B F9               [12] 1554 	mov	r1,a
      00051C 87*0D            [24] 1555 	mov	_main_current_data_458752_175,@r1
                                   1556 ;	connect.c:76: for (char i = 0; i < 8; i++)
      00051E 8F F0            [24] 1557 	mov	b,r7
      000520 05 F0            [12] 1558 	inc	b
      000522 7C 80            [12] 1559 	mov	r4,#0x80
      000524 E4               [12] 1560 	clr	a
      000525 FD               [12] 1561 	mov	r5,a
      000526 33               [12] 1562 	rlc	a
      000527 92 D2            [24] 1563 	mov	ov,c
      000529 80 08            [24] 1564 	sjmp	00400$
      00052B                       1565 00399$:
      00052B A2 D2            [12] 1566 	mov	c,ov
      00052D ED               [12] 1567 	mov	a,r5
      00052E 13               [12] 1568 	rrc	a
      00052F FD               [12] 1569 	mov	r5,a
      000530 EC               [12] 1570 	mov	a,r4
      000531 13               [12] 1571 	rrc	a
      000532 FC               [12] 1572 	mov	r4,a
      000533                       1573 00400$:
      000533 D5 F0 F5         [24] 1574 	djnz	b,00399$
      000536 7B 00            [12] 1575 	mov	r3,#0x00
      000538                       1576 00192$:
      000538 BB 08 00         [24] 1577 	cjne	r3,#0x08,00401$
      00053B                       1578 00401$:
      00053B 50 2B            [24] 1579 	jnc	00187$
                                   1580 ;	connect.c:78: SER = (0x80 >> row) & (0x80 >> i);
      00053D 8B F0            [24] 1581 	mov	b,r3
      00053F 05 F0            [12] 1582 	inc	b
      000541 7A 80            [12] 1583 	mov	r2,#0x80
      000543 E4               [12] 1584 	clr	a
      000544 FE               [12] 1585 	mov	r6,a
      000545 33               [12] 1586 	rlc	a
      000546 92 D2            [24] 1587 	mov	ov,c
      000548 80 08            [24] 1588 	sjmp	00404$
      00054A                       1589 00403$:
      00054A A2 D2            [12] 1590 	mov	c,ov
      00054C EE               [12] 1591 	mov	a,r6
      00054D 13               [12] 1592 	rrc	a
      00054E FE               [12] 1593 	mov	r6,a
      00054F EA               [12] 1594 	mov	a,r2
      000550 13               [12] 1595 	rrc	a
      000551 FA               [12] 1596 	mov	r2,a
      000552                       1597 00404$:
      000552 D5 F0 F5         [24] 1598 	djnz	b,00403$
      000555 EC               [12] 1599 	mov	a,r4
      000556 52 02            [12] 1600 	anl	ar2,a
      000558 ED               [12] 1601 	mov	a,r5
      000559 52 06            [12] 1602 	anl	ar6,a
                                   1603 ;	assignBit
      00055B EA               [12] 1604 	mov	a,r2
      00055C 4E               [12] 1605 	orl	a,r6
      00055D 24 FF            [12] 1606 	add	a,#0xff
      00055F 92 B4            [24] 1607 	mov	_P3_4,c
                                   1608 ;	connect.c:79: SCK = 1;
                                   1609 ;	assignBit
      000561 D2 B6            [12] 1610 	setb	_P3_6
                                   1611 ;	connect.c:80: SCK = 0;
                                   1612 ;	assignBit
      000563 C2 B6            [12] 1613 	clr	_P3_6
                                   1614 ;	connect.c:76: for (char i = 0; i < 8; i++)
      000565 0B               [12] 1615 	inc	r3
      000566 80 D0            [24] 1616 	sjmp	00192$
      000568                       1617 00187$:
                                   1618 ;	connect.c:82: P0 = 0xff;
      000568 75 80 FF         [24] 1619 	mov	_P0,#0xff
                                   1620 ;	connect.c:83: RCK = 1;
                                   1621 ;	assignBit
      00056B D2 B5            [12] 1622 	setb	_P3_5
                                   1623 ;	connect.c:84: RCK = 0;
                                   1624 ;	assignBit
      00056D C2 B5            [12] 1625 	clr	_P3_5
                                   1626 ;	connect.c:85: P0 = ~current_data;
      00056F E5*0D            [12] 1627 	mov	a,_main_current_data_458752_175
      000571 F4               [12] 1628 	cpl	a
      000572 F5 80            [12] 1629 	mov	_P0,a
                                   1630 ;	connect.c:86: for (char i = 0; i < 5; i++)
      000574 7E 00            [12] 1631 	mov	r6,#0x00
      000576                       1632 00195$:
      000576 BE 05 00         [24] 1633 	cjne	r6,#0x05,00405$
      000579                       1634 00405$:
      000579 50 03            [24] 1635 	jnc	00199$
      00057B 0E               [12] 1636 	inc	r6
      00057C 80 F8            [24] 1637 	sjmp	00195$
      00057E                       1638 00199$:
                                   1639 ;	connect.c:73: for (char row = 0; row < 8; row++)
      00057E 0F               [12] 1640 	inc	r7
                                   1641 ;	connect.c:246: display_led_mat();
                                   1642 ;	connect.c:248: }
      00057F 80 8F            [24] 1643 	sjmp	00198$
                                   1644 	.area CSEG    (CODE)
                                   1645 	.area CONST   (CODE)
      000000                       1646 _number_string:
      000000 3F                    1647 	.db #0x3f	; 63
      000001 06                    1648 	.db #0x06	; 6
      000002 5B                    1649 	.db #0x5b	; 91
      000003 4F                    1650 	.db #0x4f	; 79	'O'
      000004 66                    1651 	.db #0x66	; 102	'f'
      000005 6D                    1652 	.db #0x6d	; 109	'm'
      000006 7D                    1653 	.db #0x7d	; 125
      000007 07                    1654 	.db #0x07	; 7
      000008 7F                    1655 	.db #0x7f	; 127
      000009 6F                    1656 	.db #0x6f	; 111	'o'
      00000A                       1657 _forward:
      00000A 20                    1658 	.db #0x20	; 32
      00000B                       1659 _back:
      00000B 40                    1660 	.db #0x40	; 64
                                   1661 	.area XINIT   (CODE)
                                   1662 	.area CABS    (ABS,CODE)
